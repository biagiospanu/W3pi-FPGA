-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_0_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_1_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_2_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_3_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_4_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_6_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_7_val : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_2280 : STD_LOGIC_VECTOR (17 downto 0) := "000010001010000000";
    constant ap_const_lv18_2980 : STD_LOGIC_VECTOR (17 downto 0) := "000010100110000000";
    constant ap_const_lv18_286 : STD_LOGIC_VECTOR (17 downto 0) := "000000001010000110";
    constant ap_const_lv18_A80 : STD_LOGIC_VECTOR (17 downto 0) := "000000101010000000";
    constant ap_const_lv18_1DB : STD_LOGIC_VECTOR (17 downto 0) := "000000000111011011";
    constant ap_const_lv18_1280 : STD_LOGIC_VECTOR (17 downto 0) := "000001001010000000";
    constant ap_const_lv18_D664 : STD_LOGIC_VECTOR (17 downto 0) := "001101011001100100";
    constant ap_const_lv18_1D80 : STD_LOGIC_VECTOR (17 downto 0) := "000001110110000000";
    constant ap_const_lv18_1980 : STD_LOGIC_VECTOR (17 downto 0) := "000001100110000000";
    constant ap_const_lv18_1580 : STD_LOGIC_VECTOR (17 downto 0) := "000001010110000000";
    constant ap_const_lv18_2B80 : STD_LOGIC_VECTOR (17 downto 0) := "000010101110000000";
    constant ap_const_lv18_1318E : STD_LOGIC_VECTOR (17 downto 0) := "010011000110001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv18_6880 : STD_LOGIC_VECTOR (17 downto 0) := "000110100010000000";
    constant ap_const_lv18_2180 : STD_LOGIC_VECTOR (17 downto 0) := "000010000110000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_6D1 : STD_LOGIC_VECTOR (10 downto 0) := "11011010001";
    constant ap_const_lv11_204 : STD_LOGIC_VECTOR (10 downto 0) := "01000000100";
    constant ap_const_lv11_5CD : STD_LOGIC_VECTOR (10 downto 0) := "10111001101";
    constant ap_const_lv11_63E : STD_LOGIC_VECTOR (10 downto 0) := "11000111110";
    constant ap_const_lv11_6D6 : STD_LOGIC_VECTOR (10 downto 0) := "11011010110";
    constant ap_const_lv11_193 : STD_LOGIC_VECTOR (10 downto 0) := "00110010011";
    constant ap_const_lv11_73F : STD_LOGIC_VECTOR (10 downto 0) := "11100111111";
    constant ap_const_lv11_5E2 : STD_LOGIC_VECTOR (10 downto 0) := "10111100010";
    constant ap_const_lv11_6F9 : STD_LOGIC_VECTOR (10 downto 0) := "11011111001";
    constant ap_const_lv11_58 : STD_LOGIC_VECTOR (10 downto 0) := "00001011000";
    constant ap_const_lv11_132 : STD_LOGIC_VECTOR (10 downto 0) := "00100110010";
    constant ap_const_lv11_457 : STD_LOGIC_VECTOR (10 downto 0) := "10001010111";
    constant ap_const_lv11_68E : STD_LOGIC_VECTOR (10 downto 0) := "11010001110";
    constant ap_const_lv11_5A6 : STD_LOGIC_VECTOR (10 downto 0) := "10110100110";
    constant ap_const_lv11_718 : STD_LOGIC_VECTOR (10 downto 0) := "11100011000";
    constant ap_const_lv11_A4 : STD_LOGIC_VECTOR (10 downto 0) := "00010100100";

attribute shreg_extract : string;
    signal icmp_ln4_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_reg_667_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_667_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_38_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_38_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_39_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_39_reg_684 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_40_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_40_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_41_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_41_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_41_reg_696_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_42_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_42_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_42_reg_702_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_42_reg_702_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_43_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_43_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_43_reg_708_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_43_reg_708_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_43_reg_708_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_44_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_44_reg_714 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_44_reg_714_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_45_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_45_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_46_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_46_reg_724 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_46_reg_724_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_47_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_47_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_47_reg_729_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_48_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_48_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_48_reg_734_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_48_reg_734_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_66_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_66_reg_739 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_66_reg_739_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_66_reg_739_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_50_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_50_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_50_reg_744_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_50_reg_744_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_51_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_51_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_51_reg_749_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_51_reg_749_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_51_reg_749_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_34_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_34_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_34_reg_766_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_5_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_5_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_5_reg_773_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_5_reg_773_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_35_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_35_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_36_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_36_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_37_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_37_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_37_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_37_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_41_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_41_reg_807 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_41_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_41_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_47_fu_560_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_47_reg_817 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_256_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln107_18_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_19_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_20_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_47_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_40_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_21_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_48_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_41_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_34_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_42_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_39_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln120_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_404_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_fu_408_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_36_fu_415_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln120_7_fu_422_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_33_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_37_fu_426_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_38_fu_433_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_35_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_39_fu_441_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_40_fu_449_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln120_8_fu_457_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln107_22_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_49_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_38_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_43_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_44_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_39_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_45_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_36_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_42_fu_522_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_38_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_43_fu_529_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_44_fu_536_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_40_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_45_fu_544_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_46_fu_552_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln107_23_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_50_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_46_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_42_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_fu_595_p33 : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_595_p34 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p35 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal x_0_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_1_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_2_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_3_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_4_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_6_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_7_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_595_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p31 : STD_LOGIC_VECTOR (3 downto 0);

    component my_prj_sparsemux_33_4_11_1_0_x1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        din9 : IN STD_LOGIC_VECTOR (10 downto 0);
        din10 : IN STD_LOGIC_VECTOR (10 downto 0);
        din11 : IN STD_LOGIC_VECTOR (10 downto 0);
        din12 : IN STD_LOGIC_VECTOR (10 downto 0);
        din13 : IN STD_LOGIC_VECTOR (10 downto 0);
        din14 : IN STD_LOGIC_VECTOR (10 downto 0);
        din15 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_33_4_11_1_0_x1_U56 : component my_prj_sparsemux_33_4_11_1_0_x1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        CASE9 => "1001",
        din9_WIDTH => 11,
        CASE10 => "1010",
        din10_WIDTH => 11,
        CASE11 => "1011",
        din11_WIDTH => 11,
        CASE12 => "1100",
        din12_WIDTH => 11,
        CASE13 => "1101",
        din13_WIDTH => 11,
        CASE14 => "1110",
        din14_WIDTH => 11,
        CASE15 => "1111",
        din15_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_6D1,
        din1 => ap_const_lv11_204,
        din2 => ap_const_lv11_5CD,
        din3 => ap_const_lv11_63E,
        din4 => ap_const_lv11_6D6,
        din5 => ap_const_lv11_193,
        din6 => ap_const_lv11_73F,
        din7 => ap_const_lv11_5E2,
        din8 => ap_const_lv11_6F9,
        din9 => ap_const_lv11_58,
        din10 => ap_const_lv11_132,
        din11 => ap_const_lv11_457,
        din12 => ap_const_lv11_68E,
        din13 => ap_const_lv11_5A6,
        din14 => ap_const_lv11_718,
        din15 => ap_const_lv11_A4,
        def => agg_result_fu_595_p33,
        sel => agg_result_fu_595_p34,
        dout => agg_result_fu_595_p35);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_34_reg_766 <= and_ln105_34_fu_303_p2;
                and_ln105_34_reg_766_pp0_iter2_reg <= and_ln105_34_reg_766;
                and_ln105_35_reg_779 <= and_ln105_35_fu_319_p2;
                and_ln105_36_reg_785 <= and_ln105_36_fu_329_p2;
                and_ln105_37_reg_796 <= and_ln105_37_fu_356_p2;
                and_ln105_reg_754 <= and_ln105_fu_289_p2;
                and_ln107_5_reg_773 <= and_ln107_5_fu_313_p2;
                and_ln107_5_reg_773_pp0_iter2_reg <= and_ln107_5_reg_773;
                and_ln107_5_reg_773_pp0_iter3_reg <= and_ln107_5_reg_773_pp0_iter2_reg;
                and_ln107_reg_761 <= and_ln107_fu_298_p2;
                icmp_ln4_38_reg_678 <= icmp_ln4_38_fu_190_p2;
                icmp_ln4_39_reg_684 <= icmp_ln4_39_fu_196_p2;
                icmp_ln4_40_reg_690 <= icmp_ln4_40_fu_202_p2;
                icmp_ln4_41_reg_696 <= icmp_ln4_41_fu_208_p2;
                icmp_ln4_41_reg_696_pp0_iter1_reg <= icmp_ln4_41_reg_696;
                icmp_ln4_42_reg_702 <= icmp_ln4_42_fu_214_p2;
                icmp_ln4_42_reg_702_pp0_iter1_reg <= icmp_ln4_42_reg_702;
                icmp_ln4_42_reg_702_pp0_iter2_reg <= icmp_ln4_42_reg_702_pp0_iter1_reg;
                icmp_ln4_43_reg_708 <= icmp_ln4_43_fu_220_p2;
                icmp_ln4_43_reg_708_pp0_iter1_reg <= icmp_ln4_43_reg_708;
                icmp_ln4_43_reg_708_pp0_iter2_reg <= icmp_ln4_43_reg_708_pp0_iter1_reg;
                icmp_ln4_43_reg_708_pp0_iter3_reg <= icmp_ln4_43_reg_708_pp0_iter2_reg;
                icmp_ln4_44_reg_714 <= icmp_ln4_44_fu_226_p2;
                icmp_ln4_44_reg_714_pp0_iter1_reg <= icmp_ln4_44_reg_714;
                icmp_ln4_45_reg_719 <= icmp_ln4_45_fu_232_p2;
                icmp_ln4_46_reg_724 <= icmp_ln4_46_fu_238_p2;
                icmp_ln4_46_reg_724_pp0_iter1_reg <= icmp_ln4_46_reg_724;
                icmp_ln4_47_reg_729 <= icmp_ln4_47_fu_244_p2;
                icmp_ln4_47_reg_729_pp0_iter1_reg <= icmp_ln4_47_reg_729;
                icmp_ln4_48_reg_734 <= icmp_ln4_48_fu_250_p2;
                icmp_ln4_48_reg_734_pp0_iter1_reg <= icmp_ln4_48_reg_734;
                icmp_ln4_48_reg_734_pp0_iter2_reg <= icmp_ln4_48_reg_734_pp0_iter1_reg;
                icmp_ln4_50_reg_744 <= icmp_ln4_50_fu_272_p2;
                icmp_ln4_50_reg_744_pp0_iter1_reg <= icmp_ln4_50_reg_744;
                icmp_ln4_50_reg_744_pp0_iter2_reg <= icmp_ln4_50_reg_744_pp0_iter1_reg;
                icmp_ln4_51_reg_749 <= icmp_ln4_51_fu_278_p2;
                icmp_ln4_51_reg_749_pp0_iter1_reg <= icmp_ln4_51_reg_749;
                icmp_ln4_51_reg_749_pp0_iter2_reg <= icmp_ln4_51_reg_749_pp0_iter1_reg;
                icmp_ln4_51_reg_749_pp0_iter3_reg <= icmp_ln4_51_reg_749_pp0_iter2_reg;
                icmp_ln4_66_reg_739 <= icmp_ln4_66_fu_266_p2;
                icmp_ln4_66_reg_739_pp0_iter1_reg <= icmp_ln4_66_reg_739;
                icmp_ln4_66_reg_739_pp0_iter2_reg <= icmp_ln4_66_reg_739_pp0_iter1_reg;
                icmp_ln4_reg_667 <= icmp_ln4_fu_184_p2;
                icmp_ln4_reg_667_pp0_iter1_reg <= icmp_ln4_reg_667;
                icmp_ln4_reg_667_pp0_iter2_reg <= icmp_ln4_reg_667_pp0_iter1_reg;
                or_ln120_37_reg_801 <= or_ln120_37_fu_393_p2;
                or_ln120_41_reg_812 <= or_ln120_41_fu_516_p2;
                or_ln120_reg_791 <= or_ln120_fu_345_p2;
                select_ln120_41_reg_807 <= select_ln120_41_fu_461_p3;
                select_ln120_47_reg_817 <= select_ln120_47_fu_560_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= agg_result_fu_595_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                x_0_val_int_reg <= x_0_val;
                x_1_val_int_reg <= x_1_val;
                x_2_val_int_reg <= x_2_val;
                x_3_val_int_reg <= x_3_val;
                x_4_val_int_reg <= x_4_val;
                x_6_val_int_reg <= x_6_val;
                x_7_val_int_reg <= x_7_val;
            end if;
        end if;
    end process;
    agg_result_fu_595_p33 <= "XXXXXXXXXXX";
    agg_result_fu_595_p34 <= 
        select_ln120_47_reg_817 when (or_ln120_42_fu_583_p2(0) = '1') else 
        ap_const_lv4_F;
    and_ln105_34_fu_303_p2 <= (xor_ln107_fu_284_p2 and icmp_ln4_39_reg_684);
    and_ln105_35_fu_319_p2 <= (icmp_ln4_40_reg_690 and and_ln105_fu_289_p2);
    and_ln105_36_fu_329_p2 <= (icmp_ln4_41_reg_696 and and_ln107_fu_298_p2);
    and_ln105_37_fu_356_p2 <= (icmp_ln4_42_reg_702_pp0_iter1_reg and and_ln105_34_reg_766);
    and_ln105_38_fu_473_p2 <= (icmp_ln4_43_reg_708_pp0_iter2_reg and and_ln107_5_reg_773_pp0_iter2_reg);
    and_ln105_39_fu_360_p2 <= (icmp_ln4_44_reg_714_pp0_iter1_reg and and_ln105_35_reg_779);
    and_ln105_40_fu_339_p2 <= (and_ln105_fu_289_p2 and and_ln105_47_fu_334_p2);
    and_ln105_41_fu_364_p2 <= (icmp_ln4_46_reg_724_pp0_iter1_reg and and_ln105_36_reg_785);
    and_ln105_42_fu_373_p2 <= (and_ln107_reg_761 and and_ln105_48_fu_368_p2);
    and_ln105_43_fu_477_p2 <= (icmp_ln4_48_reg_734_pp0_iter2_reg and and_ln105_37_reg_796);
    and_ln105_44_fu_486_p2 <= (and_ln105_49_fu_481_p2 and and_ln105_34_reg_766_pp0_iter2_reg);
    and_ln105_45_fu_491_p2 <= (icmp_ln4_50_reg_744_pp0_iter2_reg and and_ln105_38_fu_473_p2);
    and_ln105_46_fu_578_p2 <= (and_ln107_5_reg_773_pp0_iter3_reg and and_ln105_50_fu_573_p2);
    and_ln105_47_fu_334_p2 <= (xor_ln107_20_fu_324_p2 and icmp_ln4_45_reg_719);
    and_ln105_48_fu_368_p2 <= (xor_ln107_21_fu_351_p2 and icmp_ln4_47_reg_729_pp0_iter1_reg);
    and_ln105_49_fu_481_p2 <= (xor_ln107_22_fu_468_p2 and icmp_ln4_66_reg_739_pp0_iter2_reg);
    and_ln105_50_fu_573_p2 <= (xor_ln107_23_fu_568_p2 and icmp_ln4_51_reg_749_pp0_iter3_reg);
    and_ln105_fu_289_p2 <= (icmp_ln4_reg_667 and icmp_ln4_38_reg_678);
    and_ln107_5_fu_313_p2 <= (xor_ln107_fu_284_p2 and xor_ln107_19_fu_308_p2);
    and_ln107_fu_298_p2 <= (xor_ln107_18_fu_293_p2 and icmp_ln4_reg_667);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(agg_result_fu_595_p35, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= agg_result_fu_595_p35;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_38_fu_190_p2 <= "1" when (signed(x_6_val_int_reg) < signed(ap_const_lv18_2980)) else "0";
    icmp_ln4_39_fu_196_p2 <= "1" when (signed(x_4_val_int_reg) < signed(ap_const_lv18_286)) else "0";
    icmp_ln4_40_fu_202_p2 <= "1" when (signed(x_0_val_int_reg) < signed(ap_const_lv18_A80)) else "0";
    icmp_ln4_41_fu_208_p2 <= "1" when (signed(x_4_val_int_reg) < signed(ap_const_lv18_1DB)) else "0";
    icmp_ln4_42_fu_214_p2 <= "1" when (signed(x_0_val_int_reg) < signed(ap_const_lv18_1280)) else "0";
    icmp_ln4_43_fu_220_p2 <= "1" when (signed(x_2_val_int_reg) < signed(ap_const_lv18_D664)) else "0";
    icmp_ln4_44_fu_226_p2 <= "1" when (signed(x_6_val_int_reg) < signed(ap_const_lv18_1D80)) else "0";
    icmp_ln4_45_fu_232_p2 <= "1" when (signed(x_1_val_int_reg) < signed(ap_const_lv18_1980)) else "0";
    icmp_ln4_46_fu_238_p2 <= "1" when (signed(x_0_val_int_reg) < signed(ap_const_lv18_1580)) else "0";
    icmp_ln4_47_fu_244_p2 <= "1" when (signed(x_6_val_int_reg) < signed(ap_const_lv18_2B80)) else "0";
    icmp_ln4_48_fu_250_p2 <= "1" when (signed(x_3_val_int_reg) < signed(ap_const_lv18_1318E)) else "0";
    icmp_ln4_50_fu_272_p2 <= "1" when (signed(x_6_val_int_reg) < signed(ap_const_lv18_6880)) else "0";
    icmp_ln4_51_fu_278_p2 <= "1" when (signed(x_0_val_int_reg) < signed(ap_const_lv18_2180)) else "0";
    icmp_ln4_66_fu_266_p2 <= "1" when (signed(tmp_fu_256_p4) < signed(ap_const_lv7_1)) else "0";
    icmp_ln4_fu_184_p2 <= "1" when (signed(x_1_val_int_reg) < signed(ap_const_lv18_2280)) else "0";
    or_ln120_33_fu_378_p2 <= (and_ln105_reg_754 or and_ln105_41_fu_364_p2);
    or_ln120_34_fu_383_p2 <= (and_ln105_reg_754 or and_ln105_36_reg_785);
    or_ln120_35_fu_387_p2 <= (or_ln120_34_fu_383_p2 or and_ln105_42_fu_373_p2);
    or_ln120_36_fu_496_p2 <= (icmp_ln4_reg_667_pp0_iter2_reg or and_ln105_43_fu_477_p2);
    or_ln120_37_fu_393_p2 <= (icmp_ln4_reg_667_pp0_iter1_reg or and_ln105_37_fu_356_p2);
    or_ln120_38_fu_501_p2 <= (or_ln120_37_reg_801 or and_ln105_44_fu_486_p2);
    or_ln120_39_fu_506_p2 <= (icmp_ln4_reg_667_pp0_iter2_reg or and_ln105_34_reg_766_pp0_iter2_reg);
    or_ln120_40_fu_510_p2 <= (or_ln120_39_fu_506_p2 or and_ln105_45_fu_491_p2);
    or_ln120_41_fu_516_p2 <= (or_ln120_39_fu_506_p2 or and_ln105_38_fu_473_p2);
    or_ln120_42_fu_583_p2 <= (or_ln120_41_reg_812 or and_ln105_46_fu_578_p2);
    or_ln120_fu_345_p2 <= (and_ln105_40_fu_339_p2 or and_ln105_35_fu_319_p2);
    select_ln120_36_fu_415_p3 <= 
        select_ln120_fu_408_p3 when (or_ln120_reg_791(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_37_fu_426_p3 <= 
        zext_ln120_7_fu_422_p1 when (and_ln105_reg_754(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_38_fu_433_p3 <= 
        select_ln120_37_fu_426_p3 when (or_ln120_33_fu_378_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_39_fu_441_p3 <= 
        select_ln120_38_fu_433_p3 when (or_ln120_34_fu_383_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_40_fu_449_p3 <= 
        select_ln120_39_fu_441_p3 when (or_ln120_35_fu_387_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_41_fu_461_p3 <= 
        zext_ln120_8_fu_457_p1 when (icmp_ln4_reg_667_pp0_iter1_reg(0) = '1') else 
        ap_const_lv4_8;
    select_ln120_42_fu_522_p3 <= 
        select_ln120_41_reg_807 when (or_ln120_36_fu_496_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln120_43_fu_529_p3 <= 
        select_ln120_42_fu_522_p3 when (or_ln120_37_reg_801(0) = '1') else 
        ap_const_lv4_A;
    select_ln120_44_fu_536_p3 <= 
        select_ln120_43_fu_529_p3 when (or_ln120_38_fu_501_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln120_45_fu_544_p3 <= 
        select_ln120_44_fu_536_p3 when (or_ln120_39_fu_506_p2(0) = '1') else 
        ap_const_lv4_C;
    select_ln120_46_fu_552_p3 <= 
        select_ln120_45_fu_544_p3 when (or_ln120_40_fu_510_p2(0) = '1') else 
        ap_const_lv4_D;
    select_ln120_47_fu_560_p3 <= 
        select_ln120_46_fu_552_p3 when (or_ln120_41_fu_516_p2(0) = '1') else 
        ap_const_lv4_E;
    select_ln120_fu_408_p3 <= 
        zext_ln120_fu_404_p1 when (and_ln105_35_reg_779(0) = '1') else 
        ap_const_lv2_2;
    tmp_fu_256_p4 <= x_7_val_int_reg(17 downto 11);
    xor_ln107_18_fu_293_p2 <= (icmp_ln4_38_reg_678 xor ap_const_lv1_1);
    xor_ln107_19_fu_308_p2 <= (icmp_ln4_39_reg_684 xor ap_const_lv1_1);
    xor_ln107_20_fu_324_p2 <= (icmp_ln4_40_reg_690 xor ap_const_lv1_1);
    xor_ln107_21_fu_351_p2 <= (icmp_ln4_41_reg_696_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_22_fu_468_p2 <= (icmp_ln4_42_reg_702_pp0_iter2_reg xor ap_const_lv1_1);
    xor_ln107_23_fu_568_p2 <= (icmp_ln4_43_reg_708_pp0_iter3_reg xor ap_const_lv1_1);
    xor_ln107_fu_284_p2 <= (icmp_ln4_reg_667 xor ap_const_lv1_1);
    xor_ln120_fu_398_p2 <= (ap_const_lv1_1 xor and_ln105_39_fu_360_p2);
    zext_ln120_7_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_36_fu_415_p3),3));
    zext_ln120_8_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_40_fu_449_p3),4));
    zext_ln120_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln120_fu_398_p2),2));
end behav;
