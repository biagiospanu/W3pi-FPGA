-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_15 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_0_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_1_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_2_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_3_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_4_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_5_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_6_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_8_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_9_val : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_15 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_1080 : STD_LOGIC_VECTOR (17 downto 0) := "000001000010000000";
    constant ap_const_lv18_DAF2 : STD_LOGIC_VECTOR (17 downto 0) := "001101101011110010";
    constant ap_const_lv18_E8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000011101000";
    constant ap_const_lv18_26C : STD_LOGIC_VECTOR (17 downto 0) := "000000001001101100";
    constant ap_const_lv18_6E80 : STD_LOGIC_VECTOR (17 downto 0) := "000110111010000000";
    constant ap_const_lv18_133 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100110011";
    constant ap_const_lv18_14EEC : STD_LOGIC_VECTOR (17 downto 0) := "010100111011101100";
    constant ap_const_lv18_5680 : STD_LOGIC_VECTOR (17 downto 0) := "000101011010000000";
    constant ap_const_lv18_13FB : STD_LOGIC_VECTOR (17 downto 0) := "000001001111111011";
    constant ap_const_lv18_2280 : STD_LOGIC_VECTOR (17 downto 0) := "000010001010000000";
    constant ap_const_lv18_3FFCC : STD_LOGIC_VECTOR (17 downto 0) := "111111111111001100";
    constant ap_const_lv18_A781 : STD_LOGIC_VECTOR (17 downto 0) := "001010011110000001";
    constant ap_const_lv18_1380 : STD_LOGIC_VECTOR (17 downto 0) := "000001001110000000";
    constant ap_const_lv18_5B80 : STD_LOGIC_VECTOR (17 downto 0) := "000101101110000000";
    constant ap_const_lv18_10D8F : STD_LOGIC_VECTOR (17 downto 0) := "010000110110001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_7C7 : STD_LOGIC_VECTOR (10 downto 0) := "11111000111";
    constant ap_const_lv11_6CF : STD_LOGIC_VECTOR (10 downto 0) := "11011001111";
    constant ap_const_lv11_5F9 : STD_LOGIC_VECTOR (10 downto 0) := "10111111001";
    constant ap_const_lv11_7F4 : STD_LOGIC_VECTOR (10 downto 0) := "11111110100";
    constant ap_const_lv11_62F : STD_LOGIC_VECTOR (10 downto 0) := "11000101111";
    constant ap_const_lv11_1BE : STD_LOGIC_VECTOR (10 downto 0) := "00110111110";
    constant ap_const_lv11_70B : STD_LOGIC_VECTOR (10 downto 0) := "11100001011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_284 : STD_LOGIC_VECTOR (10 downto 0) := "01010000100";
    constant ap_const_lv11_D8 : STD_LOGIC_VECTOR (10 downto 0) := "00011011000";
    constant ap_const_lv11_69A : STD_LOGIC_VECTOR (10 downto 0) := "11010011010";
    constant ap_const_lv11_31 : STD_LOGIC_VECTOR (10 downto 0) := "00000110001";
    constant ap_const_lv11_77C : STD_LOGIC_VECTOR (10 downto 0) := "11101111100";
    constant ap_const_lv11_AF : STD_LOGIC_VECTOR (10 downto 0) := "00010101111";
    constant ap_const_lv11_56A : STD_LOGIC_VECTOR (10 downto 0) := "10101101010";
    constant ap_const_lv11_734 : STD_LOGIC_VECTOR (10 downto 0) := "11100110100";

attribute shreg_extract : string;
    signal icmp_ln4_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_reg_667_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_667_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_104_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_104_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_105_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_105_reg_684 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_106_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_106_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_107_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_107_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_107_reg_696_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_108_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_108_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_108_reg_702_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_108_reg_702_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_109_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_109_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_109_reg_708_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_109_reg_708_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_109_reg_708_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_110_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_110_reg_714 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_110_reg_714_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_111_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_111_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_112_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_112_reg_724 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_112_reg_724_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_113_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_113_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_113_reg_729_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_114_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_114_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_114_reg_734_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_114_reg_734_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_115_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_115_reg_739 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_115_reg_739_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_115_reg_739_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_116_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_116_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_116_reg_744_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_116_reg_744_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_117_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_117_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_117_reg_749_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_117_reg_749_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_117_reg_749_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_113_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_113_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_113_reg_766_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_11_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_11_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_11_reg_773_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_11_reg_773_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_114_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_114_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_115_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_115_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_116_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_116_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_88_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_88_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_103_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_103_reg_807 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_92_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_92_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_109_fu_560_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_109_reg_817 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal xor_ln107_47_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_48_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_49_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_119_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_120_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_50_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_122_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_121_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_85_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_123_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_118_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln120_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_404_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_fu_408_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_98_fu_415_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln120_17_fu_422_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_84_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_99_fu_426_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_100_fu_433_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_86_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_101_fu_441_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_102_fu_449_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln120_18_fu_457_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln107_51_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_125_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_117_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_124_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_126_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_90_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_127_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_87_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_104_fu_522_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_89_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_105_fu_529_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_106_fu_536_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_91_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_107_fu_544_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_108_fu_552_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln107_52_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_128_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_129_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_93_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_fu_595_p33 : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_595_p34 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p35 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal x_0_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_1_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_2_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_3_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_4_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_5_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_6_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_8_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_9_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_595_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_595_p31 : STD_LOGIC_VECTOR (3 downto 0);

    component my_prj_sparsemux_33_4_11_1_0_x2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        din9 : IN STD_LOGIC_VECTOR (10 downto 0);
        din10 : IN STD_LOGIC_VECTOR (10 downto 0);
        din11 : IN STD_LOGIC_VECTOR (10 downto 0);
        din12 : IN STD_LOGIC_VECTOR (10 downto 0);
        din13 : IN STD_LOGIC_VECTOR (10 downto 0);
        din14 : IN STD_LOGIC_VECTOR (10 downto 0);
        din15 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_33_4_11_1_0_x2_U101 : component my_prj_sparsemux_33_4_11_1_0_x2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        CASE9 => "1001",
        din9_WIDTH => 11,
        CASE10 => "1010",
        din10_WIDTH => 11,
        CASE11 => "1011",
        din11_WIDTH => 11,
        CASE12 => "1100",
        din12_WIDTH => 11,
        CASE13 => "1101",
        din13_WIDTH => 11,
        CASE14 => "1110",
        din14_WIDTH => 11,
        CASE15 => "1111",
        din15_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_7C7,
        din1 => ap_const_lv11_6CF,
        din2 => ap_const_lv11_5F9,
        din3 => ap_const_lv11_7F4,
        din4 => ap_const_lv11_62F,
        din5 => ap_const_lv11_1BE,
        din6 => ap_const_lv11_70B,
        din7 => ap_const_lv11_4,
        din8 => ap_const_lv11_284,
        din9 => ap_const_lv11_D8,
        din10 => ap_const_lv11_69A,
        din11 => ap_const_lv11_31,
        din12 => ap_const_lv11_77C,
        din13 => ap_const_lv11_AF,
        din14 => ap_const_lv11_56A,
        din15 => ap_const_lv11_734,
        def => agg_result_fu_595_p33,
        sel => agg_result_fu_595_p34,
        dout => agg_result_fu_595_p35);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_113_reg_766 <= and_ln105_113_fu_303_p2;
                and_ln105_113_reg_766_pp0_iter2_reg <= and_ln105_113_reg_766;
                and_ln105_114_reg_779 <= and_ln105_114_fu_319_p2;
                and_ln105_115_reg_785 <= and_ln105_115_fu_329_p2;
                and_ln105_116_reg_796 <= and_ln105_116_fu_356_p2;
                and_ln105_reg_754 <= and_ln105_fu_289_p2;
                and_ln107_11_reg_773 <= and_ln107_11_fu_313_p2;
                and_ln107_11_reg_773_pp0_iter2_reg <= and_ln107_11_reg_773;
                and_ln107_11_reg_773_pp0_iter3_reg <= and_ln107_11_reg_773_pp0_iter2_reg;
                and_ln107_reg_761 <= and_ln107_fu_298_p2;
                icmp_ln4_104_reg_678 <= icmp_ln4_104_fu_200_p2;
                icmp_ln4_105_reg_684 <= icmp_ln4_105_fu_206_p2;
                icmp_ln4_106_reg_690 <= icmp_ln4_106_fu_212_p2;
                icmp_ln4_107_reg_696 <= icmp_ln4_107_fu_218_p2;
                icmp_ln4_107_reg_696_pp0_iter1_reg <= icmp_ln4_107_reg_696;
                icmp_ln4_108_reg_702 <= icmp_ln4_108_fu_224_p2;
                icmp_ln4_108_reg_702_pp0_iter1_reg <= icmp_ln4_108_reg_702;
                icmp_ln4_108_reg_702_pp0_iter2_reg <= icmp_ln4_108_reg_702_pp0_iter1_reg;
                icmp_ln4_109_reg_708 <= icmp_ln4_109_fu_230_p2;
                icmp_ln4_109_reg_708_pp0_iter1_reg <= icmp_ln4_109_reg_708;
                icmp_ln4_109_reg_708_pp0_iter2_reg <= icmp_ln4_109_reg_708_pp0_iter1_reg;
                icmp_ln4_109_reg_708_pp0_iter3_reg <= icmp_ln4_109_reg_708_pp0_iter2_reg;
                icmp_ln4_110_reg_714 <= icmp_ln4_110_fu_236_p2;
                icmp_ln4_110_reg_714_pp0_iter1_reg <= icmp_ln4_110_reg_714;
                icmp_ln4_111_reg_719 <= icmp_ln4_111_fu_242_p2;
                icmp_ln4_112_reg_724 <= icmp_ln4_112_fu_248_p2;
                icmp_ln4_112_reg_724_pp0_iter1_reg <= icmp_ln4_112_reg_724;
                icmp_ln4_113_reg_729 <= icmp_ln4_113_fu_254_p2;
                icmp_ln4_113_reg_729_pp0_iter1_reg <= icmp_ln4_113_reg_729;
                icmp_ln4_114_reg_734 <= icmp_ln4_114_fu_260_p2;
                icmp_ln4_114_reg_734_pp0_iter1_reg <= icmp_ln4_114_reg_734;
                icmp_ln4_114_reg_734_pp0_iter2_reg <= icmp_ln4_114_reg_734_pp0_iter1_reg;
                icmp_ln4_115_reg_739 <= icmp_ln4_115_fu_266_p2;
                icmp_ln4_115_reg_739_pp0_iter1_reg <= icmp_ln4_115_reg_739;
                icmp_ln4_115_reg_739_pp0_iter2_reg <= icmp_ln4_115_reg_739_pp0_iter1_reg;
                icmp_ln4_116_reg_744 <= icmp_ln4_116_fu_272_p2;
                icmp_ln4_116_reg_744_pp0_iter1_reg <= icmp_ln4_116_reg_744;
                icmp_ln4_116_reg_744_pp0_iter2_reg <= icmp_ln4_116_reg_744_pp0_iter1_reg;
                icmp_ln4_117_reg_749 <= icmp_ln4_117_fu_278_p2;
                icmp_ln4_117_reg_749_pp0_iter1_reg <= icmp_ln4_117_reg_749;
                icmp_ln4_117_reg_749_pp0_iter2_reg <= icmp_ln4_117_reg_749_pp0_iter1_reg;
                icmp_ln4_117_reg_749_pp0_iter3_reg <= icmp_ln4_117_reg_749_pp0_iter2_reg;
                icmp_ln4_reg_667 <= icmp_ln4_fu_194_p2;
                icmp_ln4_reg_667_pp0_iter1_reg <= icmp_ln4_reg_667;
                icmp_ln4_reg_667_pp0_iter2_reg <= icmp_ln4_reg_667_pp0_iter1_reg;
                or_ln120_88_reg_801 <= or_ln120_88_fu_393_p2;
                or_ln120_92_reg_812 <= or_ln120_92_fu_516_p2;
                or_ln120_reg_791 <= or_ln120_fu_345_p2;
                select_ln120_103_reg_807 <= select_ln120_103_fu_461_p3;
                select_ln120_109_reg_817 <= select_ln120_109_fu_560_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= agg_result_fu_595_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                x_0_val_int_reg <= x_0_val;
                x_1_val_int_reg <= x_1_val;
                x_2_val_int_reg <= x_2_val;
                x_3_val_int_reg <= x_3_val;
                x_4_val_int_reg <= x_4_val;
                x_5_val_int_reg <= x_5_val;
                x_6_val_int_reg <= x_6_val;
                x_8_val_int_reg <= x_8_val;
                x_9_val_int_reg <= x_9_val;
            end if;
        end if;
    end process;
    agg_result_fu_595_p33 <= "XXXXXXXXXXX";
    agg_result_fu_595_p34 <= 
        select_ln120_109_reg_817 when (or_ln120_93_fu_583_p2(0) = '1') else 
        ap_const_lv4_F;
    and_ln105_113_fu_303_p2 <= (xor_ln107_fu_284_p2 and icmp_ln4_105_reg_684);
    and_ln105_114_fu_319_p2 <= (icmp_ln4_106_reg_690 and and_ln105_fu_289_p2);
    and_ln105_115_fu_329_p2 <= (icmp_ln4_107_reg_696 and and_ln107_fu_298_p2);
    and_ln105_116_fu_356_p2 <= (icmp_ln4_108_reg_702_pp0_iter1_reg and and_ln105_113_reg_766);
    and_ln105_117_fu_473_p2 <= (icmp_ln4_109_reg_708_pp0_iter2_reg and and_ln107_11_reg_773_pp0_iter2_reg);
    and_ln105_118_fu_360_p2 <= (icmp_ln4_110_reg_714_pp0_iter1_reg and and_ln105_114_reg_779);
    and_ln105_119_fu_334_p2 <= (xor_ln107_49_fu_324_p2 and icmp_ln4_111_reg_719);
    and_ln105_120_fu_339_p2 <= (and_ln105_fu_289_p2 and and_ln105_119_fu_334_p2);
    and_ln105_121_fu_364_p2 <= (icmp_ln4_112_reg_724_pp0_iter1_reg and and_ln105_115_reg_785);
    and_ln105_122_fu_368_p2 <= (xor_ln107_50_fu_351_p2 and icmp_ln4_113_reg_729_pp0_iter1_reg);
    and_ln105_123_fu_373_p2 <= (and_ln107_reg_761 and and_ln105_122_fu_368_p2);
    and_ln105_124_fu_477_p2 <= (icmp_ln4_114_reg_734_pp0_iter2_reg and and_ln105_116_reg_796);
    and_ln105_125_fu_481_p2 <= (xor_ln107_51_fu_468_p2 and icmp_ln4_115_reg_739_pp0_iter2_reg);
    and_ln105_126_fu_486_p2 <= (and_ln105_125_fu_481_p2 and and_ln105_113_reg_766_pp0_iter2_reg);
    and_ln105_127_fu_491_p2 <= (icmp_ln4_116_reg_744_pp0_iter2_reg and and_ln105_117_fu_473_p2);
    and_ln105_128_fu_573_p2 <= (xor_ln107_52_fu_568_p2 and icmp_ln4_117_reg_749_pp0_iter3_reg);
    and_ln105_129_fu_578_p2 <= (and_ln107_11_reg_773_pp0_iter3_reg and and_ln105_128_fu_573_p2);
    and_ln105_fu_289_p2 <= (icmp_ln4_reg_667 and icmp_ln4_104_reg_678);
    and_ln107_11_fu_313_p2 <= (xor_ln107_fu_284_p2 and xor_ln107_48_fu_308_p2);
    and_ln107_fu_298_p2 <= (xor_ln107_47_fu_293_p2 and icmp_ln4_reg_667);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(agg_result_fu_595_p35, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= agg_result_fu_595_p35;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_104_fu_200_p2 <= "1" when (signed(x_2_val_int_reg) < signed(ap_const_lv18_DAF2)) else "0";
    icmp_ln4_105_fu_206_p2 <= "1" when (signed(x_4_val_int_reg) < signed(ap_const_lv18_E8)) else "0";
    icmp_ln4_106_fu_212_p2 <= "1" when (signed(x_8_val_int_reg) < signed(ap_const_lv18_26C)) else "0";
    icmp_ln4_107_fu_218_p2 <= "1" when (signed(x_6_val_int_reg) < signed(ap_const_lv18_6E80)) else "0";
    icmp_ln4_108_fu_224_p2 <= "1" when (signed(x_8_val_int_reg) < signed(ap_const_lv18_133)) else "0";
    icmp_ln4_109_fu_230_p2 <= "1" when (signed(x_3_val_int_reg) < signed(ap_const_lv18_14EEC)) else "0";
    icmp_ln4_110_fu_236_p2 <= "1" when (signed(x_6_val_int_reg) < signed(ap_const_lv18_5680)) else "0";
    icmp_ln4_111_fu_242_p2 <= "1" when (signed(x_5_val_int_reg) < signed(ap_const_lv18_13FB)) else "0";
    icmp_ln4_112_fu_248_p2 <= "1" when (signed(x_1_val_int_reg) < signed(ap_const_lv18_2280)) else "0";
    icmp_ln4_113_fu_254_p2 <= "1" when (signed(x_9_val_int_reg) < signed(ap_const_lv18_3FFCC)) else "0";
    icmp_ln4_114_fu_260_p2 <= "1" when (signed(x_3_val_int_reg) < signed(ap_const_lv18_A781)) else "0";
    icmp_ln4_115_fu_266_p2 <= "1" when (signed(x_0_val_int_reg) < signed(ap_const_lv18_1380)) else "0";
    icmp_ln4_116_fu_272_p2 <= "1" when (signed(x_1_val_int_reg) < signed(ap_const_lv18_5B80)) else "0";
    icmp_ln4_117_fu_278_p2 <= "1" when (signed(x_2_val_int_reg) < signed(ap_const_lv18_10D8F)) else "0";
    icmp_ln4_fu_194_p2 <= "1" when (signed(x_0_val_int_reg) < signed(ap_const_lv18_1080)) else "0";
    or_ln120_84_fu_378_p2 <= (and_ln105_reg_754 or and_ln105_121_fu_364_p2);
    or_ln120_85_fu_383_p2 <= (and_ln105_reg_754 or and_ln105_115_reg_785);
    or_ln120_86_fu_387_p2 <= (or_ln120_85_fu_383_p2 or and_ln105_123_fu_373_p2);
    or_ln120_87_fu_496_p2 <= (icmp_ln4_reg_667_pp0_iter2_reg or and_ln105_124_fu_477_p2);
    or_ln120_88_fu_393_p2 <= (icmp_ln4_reg_667_pp0_iter1_reg or and_ln105_116_fu_356_p2);
    or_ln120_89_fu_501_p2 <= (or_ln120_88_reg_801 or and_ln105_126_fu_486_p2);
    or_ln120_90_fu_506_p2 <= (icmp_ln4_reg_667_pp0_iter2_reg or and_ln105_113_reg_766_pp0_iter2_reg);
    or_ln120_91_fu_510_p2 <= (or_ln120_90_fu_506_p2 or and_ln105_127_fu_491_p2);
    or_ln120_92_fu_516_p2 <= (or_ln120_90_fu_506_p2 or and_ln105_117_fu_473_p2);
    or_ln120_93_fu_583_p2 <= (or_ln120_92_reg_812 or and_ln105_129_fu_578_p2);
    or_ln120_fu_345_p2 <= (and_ln105_120_fu_339_p2 or and_ln105_114_fu_319_p2);
    select_ln120_100_fu_433_p3 <= 
        select_ln120_99_fu_426_p3 when (or_ln120_84_fu_378_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_101_fu_441_p3 <= 
        select_ln120_100_fu_433_p3 when (or_ln120_85_fu_383_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_102_fu_449_p3 <= 
        select_ln120_101_fu_441_p3 when (or_ln120_86_fu_387_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_103_fu_461_p3 <= 
        zext_ln120_18_fu_457_p1 when (icmp_ln4_reg_667_pp0_iter1_reg(0) = '1') else 
        ap_const_lv4_8;
    select_ln120_104_fu_522_p3 <= 
        select_ln120_103_reg_807 when (or_ln120_87_fu_496_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln120_105_fu_529_p3 <= 
        select_ln120_104_fu_522_p3 when (or_ln120_88_reg_801(0) = '1') else 
        ap_const_lv4_A;
    select_ln120_106_fu_536_p3 <= 
        select_ln120_105_fu_529_p3 when (or_ln120_89_fu_501_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln120_107_fu_544_p3 <= 
        select_ln120_106_fu_536_p3 when (or_ln120_90_fu_506_p2(0) = '1') else 
        ap_const_lv4_C;
    select_ln120_108_fu_552_p3 <= 
        select_ln120_107_fu_544_p3 when (or_ln120_91_fu_510_p2(0) = '1') else 
        ap_const_lv4_D;
    select_ln120_109_fu_560_p3 <= 
        select_ln120_108_fu_552_p3 when (or_ln120_92_fu_516_p2(0) = '1') else 
        ap_const_lv4_E;
    select_ln120_98_fu_415_p3 <= 
        select_ln120_fu_408_p3 when (or_ln120_reg_791(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_99_fu_426_p3 <= 
        zext_ln120_17_fu_422_p1 when (and_ln105_reg_754(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_fu_408_p3 <= 
        zext_ln120_fu_404_p1 when (and_ln105_114_reg_779(0) = '1') else 
        ap_const_lv2_2;
    xor_ln107_47_fu_293_p2 <= (icmp_ln4_104_reg_678 xor ap_const_lv1_1);
    xor_ln107_48_fu_308_p2 <= (icmp_ln4_105_reg_684 xor ap_const_lv1_1);
    xor_ln107_49_fu_324_p2 <= (icmp_ln4_106_reg_690 xor ap_const_lv1_1);
    xor_ln107_50_fu_351_p2 <= (icmp_ln4_107_reg_696_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_51_fu_468_p2 <= (icmp_ln4_108_reg_702_pp0_iter2_reg xor ap_const_lv1_1);
    xor_ln107_52_fu_568_p2 <= (icmp_ln4_109_reg_708_pp0_iter3_reg xor ap_const_lv1_1);
    xor_ln107_fu_284_p2 <= (icmp_ln4_reg_667 xor ap_const_lv1_1);
    xor_ln120_fu_398_p2 <= (ap_const_lv1_1 xor and_ln105_118_fu_360_p2);
    zext_ln120_17_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_98_fu_415_p3),3));
    zext_ln120_18_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_102_fu_449_p3),4));
    zext_ln120_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln120_fu_398_p2),2));
end behav;
