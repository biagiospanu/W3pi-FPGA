// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_9 (
        ap_clk,
        ap_rst,
        x_0_val,
        x_1_val,
        x_3_val,
        x_4_val,
        x_6_val,
        x_7_val,
        x_9_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] x_0_val;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_9_val;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_154_p2;
reg   [0:0] icmp_ln4_reg_521;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln4_reg_521_pp0_iter1_reg;
wire   [0:0] icmp_ln4_1_fu_160_p2;
reg   [0:0] icmp_ln4_1_reg_531;
wire   [0:0] icmp_ln4_2_fu_166_p2;
reg   [0:0] icmp_ln4_2_reg_537;
wire   [0:0] icmp_ln4_3_fu_172_p2;
reg   [0:0] icmp_ln4_3_reg_543;
wire   [0:0] icmp_ln4_4_fu_178_p2;
reg   [0:0] icmp_ln4_4_reg_549;
reg   [0:0] icmp_ln4_4_reg_549_pp0_iter1_reg;
wire   [0:0] icmp_ln4_5_fu_184_p2;
reg   [0:0] icmp_ln4_5_reg_555;
reg   [0:0] icmp_ln4_5_reg_555_pp0_iter1_reg;
reg   [0:0] icmp_ln4_5_reg_555_pp0_iter2_reg;
wire   [0:0] icmp_ln4_6_fu_190_p2;
reg   [0:0] icmp_ln4_6_reg_561;
wire   [0:0] icmp_ln4_7_fu_196_p2;
reg   [0:0] icmp_ln4_7_reg_566;
reg   [0:0] icmp_ln4_7_reg_566_pp0_iter1_reg;
wire   [0:0] icmp_ln4_8_fu_202_p2;
reg   [0:0] icmp_ln4_8_reg_571;
reg   [0:0] icmp_ln4_8_reg_571_pp0_iter1_reg;
wire   [0:0] icmp_ln4_9_fu_208_p2;
reg   [0:0] icmp_ln4_9_reg_576;
reg   [0:0] icmp_ln4_9_reg_576_pp0_iter1_reg;
wire   [0:0] icmp_ln4_10_fu_214_p2;
reg   [0:0] icmp_ln4_10_reg_581;
reg   [0:0] icmp_ln4_10_reg_581_pp0_iter1_reg;
reg   [0:0] icmp_ln4_10_reg_581_pp0_iter2_reg;
wire   [0:0] xor_ln107_fu_220_p2;
reg   [0:0] xor_ln107_reg_586;
wire   [0:0] and_ln105_1_fu_240_p2;
reg   [0:0] and_ln105_1_reg_592;
wire   [0:0] and_ln107_1_fu_249_p2;
reg   [0:0] and_ln107_1_reg_598;
reg   [0:0] and_ln107_1_reg_598_pp0_iter2_reg;
wire   [0:0] and_ln105_3_fu_264_p2;
reg   [0:0] and_ln105_3_reg_604;
wire   [0:0] or_ln120_3_fu_292_p2;
reg   [0:0] or_ln120_3_reg_609;
wire   [1:0] select_ln120_1_fu_315_p3;
reg   [1:0] select_ln120_1_reg_615;
wire   [0:0] or_ln120_7_fu_371_p2;
reg   [0:0] or_ln120_7_reg_620;
wire   [3:0] select_ln120_8_fu_430_p3;
reg   [3:0] select_ln120_8_reg_625;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_1_fu_230_p2;
wire   [0:0] xor_ln107_2_fu_244_p2;
wire   [0:0] and_ln107_fu_235_p2;
wire   [0:0] xor_ln107_3_fu_259_p2;
wire   [0:0] and_ln105_5_fu_269_p2;
wire   [0:0] and_ln105_fu_226_p2;
wire   [0:0] and_ln105_2_fu_254_p2;
wire   [0:0] or_ln120_fu_280_p2;
wire   [0:0] and_ln105_6_fu_274_p2;
wire   [0:0] xor_ln120_fu_297_p2;
wire   [1:0] zext_ln120_fu_303_p1;
wire   [0:0] or_ln120_1_fu_286_p2;
wire   [1:0] select_ln120_fu_307_p3;
wire   [0:0] xor_ln107_4_fu_323_p2;
wire   [0:0] and_ln105_8_fu_336_p2;
wire   [0:0] and_ln105_4_fu_328_p2;
wire   [0:0] and_ln105_7_fu_332_p2;
wire   [0:0] and_ln105_9_fu_341_p2;
wire   [0:0] or_ln120_5_fu_361_p2;
wire   [0:0] and_ln105_10_fu_346_p2;
wire   [2:0] zext_ln120_1_fu_377_p1;
wire   [0:0] or_ln120_2_fu_351_p2;
wire   [2:0] select_ln120_2_fu_380_p3;
wire   [2:0] select_ln120_3_fu_387_p3;
wire   [0:0] or_ln120_4_fu_356_p2;
wire   [2:0] select_ln120_4_fu_395_p3;
wire   [2:0] select_ln120_5_fu_402_p3;
wire   [3:0] zext_ln120_2_fu_410_p1;
wire   [0:0] or_ln120_6_fu_365_p2;
wire   [3:0] select_ln120_6_fu_414_p3;
wire   [3:0] select_ln120_7_fu_422_p3;
wire   [0:0] xor_ln107_5_fu_438_p2;
wire   [0:0] and_ln105_11_fu_443_p2;
wire   [0:0] and_ln105_12_fu_448_p2;
wire   [0:0] or_ln120_8_fu_453_p2;
wire   [10:0] agg_result_fu_465_p25;
wire   [3:0] agg_result_fu_465_p26;
wire   [10:0] agg_result_fu_465_p27;
reg    ap_ce_reg;
reg   [17:0] x_0_val_int_reg;
reg   [17:0] x_1_val_int_reg;
reg   [17:0] x_3_val_int_reg;
reg   [17:0] x_4_val_int_reg;
reg   [17:0] x_6_val_int_reg;
reg   [17:0] x_7_val_int_reg;
reg   [17:0] x_9_val_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] agg_result_fu_465_p1;
wire   [3:0] agg_result_fu_465_p3;
wire   [3:0] agg_result_fu_465_p5;
wire   [3:0] agg_result_fu_465_p7;
wire   [3:0] agg_result_fu_465_p9;
wire   [3:0] agg_result_fu_465_p11;
wire   [3:0] agg_result_fu_465_p13;
wire   [3:0] agg_result_fu_465_p15;
wire  signed [3:0] agg_result_fu_465_p17;
wire  signed [3:0] agg_result_fu_465_p19;
wire  signed [3:0] agg_result_fu_465_p21;
wire  signed [3:0] agg_result_fu_465_p23;

my_prj_sparsemux_25_4_11_1_0_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_25_4_11_1_0_x_U157(
    .din0(11'd1450),
    .din1(11'd597),
    .din2(11'd75),
    .din3(11'd1426),
    .din4(11'd1793),
    .din5(11'd358),
    .din6(11'd1594),
    .din7(11'd2021),
    .din8(11'd1977),
    .din9(11'd1116),
    .din10(11'd259),
    .din11(11'd1639),
    .def(agg_result_fu_465_p25),
    .sel(agg_result_fu_465_p26),
    .dout(agg_result_fu_465_p27)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_1_reg_592 <= and_ln105_1_fu_240_p2;
        and_ln105_3_reg_604 <= and_ln105_3_fu_264_p2;
        and_ln107_1_reg_598 <= and_ln107_1_fu_249_p2;
        and_ln107_1_reg_598_pp0_iter2_reg <= and_ln107_1_reg_598;
        icmp_ln4_10_reg_581 <= icmp_ln4_10_fu_214_p2;
        icmp_ln4_10_reg_581_pp0_iter1_reg <= icmp_ln4_10_reg_581;
        icmp_ln4_10_reg_581_pp0_iter2_reg <= icmp_ln4_10_reg_581_pp0_iter1_reg;
        icmp_ln4_1_reg_531 <= icmp_ln4_1_fu_160_p2;
        icmp_ln4_2_reg_537 <= icmp_ln4_2_fu_166_p2;
        icmp_ln4_3_reg_543 <= icmp_ln4_3_fu_172_p2;
        icmp_ln4_4_reg_549 <= icmp_ln4_4_fu_178_p2;
        icmp_ln4_4_reg_549_pp0_iter1_reg <= icmp_ln4_4_reg_549;
        icmp_ln4_5_reg_555 <= icmp_ln4_5_fu_184_p2;
        icmp_ln4_5_reg_555_pp0_iter1_reg <= icmp_ln4_5_reg_555;
        icmp_ln4_5_reg_555_pp0_iter2_reg <= icmp_ln4_5_reg_555_pp0_iter1_reg;
        icmp_ln4_6_reg_561 <= icmp_ln4_6_fu_190_p2;
        icmp_ln4_7_reg_566 <= icmp_ln4_7_fu_196_p2;
        icmp_ln4_7_reg_566_pp0_iter1_reg <= icmp_ln4_7_reg_566;
        icmp_ln4_8_reg_571 <= icmp_ln4_8_fu_202_p2;
        icmp_ln4_8_reg_571_pp0_iter1_reg <= icmp_ln4_8_reg_571;
        icmp_ln4_9_reg_576 <= icmp_ln4_9_fu_208_p2;
        icmp_ln4_9_reg_576_pp0_iter1_reg <= icmp_ln4_9_reg_576;
        icmp_ln4_reg_521 <= icmp_ln4_fu_154_p2;
        icmp_ln4_reg_521_pp0_iter1_reg <= icmp_ln4_reg_521;
        or_ln120_3_reg_609 <= or_ln120_3_fu_292_p2;
        or_ln120_7_reg_620 <= or_ln120_7_fu_371_p2;
        select_ln120_1_reg_615 <= select_ln120_1_fu_315_p3;
        select_ln120_8_reg_625 <= select_ln120_8_fu_430_p3;
        xor_ln107_reg_586 <= xor_ln107_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_465_p27;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        x_0_val_int_reg <= x_0_val;
        x_1_val_int_reg <= x_1_val;
        x_3_val_int_reg <= x_3_val;
        x_4_val_int_reg <= x_4_val;
        x_6_val_int_reg <= x_6_val;
        x_7_val_int_reg <= x_7_val;
        x_9_val_int_reg <= x_9_val;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_465_p27;
    end else begin
        ap_return = 'bx;
    end
end

assign agg_result_fu_465_p25 = 'bx;

assign agg_result_fu_465_p26 = ((or_ln120_8_fu_453_p2[0:0] == 1'b1) ? select_ln120_8_reg_625 : 4'd11);

assign and_ln105_10_fu_346_p2 = (icmp_ln4_9_reg_576_pp0_iter1_reg & and_ln105_4_fu_328_p2);

assign and_ln105_11_fu_443_p2 = (xor_ln107_5_fu_438_p2 & icmp_ln4_10_reg_581_pp0_iter2_reg);

assign and_ln105_12_fu_448_p2 = (and_ln107_1_reg_598_pp0_iter2_reg & and_ln105_11_fu_443_p2);

assign and_ln105_1_fu_240_p2 = (xor_ln107_reg_586 & icmp_ln4_2_reg_537);

assign and_ln105_2_fu_254_p2 = (icmp_ln4_3_reg_543 & and_ln107_fu_235_p2);

assign and_ln105_3_fu_264_p2 = (icmp_ln4_4_reg_549 & and_ln105_1_fu_240_p2);

assign and_ln105_4_fu_328_p2 = (icmp_ln4_5_reg_555_pp0_iter1_reg & and_ln107_1_reg_598);

assign and_ln105_5_fu_269_p2 = (xor_ln107_3_fu_259_p2 & icmp_ln4_6_reg_561);

assign and_ln105_6_fu_274_p2 = (and_ln107_fu_235_p2 & and_ln105_5_fu_269_p2);

assign and_ln105_7_fu_332_p2 = (icmp_ln4_7_reg_566_pp0_iter1_reg & and_ln105_3_reg_604);

assign and_ln105_8_fu_336_p2 = (xor_ln107_4_fu_323_p2 & icmp_ln4_8_reg_571_pp0_iter1_reg);

assign and_ln105_9_fu_341_p2 = (and_ln105_8_fu_336_p2 & and_ln105_1_reg_592);

assign and_ln105_fu_226_p2 = (icmp_ln4_reg_521 & icmp_ln4_1_reg_531);

assign and_ln107_1_fu_249_p2 = (xor_ln107_reg_586 & xor_ln107_2_fu_244_p2);

assign and_ln107_fu_235_p2 = (xor_ln107_1_fu_230_p2 & icmp_ln4_reg_521);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_10_fu_214_p2 = (($signed(x_4_val_int_reg) < $signed(18'd3889)) ? 1'b1 : 1'b0);

assign icmp_ln4_1_fu_160_p2 = (($signed(x_1_val_int_reg) < $signed(18'd18816)) ? 1'b1 : 1'b0);

assign icmp_ln4_2_fu_166_p2 = (($signed(x_0_val_int_reg) < $signed(18'd8832)) ? 1'b1 : 1'b0);

assign icmp_ln4_3_fu_172_p2 = (($signed(x_1_val_int_reg) < $signed(18'd22656)) ? 1'b1 : 1'b0);

assign icmp_ln4_4_fu_178_p2 = (($signed(x_3_val_int_reg) < $signed(18'd32526)) ? 1'b1 : 1'b0);

assign icmp_ln4_5_fu_184_p2 = (($signed(x_1_val_int_reg) < $signed(18'd16256)) ? 1'b1 : 1'b0);

assign icmp_ln4_6_fu_190_p2 = (($signed(x_9_val_int_reg) < $signed(18'd261786)) ? 1'b1 : 1'b0);

assign icmp_ln4_7_fu_196_p2 = (($signed(x_6_val_int_reg) < $signed(18'd6784)) ? 1'b1 : 1'b0);

assign icmp_ln4_8_fu_202_p2 = (($signed(x_6_val_int_reg) < $signed(18'd11136)) ? 1'b1 : 1'b0);

assign icmp_ln4_9_fu_208_p2 = (($signed(x_0_val_int_reg) < $signed(18'd12928)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_154_p2 = (($signed(x_7_val_int_reg) < $signed(18'd260608)) ? 1'b1 : 1'b0);

assign or_ln120_1_fu_286_p2 = (or_ln120_fu_280_p2 | and_ln105_6_fu_274_p2);

assign or_ln120_2_fu_351_p2 = (icmp_ln4_reg_521_pp0_iter1_reg | and_ln105_7_fu_332_p2);

assign or_ln120_3_fu_292_p2 = (icmp_ln4_reg_521 | and_ln105_3_fu_264_p2);

assign or_ln120_4_fu_356_p2 = (or_ln120_3_reg_609 | and_ln105_9_fu_341_p2);

assign or_ln120_5_fu_361_p2 = (icmp_ln4_reg_521_pp0_iter1_reg | and_ln105_1_reg_592);

assign or_ln120_6_fu_365_p2 = (or_ln120_5_fu_361_p2 | and_ln105_10_fu_346_p2);

assign or_ln120_7_fu_371_p2 = (or_ln120_5_fu_361_p2 | and_ln105_4_fu_328_p2);

assign or_ln120_8_fu_453_p2 = (or_ln120_7_reg_620 | and_ln105_12_fu_448_p2);

assign or_ln120_fu_280_p2 = (and_ln105_fu_226_p2 | and_ln105_2_fu_254_p2);

assign select_ln120_1_fu_315_p3 = ((or_ln120_1_fu_286_p2[0:0] == 1'b1) ? select_ln120_fu_307_p3 : 2'd3);

assign select_ln120_2_fu_380_p3 = ((icmp_ln4_reg_521_pp0_iter1_reg[0:0] == 1'b1) ? zext_ln120_1_fu_377_p1 : 3'd4);

assign select_ln120_3_fu_387_p3 = ((or_ln120_2_fu_351_p2[0:0] == 1'b1) ? select_ln120_2_fu_380_p3 : 3'd5);

assign select_ln120_4_fu_395_p3 = ((or_ln120_3_reg_609[0:0] == 1'b1) ? select_ln120_3_fu_387_p3 : 3'd6);

assign select_ln120_5_fu_402_p3 = ((or_ln120_4_fu_356_p2[0:0] == 1'b1) ? select_ln120_4_fu_395_p3 : 3'd7);

assign select_ln120_6_fu_414_p3 = ((or_ln120_5_fu_361_p2[0:0] == 1'b1) ? zext_ln120_2_fu_410_p1 : 4'd8);

assign select_ln120_7_fu_422_p3 = ((or_ln120_6_fu_365_p2[0:0] == 1'b1) ? select_ln120_6_fu_414_p3 : 4'd9);

assign select_ln120_8_fu_430_p3 = ((or_ln120_7_fu_371_p2[0:0] == 1'b1) ? select_ln120_7_fu_422_p3 : 4'd10);

assign select_ln120_fu_307_p3 = ((or_ln120_fu_280_p2[0:0] == 1'b1) ? zext_ln120_fu_303_p1 : 2'd2);

assign xor_ln107_1_fu_230_p2 = (icmp_ln4_1_reg_531 ^ 1'd1);

assign xor_ln107_2_fu_244_p2 = (icmp_ln4_2_reg_537 ^ 1'd1);

assign xor_ln107_3_fu_259_p2 = (icmp_ln4_3_reg_543 ^ 1'd1);

assign xor_ln107_4_fu_323_p2 = (icmp_ln4_4_reg_549_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_5_fu_438_p2 = (icmp_ln4_5_reg_555_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_fu_220_p2 = (icmp_ln4_fu_154_p2 ^ 1'd1);

assign xor_ln120_fu_297_p2 = (1'd1 ^ and_ln105_fu_226_p2);

assign zext_ln120_1_fu_377_p1 = select_ln120_1_reg_615;

assign zext_ln120_2_fu_410_p1 = select_ln120_5_fu_402_p3;

assign zext_ln120_fu_303_p1 = xor_ln120_fu_297_p2;

endmodule //my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_9
