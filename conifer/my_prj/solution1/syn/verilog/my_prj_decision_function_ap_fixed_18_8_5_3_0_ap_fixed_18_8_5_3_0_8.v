// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_8 (
        ap_clk,
        ap_rst,
        x_0_val,
        x_2_val,
        x_3_val,
        x_4_val,
        x_6_val,
        x_9_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] x_0_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_9_val;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_128_p2;
reg   [0:0] icmp_ln4_reg_389;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln4_reg_389_pp0_iter1_reg;
wire   [0:0] icmp_ln4_11_fu_134_p2;
reg   [0:0] icmp_ln4_11_reg_396;
wire   [0:0] icmp_ln4_12_fu_140_p2;
reg   [0:0] icmp_ln4_12_reg_402;
reg   [0:0] icmp_ln4_12_reg_402_pp0_iter1_reg;
wire   [0:0] icmp_ln4_13_fu_146_p2;
reg   [0:0] icmp_ln4_13_reg_408;
reg   [0:0] icmp_ln4_13_reg_408_pp0_iter1_reg;
reg   [0:0] icmp_ln4_13_reg_408_pp0_iter2_reg;
wire   [0:0] icmp_ln4_14_fu_152_p2;
reg   [0:0] icmp_ln4_14_reg_414;
reg   [0:0] icmp_ln4_14_reg_414_pp0_iter1_reg;
wire   [0:0] icmp_ln4_15_fu_158_p2;
reg   [0:0] icmp_ln4_15_reg_419;
reg   [0:0] icmp_ln4_15_reg_419_pp0_iter1_reg;
wire   [0:0] icmp_ln4_16_fu_164_p2;
reg   [0:0] icmp_ln4_16_reg_424;
reg   [0:0] icmp_ln4_16_reg_424_pp0_iter1_reg;
wire   [0:0] icmp_ln4_17_fu_170_p2;
reg   [0:0] icmp_ln4_17_reg_429;
reg   [0:0] icmp_ln4_17_reg_429_pp0_iter1_reg;
reg   [0:0] icmp_ln4_17_reg_429_pp0_iter2_reg;
wire   [0:0] xor_ln107_fu_176_p2;
reg   [0:0] xor_ln107_reg_434;
reg   [0:0] xor_ln107_reg_434_pp0_iter1_reg;
wire   [0:0] and_ln105_fu_182_p2;
reg   [0:0] and_ln105_reg_441;
wire   [0:0] and_ln107_fu_191_p2;
reg   [0:0] and_ln107_reg_447;
reg   [0:0] and_ln107_reg_447_pp0_iter2_reg;
wire   [0:0] and_ln105_13_fu_196_p2;
reg   [0:0] and_ln105_13_reg_453;
wire   [0:0] or_ln120_9_fu_201_p2;
reg   [0:0] or_ln120_9_reg_458;
wire   [0:0] or_ln120_13_fu_254_p2;
reg   [0:0] or_ln120_13_reg_464;
wire   [2:0] select_ln120_14_fu_306_p3;
reg   [2:0] select_ln120_14_reg_469;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_6_fu_186_p2;
wire   [0:0] xor_ln107_7_fu_206_p2;
wire   [0:0] and_ln105_16_fu_219_p2;
wire   [0:0] and_ln105_14_fu_211_p2;
wire   [0:0] and_ln105_15_fu_215_p2;
wire   [0:0] and_ln105_17_fu_224_p2;
wire   [0:0] or_ln120_11_fu_244_p2;
wire   [0:0] and_ln105_18_fu_229_p2;
wire   [0:0] or_ln120_fu_234_p2;
wire   [1:0] zext_ln120_fu_260_p1;
wire   [1:0] select_ln120_fu_263_p3;
wire   [1:0] select_ln120_10_fu_271_p3;
wire   [0:0] or_ln120_10_fu_239_p2;
wire   [2:0] zext_ln120_3_fu_278_p1;
wire   [2:0] select_ln120_11_fu_282_p3;
wire   [0:0] or_ln120_12_fu_248_p2;
wire   [2:0] select_ln120_12_fu_290_p3;
wire   [2:0] select_ln120_13_fu_298_p3;
wire   [0:0] xor_ln107_8_fu_314_p2;
wire   [0:0] and_ln105_19_fu_319_p2;
wire   [0:0] and_ln105_20_fu_324_p2;
wire   [0:0] or_ln120_14_fu_329_p2;
wire   [3:0] zext_ln120_4_fu_334_p1;
wire   [10:0] agg_result_fu_345_p19;
wire   [3:0] agg_result_fu_345_p20;
wire   [10:0] agg_result_fu_345_p21;
reg    ap_ce_reg;
reg   [17:0] x_0_val_int_reg;
reg   [17:0] x_2_val_int_reg;
reg   [17:0] x_3_val_int_reg;
reg   [17:0] x_4_val_int_reg;
reg   [17:0] x_6_val_int_reg;
reg   [17:0] x_9_val_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] agg_result_fu_345_p1;
wire   [3:0] agg_result_fu_345_p3;
wire   [3:0] agg_result_fu_345_p5;
wire   [3:0] agg_result_fu_345_p7;
wire   [3:0] agg_result_fu_345_p9;
wire   [3:0] agg_result_fu_345_p11;
wire   [3:0] agg_result_fu_345_p13;
wire   [3:0] agg_result_fu_345_p15;
wire  signed [3:0] agg_result_fu_345_p17;

my_prj_sparsemux_19_4_11_1_0_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_19_4_11_1_0_x_U166(
    .din0(11'd1516),
    .din1(11'd1551),
    .din2(11'd1962),
    .din3(11'd83),
    .din4(11'd1949),
    .din5(11'd1787),
    .din6(11'd1991),
    .din7(11'd132),
    .din8(11'd1776),
    .def(agg_result_fu_345_p19),
    .sel(agg_result_fu_345_p20),
    .dout(agg_result_fu_345_p21)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_13_reg_453 <= and_ln105_13_fu_196_p2;
        and_ln105_reg_441 <= and_ln105_fu_182_p2;
        and_ln107_reg_447 <= and_ln107_fu_191_p2;
        and_ln107_reg_447_pp0_iter2_reg <= and_ln107_reg_447;
        icmp_ln4_11_reg_396 <= icmp_ln4_11_fu_134_p2;
        icmp_ln4_12_reg_402 <= icmp_ln4_12_fu_140_p2;
        icmp_ln4_12_reg_402_pp0_iter1_reg <= icmp_ln4_12_reg_402;
        icmp_ln4_13_reg_408 <= icmp_ln4_13_fu_146_p2;
        icmp_ln4_13_reg_408_pp0_iter1_reg <= icmp_ln4_13_reg_408;
        icmp_ln4_13_reg_408_pp0_iter2_reg <= icmp_ln4_13_reg_408_pp0_iter1_reg;
        icmp_ln4_14_reg_414 <= icmp_ln4_14_fu_152_p2;
        icmp_ln4_14_reg_414_pp0_iter1_reg <= icmp_ln4_14_reg_414;
        icmp_ln4_15_reg_419 <= icmp_ln4_15_fu_158_p2;
        icmp_ln4_15_reg_419_pp0_iter1_reg <= icmp_ln4_15_reg_419;
        icmp_ln4_16_reg_424 <= icmp_ln4_16_fu_164_p2;
        icmp_ln4_16_reg_424_pp0_iter1_reg <= icmp_ln4_16_reg_424;
        icmp_ln4_17_reg_429 <= icmp_ln4_17_fu_170_p2;
        icmp_ln4_17_reg_429_pp0_iter1_reg <= icmp_ln4_17_reg_429;
        icmp_ln4_17_reg_429_pp0_iter2_reg <= icmp_ln4_17_reg_429_pp0_iter1_reg;
        icmp_ln4_reg_389 <= icmp_ln4_fu_128_p2;
        icmp_ln4_reg_389_pp0_iter1_reg <= icmp_ln4_reg_389;
        or_ln120_13_reg_464 <= or_ln120_13_fu_254_p2;
        or_ln120_9_reg_458 <= or_ln120_9_fu_201_p2;
        select_ln120_14_reg_469 <= select_ln120_14_fu_306_p3;
        xor_ln107_reg_434 <= xor_ln107_fu_176_p2;
        xor_ln107_reg_434_pp0_iter1_reg <= xor_ln107_reg_434;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_345_p21;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        x_0_val_int_reg <= x_0_val;
        x_2_val_int_reg <= x_2_val;
        x_3_val_int_reg <= x_3_val;
        x_4_val_int_reg <= x_4_val;
        x_6_val_int_reg <= x_6_val;
        x_9_val_int_reg <= x_9_val;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_345_p21;
    end else begin
        ap_return = 'bx;
    end
end

assign agg_result_fu_345_p19 = 'bx;

assign agg_result_fu_345_p20 = ((or_ln120_14_fu_329_p2[0:0] == 1'b1) ? zext_ln120_4_fu_334_p1 : 4'd8);

assign and_ln105_13_fu_196_p2 = (icmp_ln4_12_reg_402 & and_ln105_fu_182_p2);

assign and_ln105_14_fu_211_p2 = (icmp_ln4_13_reg_408_pp0_iter1_reg & and_ln107_reg_447);

assign and_ln105_15_fu_215_p2 = (icmp_ln4_14_reg_414_pp0_iter1_reg & and_ln105_13_reg_453);

assign and_ln105_16_fu_219_p2 = (xor_ln107_7_fu_206_p2 & icmp_ln4_15_reg_419_pp0_iter1_reg);

assign and_ln105_17_fu_224_p2 = (and_ln105_reg_441 & and_ln105_16_fu_219_p2);

assign and_ln105_18_fu_229_p2 = (icmp_ln4_16_reg_424_pp0_iter1_reg & and_ln105_14_fu_211_p2);

assign and_ln105_19_fu_319_p2 = (xor_ln107_8_fu_314_p2 & icmp_ln4_17_reg_429_pp0_iter2_reg);

assign and_ln105_20_fu_324_p2 = (and_ln107_reg_447_pp0_iter2_reg & and_ln105_19_fu_319_p2);

assign and_ln105_fu_182_p2 = (xor_ln107_reg_434 & icmp_ln4_11_reg_396);

assign and_ln107_fu_191_p2 = (xor_ln107_reg_434 & xor_ln107_6_fu_186_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_11_fu_134_p2 = (($signed(x_4_val_int_reg) < $signed(18'd401)) ? 1'b1 : 1'b0);

assign icmp_ln4_12_fu_140_p2 = (($signed(x_9_val_int_reg) < $signed(18'd261512)) ? 1'b1 : 1'b0);

assign icmp_ln4_13_fu_146_p2 = (($signed(x_3_val_int_reg) < $signed(18'd79315)) ? 1'b1 : 1'b0);

assign icmp_ln4_14_fu_152_p2 = (($signed(x_3_val_int_reg) < $signed(18'd58635)) ? 1'b1 : 1'b0);

assign icmp_ln4_15_fu_158_p2 = (($signed(x_9_val_int_reg) < $signed(18'd307)) ? 1'b1 : 1'b0);

assign icmp_ln4_16_fu_164_p2 = (($signed(x_0_val_int_reg) < $signed(18'd5248)) ? 1'b1 : 1'b0);

assign icmp_ln4_17_fu_170_p2 = (($signed(x_6_val_int_reg) < $signed(18'd46336)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_128_p2 = (($signed(x_2_val_int_reg) < $signed(18'd1754)) ? 1'b1 : 1'b0);

assign or_ln120_10_fu_239_p2 = (or_ln120_9_reg_458 | and_ln105_17_fu_224_p2);

assign or_ln120_11_fu_244_p2 = (icmp_ln4_reg_389_pp0_iter1_reg | and_ln105_reg_441);

assign or_ln120_12_fu_248_p2 = (or_ln120_11_fu_244_p2 | and_ln105_18_fu_229_p2);

assign or_ln120_13_fu_254_p2 = (or_ln120_11_fu_244_p2 | and_ln105_14_fu_211_p2);

assign or_ln120_14_fu_329_p2 = (or_ln120_13_reg_464 | and_ln105_20_fu_324_p2);

assign or_ln120_9_fu_201_p2 = (icmp_ln4_reg_389 | and_ln105_13_fu_196_p2);

assign or_ln120_fu_234_p2 = (icmp_ln4_reg_389_pp0_iter1_reg | and_ln105_15_fu_215_p2);

assign select_ln120_10_fu_271_p3 = ((or_ln120_9_reg_458[0:0] == 1'b1) ? select_ln120_fu_263_p3 : 2'd3);

assign select_ln120_11_fu_282_p3 = ((or_ln120_10_fu_239_p2[0:0] == 1'b1) ? zext_ln120_3_fu_278_p1 : 3'd4);

assign select_ln120_12_fu_290_p3 = ((or_ln120_11_fu_244_p2[0:0] == 1'b1) ? select_ln120_11_fu_282_p3 : 3'd5);

assign select_ln120_13_fu_298_p3 = ((or_ln120_12_fu_248_p2[0:0] == 1'b1) ? select_ln120_12_fu_290_p3 : 3'd6);

assign select_ln120_14_fu_306_p3 = ((or_ln120_13_fu_254_p2[0:0] == 1'b1) ? select_ln120_13_fu_298_p3 : 3'd7);

assign select_ln120_fu_263_p3 = ((or_ln120_fu_234_p2[0:0] == 1'b1) ? zext_ln120_fu_260_p1 : 2'd2);

assign xor_ln107_6_fu_186_p2 = (icmp_ln4_11_reg_396 ^ 1'd1);

assign xor_ln107_7_fu_206_p2 = (icmp_ln4_12_reg_402_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_8_fu_314_p2 = (icmp_ln4_13_reg_408_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_fu_176_p2 = (icmp_ln4_fu_128_p2 ^ 1'd1);

assign zext_ln120_3_fu_278_p1 = select_ln120_10_fu_271_p3;

assign zext_ln120_4_fu_334_p1 = select_ln120_14_reg_469;

assign zext_ln120_fu_260_p1 = xor_ln107_reg_434_pp0_iter1_reg;

endmodule //my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_8
