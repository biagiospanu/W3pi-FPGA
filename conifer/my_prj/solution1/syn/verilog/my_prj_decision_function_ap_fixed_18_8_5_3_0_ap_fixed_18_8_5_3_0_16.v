// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_16 (
        ap_clk,
        ap_rst,
        x_0_val,
        x_3_val,
        x_4_val,
        x_5_val,
        x_6_val,
        x_7_val,
        x_8_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] x_0_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_156_p2;
reg   [0:0] icmp_ln4_reg_532;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln4_94_fu_162_p2;
reg   [0:0] icmp_ln4_94_reg_538;
reg   [0:0] icmp_ln4_94_reg_538_pp0_iter1_reg;
wire   [0:0] icmp_ln4_95_fu_168_p2;
reg   [0:0] icmp_ln4_95_reg_546;
wire   [0:0] icmp_ln4_96_fu_174_p2;
reg   [0:0] icmp_ln4_96_reg_553;
reg   [0:0] icmp_ln4_96_reg_553_pp0_iter1_reg;
wire   [0:0] icmp_ln4_97_fu_180_p2;
reg   [0:0] icmp_ln4_97_reg_559;
reg   [0:0] icmp_ln4_97_reg_559_pp0_iter1_reg;
wire   [0:0] icmp_ln4_98_fu_186_p2;
reg   [0:0] icmp_ln4_98_reg_565;
wire   [0:0] icmp_ln4_99_fu_192_p2;
reg   [0:0] icmp_ln4_99_reg_571;
wire   [0:0] icmp_ln4_100_fu_198_p2;
reg   [0:0] icmp_ln4_100_reg_576;
reg   [0:0] icmp_ln4_100_reg_576_pp0_iter1_reg;
wire   [0:0] icmp_ln4_101_fu_204_p2;
reg   [0:0] icmp_ln4_101_reg_581;
reg   [0:0] icmp_ln4_101_reg_581_pp0_iter1_reg;
wire   [0:0] icmp_ln4_102_fu_210_p2;
reg   [0:0] icmp_ln4_102_reg_586;
reg   [0:0] icmp_ln4_102_reg_586_pp0_iter1_reg;
wire   [0:0] icmp_ln4_103_fu_216_p2;
reg   [0:0] icmp_ln4_103_reg_591;
reg   [0:0] icmp_ln4_103_reg_591_pp0_iter1_reg;
reg   [0:0] icmp_ln4_103_reg_591_pp0_iter2_reg;
wire   [0:0] xor_ln107_fu_222_p2;
reg   [0:0] xor_ln107_reg_596;
wire   [0:0] and_ln107_fu_233_p2;
reg   [0:0] and_ln107_reg_602;
wire   [0:0] and_ln105_104_fu_256_p2;
reg   [0:0] and_ln105_104_reg_608;
wire   [0:0] and_ln105_105_fu_261_p2;
reg   [0:0] and_ln105_105_reg_614;
reg   [0:0] and_ln105_105_reg_614_pp0_iter2_reg;
wire   [0:0] or_ln120_74_fu_294_p2;
reg   [0:0] or_ln120_74_reg_620;
wire   [0:0] or_ln120_76_fu_300_p2;
reg   [0:0] or_ln120_76_reg_626;
wire   [1:0] select_ln120_88_fu_321_p3;
reg   [1:0] select_ln120_88_reg_634;
wire   [0:0] or_ln120_80_fu_383_p2;
reg   [0:0] or_ln120_80_reg_639;
wire   [3:0] select_ln120_95_fu_440_p3;
reg   [3:0] select_ln120_95_reg_645;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_42_fu_228_p2;
wire   [0:0] xor_ln107_43_fu_242_p2;
wire   [0:0] and_ln105_fu_238_p2;
wire   [0:0] xor_ln107_46_fu_266_p2;
wire   [0:0] and_ln105_103_fu_252_p2;
wire   [0:0] and_ln107_9_fu_247_p2;
wire   [0:0] and_ln107_10_fu_271_p2;
wire   [0:0] or_ln120_fu_282_p2;
wire   [0:0] and_ln105_106_fu_277_p2;
wire   [0:0] or_ln120_83_fu_305_p2;
wire   [1:0] zext_ln120_fu_309_p1;
wire   [0:0] or_ln120_73_fu_288_p2;
wire   [1:0] select_ln120_fu_313_p3;
wire   [0:0] xor_ln107_44_fu_329_p2;
wire   [0:0] and_ln105_107_fu_339_p2;
wire   [0:0] xor_ln107_45_fu_334_p2;
wire   [0:0] and_ln105_110_fu_353_p2;
wire   [0:0] and_ln105_108_fu_344_p2;
wire   [0:0] and_ln105_109_fu_349_p2;
wire   [0:0] or_ln120_78_fu_373_p2;
wire   [0:0] and_ln105_111_fu_358_p2;
wire   [2:0] zext_ln120_15_fu_387_p1;
wire   [0:0] or_ln120_75_fu_363_p2;
wire   [2:0] select_ln120_89_fu_390_p3;
wire   [2:0] select_ln120_90_fu_397_p3;
wire   [0:0] or_ln120_77_fu_368_p2;
wire   [2:0] select_ln120_91_fu_405_p3;
wire   [2:0] select_ln120_92_fu_412_p3;
wire   [3:0] zext_ln120_16_fu_420_p1;
wire   [0:0] or_ln120_79_fu_377_p2;
wire   [3:0] select_ln120_93_fu_424_p3;
wire   [3:0] select_ln120_94_fu_432_p3;
wire   [0:0] and_ln105_112_fu_448_p2;
wire   [0:0] or_ln120_81_fu_452_p2;
wire   [10:0] tmp_fu_468_p25;
wire   [3:0] tmp_fu_468_p26;
wire   [0:0] or_ln120_82_fu_457_p2;
wire   [10:0] tmp_fu_468_p27;
wire   [10:0] select_ln120_97_fu_524_p3;
reg    ap_ce_reg;
reg   [17:0] x_0_val_int_reg;
reg   [17:0] x_3_val_int_reg;
reg   [17:0] x_4_val_int_reg;
reg   [17:0] x_5_val_int_reg;
reg   [17:0] x_6_val_int_reg;
reg   [17:0] x_7_val_int_reg;
reg   [17:0] x_8_val_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] tmp_fu_468_p1;
wire   [3:0] tmp_fu_468_p3;
wire   [3:0] tmp_fu_468_p5;
wire   [3:0] tmp_fu_468_p7;
wire   [3:0] tmp_fu_468_p9;
wire   [3:0] tmp_fu_468_p11;
wire   [3:0] tmp_fu_468_p13;
wire   [3:0] tmp_fu_468_p15;
wire  signed [3:0] tmp_fu_468_p17;
wire  signed [3:0] tmp_fu_468_p19;
wire  signed [3:0] tmp_fu_468_p21;
wire  signed [3:0] tmp_fu_468_p23;

my_prj_sparsemux_25_4_11_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_25_4_11_1_0_U92(
    .din0(11'd1391),
    .din1(11'd1473),
    .din2(11'd104),
    .din3(11'd1699),
    .din4(11'd1403),
    .din5(11'd1853),
    .din6(11'd1980),
    .din7(11'd166),
    .din8(11'd105),
    .din9(11'd1466),
    .din10(11'd1585),
    .din11(11'd616),
    .def(tmp_fu_468_p25),
    .sel(tmp_fu_468_p26),
    .dout(tmp_fu_468_p27)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_104_reg_608 <= and_ln105_104_fu_256_p2;
        and_ln105_105_reg_614 <= and_ln105_105_fu_261_p2;
        and_ln105_105_reg_614_pp0_iter2_reg <= and_ln105_105_reg_614;
        and_ln107_reg_602 <= and_ln107_fu_233_p2;
        icmp_ln4_100_reg_576 <= icmp_ln4_100_fu_198_p2;
        icmp_ln4_100_reg_576_pp0_iter1_reg <= icmp_ln4_100_reg_576;
        icmp_ln4_101_reg_581 <= icmp_ln4_101_fu_204_p2;
        icmp_ln4_101_reg_581_pp0_iter1_reg <= icmp_ln4_101_reg_581;
        icmp_ln4_102_reg_586 <= icmp_ln4_102_fu_210_p2;
        icmp_ln4_102_reg_586_pp0_iter1_reg <= icmp_ln4_102_reg_586;
        icmp_ln4_103_reg_591 <= icmp_ln4_103_fu_216_p2;
        icmp_ln4_103_reg_591_pp0_iter1_reg <= icmp_ln4_103_reg_591;
        icmp_ln4_103_reg_591_pp0_iter2_reg <= icmp_ln4_103_reg_591_pp0_iter1_reg;
        icmp_ln4_94_reg_538 <= icmp_ln4_94_fu_162_p2;
        icmp_ln4_94_reg_538_pp0_iter1_reg <= icmp_ln4_94_reg_538;
        icmp_ln4_95_reg_546 <= icmp_ln4_95_fu_168_p2;
        icmp_ln4_96_reg_553 <= icmp_ln4_96_fu_174_p2;
        icmp_ln4_96_reg_553_pp0_iter1_reg <= icmp_ln4_96_reg_553;
        icmp_ln4_97_reg_559 <= icmp_ln4_97_fu_180_p2;
        icmp_ln4_97_reg_559_pp0_iter1_reg <= icmp_ln4_97_reg_559;
        icmp_ln4_98_reg_565 <= icmp_ln4_98_fu_186_p2;
        icmp_ln4_99_reg_571 <= icmp_ln4_99_fu_192_p2;
        icmp_ln4_reg_532 <= icmp_ln4_fu_156_p2;
        or_ln120_74_reg_620 <= or_ln120_74_fu_294_p2;
        or_ln120_76_reg_626 <= or_ln120_76_fu_300_p2;
        or_ln120_80_reg_639 <= or_ln120_80_fu_383_p2;
        select_ln120_88_reg_634 <= select_ln120_88_fu_321_p3;
        select_ln120_95_reg_645 <= select_ln120_95_fu_440_p3;
        xor_ln107_reg_596 <= xor_ln107_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln120_97_fu_524_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        x_0_val_int_reg <= x_0_val;
        x_3_val_int_reg <= x_3_val;
        x_4_val_int_reg <= x_4_val;
        x_5_val_int_reg <= x_5_val;
        x_6_val_int_reg <= x_6_val;
        x_7_val_int_reg <= x_7_val;
        x_8_val_int_reg <= x_8_val;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln120_97_fu_524_p3;
    end else begin
        ap_return = 'bx;
    end
end

assign and_ln105_103_fu_252_p2 = (icmp_ln4_96_reg_553 & icmp_ln4_94_reg_538);

assign and_ln105_104_fu_256_p2 = (icmp_ln4_97_reg_559 & and_ln107_fu_233_p2);

assign and_ln105_105_fu_261_p2 = (icmp_ln4_98_reg_565 & and_ln105_fu_238_p2);

assign and_ln105_106_fu_277_p2 = (icmp_ln4_99_reg_571 & and_ln105_103_fu_252_p2);

assign and_ln105_107_fu_339_p2 = (xor_ln107_44_fu_329_p2 & icmp_ln4_100_reg_576_pp0_iter1_reg);

assign and_ln105_108_fu_344_p2 = (icmp_ln4_94_reg_538_pp0_iter1_reg & and_ln105_107_fu_339_p2);

assign and_ln105_109_fu_349_p2 = (icmp_ln4_101_reg_581_pp0_iter1_reg & and_ln105_104_reg_608);

assign and_ln105_110_fu_353_p2 = (xor_ln107_45_fu_334_p2 & icmp_ln4_102_reg_586_pp0_iter1_reg);

assign and_ln105_111_fu_358_p2 = (and_ln107_reg_602 & and_ln105_110_fu_353_p2);

assign and_ln105_112_fu_448_p2 = (icmp_ln4_103_reg_591_pp0_iter2_reg & and_ln105_105_reg_614_pp0_iter2_reg);

assign and_ln105_fu_238_p2 = (xor_ln107_reg_596 & icmp_ln4_95_reg_546);

assign and_ln107_10_fu_271_p2 = (xor_ln107_46_fu_266_p2 & and_ln105_fu_238_p2);

assign and_ln107_9_fu_247_p2 = (xor_ln107_reg_596 & xor_ln107_43_fu_242_p2);

assign and_ln107_fu_233_p2 = (xor_ln107_42_fu_228_p2 & icmp_ln4_reg_532);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_100_fu_198_p2 = (($signed(x_4_val_int_reg) < $signed(18'd3399)) ? 1'b1 : 1'b0);

assign icmp_ln4_101_fu_204_p2 = (($signed(x_3_val_int_reg) < $signed(18'd78284)) ? 1'b1 : 1'b0);

assign icmp_ln4_102_fu_210_p2 = (($signed(x_5_val_int_reg) < $signed(18'd3143)) ? 1'b1 : 1'b0);

assign icmp_ln4_103_fu_216_p2 = (($signed(x_3_val_int_reg) < $signed(18'd61178)) ? 1'b1 : 1'b0);

assign icmp_ln4_94_fu_162_p2 = (($signed(x_7_val_int_reg) < $signed(18'd260608)) ? 1'b1 : 1'b0);

assign icmp_ln4_95_fu_168_p2 = (($signed(x_8_val_int_reg) < $signed(18'd49)) ? 1'b1 : 1'b0);

assign icmp_ln4_96_fu_174_p2 = (($signed(x_0_val_int_reg) < $signed(18'd2176)) ? 1'b1 : 1'b0);

assign icmp_ln4_97_fu_180_p2 = (($signed(x_3_val_int_reg) < $signed(18'd104174)) ? 1'b1 : 1'b0);

assign icmp_ln4_98_fu_186_p2 = (($signed(x_3_val_int_reg) < $signed(18'd68435)) ? 1'b1 : 1'b0);

assign icmp_ln4_99_fu_192_p2 = (($signed(x_6_val_int_reg) < $signed(18'd32640)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_156_p2 = (($signed(x_7_val_int_reg) < $signed(18'd1536)) ? 1'b1 : 1'b0);

assign or_ln120_73_fu_288_p2 = (or_ln120_fu_282_p2 | and_ln105_106_fu_277_p2);

assign or_ln120_74_fu_294_p2 = (or_ln120_fu_282_p2 | and_ln105_103_fu_252_p2);

assign or_ln120_75_fu_363_p2 = (or_ln120_74_reg_620 | and_ln105_108_fu_344_p2);

assign or_ln120_76_fu_300_p2 = (or_ln120_fu_282_p2 | icmp_ln4_94_reg_538);

assign or_ln120_77_fu_368_p2 = (or_ln120_76_reg_626 | and_ln105_109_fu_349_p2);

assign or_ln120_78_fu_373_p2 = (or_ln120_76_reg_626 | and_ln105_104_reg_608);

assign or_ln120_79_fu_377_p2 = (or_ln120_78_fu_373_p2 | and_ln105_111_fu_358_p2);

assign or_ln120_80_fu_383_p2 = (or_ln120_76_reg_626 | and_ln107_reg_602);

assign or_ln120_81_fu_452_p2 = (or_ln120_80_reg_639 | and_ln105_112_fu_448_p2);

assign or_ln120_82_fu_457_p2 = (or_ln120_80_reg_639 | and_ln105_105_reg_614_pp0_iter2_reg);

assign or_ln120_83_fu_305_p2 = (icmp_ln4_reg_532 | icmp_ln4_95_reg_546);

assign or_ln120_fu_282_p2 = (and_ln107_9_fu_247_p2 | and_ln107_10_fu_271_p2);

assign select_ln120_88_fu_321_p3 = ((or_ln120_73_fu_288_p2[0:0] == 1'b1) ? select_ln120_fu_313_p3 : 2'd3);

assign select_ln120_89_fu_390_p3 = ((or_ln120_74_reg_620[0:0] == 1'b1) ? zext_ln120_15_fu_387_p1 : 3'd4);

assign select_ln120_90_fu_397_p3 = ((or_ln120_75_fu_363_p2[0:0] == 1'b1) ? select_ln120_89_fu_390_p3 : 3'd5);

assign select_ln120_91_fu_405_p3 = ((or_ln120_76_reg_626[0:0] == 1'b1) ? select_ln120_90_fu_397_p3 : 3'd6);

assign select_ln120_92_fu_412_p3 = ((or_ln120_77_fu_368_p2[0:0] == 1'b1) ? select_ln120_91_fu_405_p3 : 3'd7);

assign select_ln120_93_fu_424_p3 = ((or_ln120_78_fu_373_p2[0:0] == 1'b1) ? zext_ln120_16_fu_420_p1 : 4'd8);

assign select_ln120_94_fu_432_p3 = ((or_ln120_79_fu_377_p2[0:0] == 1'b1) ? select_ln120_93_fu_424_p3 : 4'd9);

assign select_ln120_95_fu_440_p3 = ((or_ln120_80_fu_383_p2[0:0] == 1'b1) ? select_ln120_94_fu_432_p3 : 4'd10);

assign select_ln120_97_fu_524_p3 = ((or_ln120_82_fu_457_p2[0:0] == 1'b1) ? tmp_fu_468_p27 : 11'd0);

assign select_ln120_fu_313_p3 = ((or_ln120_fu_282_p2[0:0] == 1'b1) ? zext_ln120_fu_309_p1 : 2'd2);

assign tmp_fu_468_p25 = 'bx;

assign tmp_fu_468_p26 = ((or_ln120_81_fu_452_p2[0:0] == 1'b1) ? select_ln120_95_reg_645 : 4'd11);

assign xor_ln107_42_fu_228_p2 = (icmp_ln4_94_reg_538 ^ 1'd1);

assign xor_ln107_43_fu_242_p2 = (icmp_ln4_95_reg_546 ^ 1'd1);

assign xor_ln107_44_fu_329_p2 = (icmp_ln4_96_reg_553_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_45_fu_334_p2 = (icmp_ln4_97_reg_559_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_46_fu_266_p2 = (icmp_ln4_98_reg_565 ^ 1'd1);

assign xor_ln107_fu_222_p2 = (icmp_ln4_fu_156_p2 ^ 1'd1);

assign zext_ln120_15_fu_387_p1 = select_ln120_88_reg_634;

assign zext_ln120_16_fu_420_p1 = select_ln120_92_fu_412_p3;

assign zext_ln120_fu_309_p1 = or_ln120_83_fu_305_p2;

endmodule //my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_16
