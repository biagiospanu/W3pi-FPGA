-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_0_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_1_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_2_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_4_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_6_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_8_val : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_3780 : STD_LOGIC_VECTOR (17 downto 0) := "000011011110000000";
    constant ap_const_lv18_2280 : STD_LOGIC_VECTOR (17 downto 0) := "000010001010000000";
    constant ap_const_lv18_F80 : STD_LOGIC_VECTOR (17 downto 0) := "000000111110000000";
    constant ap_const_lv18_C600 : STD_LOGIC_VECTOR (17 downto 0) := "001100011000000000";
    constant ap_const_lv18_18C : STD_LOGIC_VECTOR (17 downto 0) := "000000000110001100";
    constant ap_const_lv18_F539 : STD_LOGIC_VECTOR (17 downto 0) := "001111010100111001";
    constant ap_const_lv18_1AE : STD_LOGIC_VECTOR (17 downto 0) := "000000000110101110";
    constant ap_const_lv18_2980 : STD_LOGIC_VECTOR (17 downto 0) := "000010100110000000";
    constant ap_const_lv18_162 : STD_LOGIC_VECTOR (17 downto 0) := "000000000101100010";
    constant ap_const_lv18_1280 : STD_LOGIC_VECTOR (17 downto 0) := "000001001010000000";
    constant ap_const_lv18_10446 : STD_LOGIC_VECTOR (17 downto 0) := "010000010001000110";
    constant ap_const_lv18_F000 : STD_LOGIC_VECTOR (17 downto 0) := "001111000000000000";
    constant ap_const_lv18_300 : STD_LOGIC_VECTOR (17 downto 0) := "000000001100000000";
    constant ap_const_lv18_2C4 : STD_LOGIC_VECTOR (17 downto 0) := "000000001011000100";
    constant ap_const_lv18_2A80 : STD_LOGIC_VECTOR (17 downto 0) := "000010101010000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_59A : STD_LOGIC_VECTOR (10 downto 0) := "10110011010";
    constant ap_const_lv11_5E1 : STD_LOGIC_VECTOR (10 downto 0) := "10111100001";
    constant ap_const_lv11_1B1 : STD_LOGIC_VECTOR (10 downto 0) := "00110110001";
    constant ap_const_lv11_5F8 : STD_LOGIC_VECTOR (10 downto 0) := "10111111000";
    constant ap_const_lv11_66D : STD_LOGIC_VECTOR (10 downto 0) := "11001101101";
    constant ap_const_lv11_71 : STD_LOGIC_VECTOR (10 downto 0) := "00001110001";
    constant ap_const_lv11_5CC : STD_LOGIC_VECTOR (10 downto 0) := "10111001100";
    constant ap_const_lv11_770 : STD_LOGIC_VECTOR (10 downto 0) := "11101110000";
    constant ap_const_lv11_5F4 : STD_LOGIC_VECTOR (10 downto 0) := "10111110100";
    constant ap_const_lv11_F5 : STD_LOGIC_VECTOR (10 downto 0) := "00011110101";
    constant ap_const_lv11_7C3 : STD_LOGIC_VECTOR (10 downto 0) := "11111000011";
    constant ap_const_lv11_53D : STD_LOGIC_VECTOR (10 downto 0) := "10100111101";
    constant ap_const_lv11_20A : STD_LOGIC_VECTOR (10 downto 0) := "01000001010";
    constant ap_const_lv11_657 : STD_LOGIC_VECTOR (10 downto 0) := "11001010111";
    constant ap_const_lv11_6A0 : STD_LOGIC_VECTOR (10 downto 0) := "11010100000";
    constant ap_const_lv11_136 : STD_LOGIC_VECTOR (10 downto 0) := "00100110110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal icmp_ln4_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_657 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_32_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_32_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_33_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_33_reg_671 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_33_reg_671_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_34_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_34_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_35_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_35_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_35_reg_682_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_36_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_36_reg_688 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_36_reg_688_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_37_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_37_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_37_reg_694_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_37_reg_694_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_37_reg_694_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_38_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_38_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_39_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_39_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_40_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_40_reg_710 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_41_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_41_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_41_reg_715_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_42_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_42_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_42_reg_720_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_43_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_43_reg_725 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_43_reg_725_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_44_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_44_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_44_reg_730_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_44_reg_730_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_45_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_45_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_45_reg_735_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_45_reg_735_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_45_reg_735_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_740_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_38_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_38_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_reg_754_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_reg_754_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_reg_760 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_40_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_40_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_26_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_26_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_28_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_28_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_28_reg_777_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_28_reg_777_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_32_fu_386_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_32_reg_786 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln107_3_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_3_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_3_reg_791_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_32_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_32_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_38_fu_504_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_38_reg_803 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_34_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_34_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_40_fu_538_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_40_reg_813 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal xor_ln107_15_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_17_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_43_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_39_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_44_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_45_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_42_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln120_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_348_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln120_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_fu_352_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_29_fu_359_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln120_7_fu_367_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_25_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_30_fu_371_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_31_fu_378_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln107_16_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_18_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_46_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_19_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_49_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_47_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_48_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_30_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_50_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_27_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_33_fu_462_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln120_8_fu_469_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_29_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_34_fu_473_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_35_fu_480_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_31_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_36_fu_488_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_37_fu_496_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln105_41_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_51_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_33_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_39_fu_531_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln107_20_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_52_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_53_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_35_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_577_p33 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_577_p34 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_36_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_577_p35 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln120_42_fu_649_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal x_0_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_1_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_2_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_4_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_6_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_8_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_577_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_577_p31 : STD_LOGIC_VECTOR (3 downto 0);

    component my_prj_sparsemux_33_4_11_1_0_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        din9 : IN STD_LOGIC_VECTOR (10 downto 0);
        din10 : IN STD_LOGIC_VECTOR (10 downto 0);
        din11 : IN STD_LOGIC_VECTOR (10 downto 0);
        din12 : IN STD_LOGIC_VECTOR (10 downto 0);
        din13 : IN STD_LOGIC_VECTOR (10 downto 0);
        din14 : IN STD_LOGIC_VECTOR (10 downto 0);
        din15 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_33_4_11_1_0_x_U29 : component my_prj_sparsemux_33_4_11_1_0_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        CASE9 => "1001",
        din9_WIDTH => 11,
        CASE10 => "1010",
        din10_WIDTH => 11,
        CASE11 => "1011",
        din11_WIDTH => 11,
        CASE12 => "1100",
        din12_WIDTH => 11,
        CASE13 => "1101",
        din13_WIDTH => 11,
        CASE14 => "1110",
        din14_WIDTH => 11,
        CASE15 => "1111",
        din15_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_59A,
        din1 => ap_const_lv11_5E1,
        din2 => ap_const_lv11_1B1,
        din3 => ap_const_lv11_5F8,
        din4 => ap_const_lv11_66D,
        din5 => ap_const_lv11_71,
        din6 => ap_const_lv11_5CC,
        din7 => ap_const_lv11_770,
        din8 => ap_const_lv11_5F4,
        din9 => ap_const_lv11_F5,
        din10 => ap_const_lv11_7C3,
        din11 => ap_const_lv11_53D,
        din12 => ap_const_lv11_20A,
        din13 => ap_const_lv11_657,
        din14 => ap_const_lv11_6A0,
        din15 => ap_const_lv11_136,
        def => tmp_fu_577_p33,
        sel => tmp_fu_577_p34,
        dout => tmp_fu_577_p35);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_38_reg_747 <= and_ln105_38_fu_274_p2;
                and_ln105_40_reg_766 <= and_ln105_40_fu_299_p2;
                and_ln105_reg_760 <= and_ln105_fu_285_p2;
                and_ln107_3_reg_791 <= and_ln107_3_fu_399_p2;
                and_ln107_3_reg_791_pp0_iter3_reg <= and_ln107_3_reg_791;
                and_ln107_reg_740 <= and_ln107_fu_268_p2;
                and_ln107_reg_740_pp0_iter1_reg <= and_ln107_reg_740;
                icmp_ln4_32_reg_662 <= icmp_ln4_32_fu_178_p2;
                icmp_ln4_33_reg_671 <= icmp_ln4_33_fu_184_p2;
                icmp_ln4_33_reg_671_pp0_iter1_reg <= icmp_ln4_33_reg_671;
                icmp_ln4_34_reg_677 <= icmp_ln4_34_fu_190_p2;
                icmp_ln4_35_reg_682 <= icmp_ln4_35_fu_196_p2;
                icmp_ln4_35_reg_682_pp0_iter1_reg <= icmp_ln4_35_reg_682;
                icmp_ln4_36_reg_688 <= icmp_ln4_36_fu_202_p2;
                icmp_ln4_36_reg_688_pp0_iter1_reg <= icmp_ln4_36_reg_688;
                icmp_ln4_37_reg_694 <= icmp_ln4_37_fu_208_p2;
                icmp_ln4_37_reg_694_pp0_iter1_reg <= icmp_ln4_37_reg_694;
                icmp_ln4_37_reg_694_pp0_iter2_reg <= icmp_ln4_37_reg_694_pp0_iter1_reg;
                icmp_ln4_37_reg_694_pp0_iter3_reg <= icmp_ln4_37_reg_694_pp0_iter2_reg;
                icmp_ln4_38_reg_700 <= icmp_ln4_38_fu_214_p2;
                icmp_ln4_39_reg_705 <= icmp_ln4_39_fu_220_p2;
                icmp_ln4_40_reg_710 <= icmp_ln4_40_fu_226_p2;
                icmp_ln4_41_reg_715 <= icmp_ln4_41_fu_232_p2;
                icmp_ln4_41_reg_715_pp0_iter1_reg <= icmp_ln4_41_reg_715;
                icmp_ln4_42_reg_720 <= icmp_ln4_42_fu_238_p2;
                icmp_ln4_42_reg_720_pp0_iter1_reg <= icmp_ln4_42_reg_720;
                icmp_ln4_43_reg_725 <= icmp_ln4_43_fu_244_p2;
                icmp_ln4_43_reg_725_pp0_iter1_reg <= icmp_ln4_43_reg_725;
                icmp_ln4_44_reg_730 <= icmp_ln4_44_fu_250_p2;
                icmp_ln4_44_reg_730_pp0_iter1_reg <= icmp_ln4_44_reg_730;
                icmp_ln4_44_reg_730_pp0_iter2_reg <= icmp_ln4_44_reg_730_pp0_iter1_reg;
                icmp_ln4_45_reg_735 <= icmp_ln4_45_fu_256_p2;
                icmp_ln4_45_reg_735_pp0_iter1_reg <= icmp_ln4_45_reg_735;
                icmp_ln4_45_reg_735_pp0_iter2_reg <= icmp_ln4_45_reg_735_pp0_iter1_reg;
                icmp_ln4_45_reg_735_pp0_iter3_reg <= icmp_ln4_45_reg_735_pp0_iter2_reg;
                icmp_ln4_reg_657 <= icmp_ln4_fu_172_p2;
                or_ln120_26_reg_772 <= or_ln120_26_fu_333_p2;
                or_ln120_28_reg_777 <= or_ln120_28_fu_338_p2;
                or_ln120_28_reg_777_pp0_iter2_reg <= or_ln120_28_reg_777;
                or_ln120_28_reg_777_pp0_iter3_reg <= or_ln120_28_reg_777_pp0_iter2_reg;
                or_ln120_32_reg_797 <= or_ln120_32_fu_458_p2;
                or_ln120_34_reg_808 <= or_ln120_34_fu_526_p2;
                select_ln120_32_reg_786 <= select_ln120_32_fu_386_p3;
                select_ln120_38_reg_803 <= select_ln120_38_fu_504_p3;
                select_ln120_40_reg_813 <= select_ln120_40_fu_538_p3;
                xor_ln107_reg_754 <= xor_ln107_fu_280_p2;
                xor_ln107_reg_754_pp0_iter2_reg <= xor_ln107_reg_754;
                xor_ln107_reg_754_pp0_iter3_reg <= xor_ln107_reg_754_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln120_42_fu_649_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                x_0_val_int_reg <= x_0_val;
                x_1_val_int_reg <= x_1_val;
                x_2_val_int_reg <= x_2_val;
                x_4_val_int_reg <= x_4_val;
                x_6_val_int_reg <= x_6_val;
                x_8_val_int_reg <= x_8_val;
            end if;
        end if;
    end process;
    and_ln105_38_fu_274_p2 <= (icmp_ln4_34_fu_190_p2 and icmp_ln4_32_fu_178_p2);
    and_ln105_39_fu_295_p2 <= (icmp_ln4_35_reg_682 and and_ln107_reg_740);
    and_ln105_40_fu_299_p2 <= (icmp_ln4_36_reg_688 and and_ln105_fu_285_p2);
    and_ln105_41_fu_512_p2 <= (icmp_ln4_37_reg_694_pp0_iter2_reg and and_ln107_3_reg_791);
    and_ln105_42_fu_304_p2 <= (icmp_ln4_38_reg_700 and and_ln105_38_reg_747);
    and_ln105_43_fu_308_p2 <= (xor_ln107_17_fu_290_p2 and icmp_ln4_39_reg_705);
    and_ln105_44_fu_313_p2 <= (icmp_ln4_32_reg_662 and and_ln105_43_fu_308_p2);
    and_ln105_45_fu_318_p2 <= (icmp_ln4_40_reg_710 and and_ln105_39_fu_295_p2);
    and_ln105_46_fu_414_p2 <= (xor_ln107_18_fu_404_p2 and icmp_ln4_41_reg_715_pp0_iter1_reg);
    and_ln105_47_fu_419_p2 <= (and_ln107_reg_740_pp0_iter1_reg and and_ln105_46_fu_414_p2);
    and_ln105_48_fu_424_p2 <= (icmp_ln4_42_reg_720_pp0_iter1_reg and and_ln105_40_reg_766);
    and_ln105_49_fu_428_p2 <= (xor_ln107_19_fu_409_p2 and icmp_ln4_43_reg_725_pp0_iter1_reg);
    and_ln105_50_fu_433_p2 <= (and_ln105_reg_760 and and_ln105_49_fu_428_p2);
    and_ln105_51_fu_516_p2 <= (icmp_ln4_44_reg_730_pp0_iter2_reg and and_ln105_41_fu_512_p2);
    and_ln105_52_fu_551_p2 <= (xor_ln107_20_fu_546_p2 and icmp_ln4_45_reg_735_pp0_iter3_reg);
    and_ln105_53_fu_556_p2 <= (and_ln107_3_reg_791_pp0_iter3_reg and and_ln105_52_fu_551_p2);
    and_ln105_fu_285_p2 <= (xor_ln107_fu_280_p2 and icmp_ln4_33_reg_671);
    and_ln107_3_fu_399_p2 <= (xor_ln107_reg_754 and xor_ln107_16_fu_394_p2);
    and_ln107_fu_268_p2 <= (xor_ln107_15_fu_262_p2 and icmp_ln4_fu_172_p2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln120_42_fu_649_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln120_42_fu_649_p3;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_32_fu_178_p2 <= "1" when (signed(x_1_val_int_reg) < signed(ap_const_lv18_2280)) else "0";
    icmp_ln4_33_fu_184_p2 <= "1" when (signed(x_0_val_int_reg) < signed(ap_const_lv18_F80)) else "0";
    icmp_ln4_34_fu_190_p2 <= "1" when (signed(x_6_val_int_reg) < signed(ap_const_lv18_C600)) else "0";
    icmp_ln4_35_fu_196_p2 <= "1" when (signed(x_4_val_int_reg) < signed(ap_const_lv18_18C)) else "0";
    icmp_ln4_36_fu_202_p2 <= "1" when (signed(x_2_val_int_reg) < signed(ap_const_lv18_F539)) else "0";
    icmp_ln4_37_fu_208_p2 <= "1" when (signed(x_4_val_int_reg) < signed(ap_const_lv18_1AE)) else "0";
    icmp_ln4_38_fu_214_p2 <= "1" when (signed(x_6_val_int_reg) < signed(ap_const_lv18_2980)) else "0";
    icmp_ln4_39_fu_220_p2 <= "1" when (signed(x_8_val_int_reg) < signed(ap_const_lv18_162)) else "0";
    icmp_ln4_40_fu_226_p2 <= "1" when (signed(x_0_val_int_reg) < signed(ap_const_lv18_1280)) else "0";
    icmp_ln4_41_fu_232_p2 <= "1" when (signed(x_2_val_int_reg) < signed(ap_const_lv18_10446)) else "0";
    icmp_ln4_42_fu_238_p2 <= "1" when (signed(x_6_val_int_reg) < signed(ap_const_lv18_F000)) else "0";
    icmp_ln4_43_fu_244_p2 <= "1" when (signed(x_8_val_int_reg) < signed(ap_const_lv18_300)) else "0";
    icmp_ln4_44_fu_250_p2 <= "1" when (signed(x_8_val_int_reg) < signed(ap_const_lv18_2C4)) else "0";
    icmp_ln4_45_fu_256_p2 <= "1" when (signed(x_0_val_int_reg) < signed(ap_const_lv18_2A80)) else "0";
    icmp_ln4_fu_172_p2 <= "1" when (signed(x_1_val_int_reg) < signed(ap_const_lv18_3780)) else "0";
    or_ln120_25_fu_328_p2 <= (icmp_ln4_32_reg_662 or and_ln105_45_fu_318_p2);
    or_ln120_26_fu_333_p2 <= (icmp_ln4_32_reg_662 or and_ln105_39_fu_295_p2);
    or_ln120_27_fu_438_p2 <= (or_ln120_26_reg_772 or and_ln105_47_fu_419_p2);
    or_ln120_28_fu_338_p2 <= (icmp_ln4_32_reg_662 or and_ln107_reg_740);
    or_ln120_29_fu_443_p2 <= (or_ln120_28_reg_777 or and_ln105_48_fu_424_p2);
    or_ln120_30_fu_448_p2 <= (or_ln120_28_reg_777 or and_ln105_40_reg_766);
    or_ln120_31_fu_452_p2 <= (or_ln120_30_fu_448_p2 or and_ln105_50_fu_433_p2);
    or_ln120_32_fu_458_p2 <= (or_ln120_28_reg_777 or and_ln105_reg_760);
    or_ln120_33_fu_521_p2 <= (or_ln120_32_reg_797 or and_ln105_51_fu_516_p2);
    or_ln120_34_fu_526_p2 <= (or_ln120_32_reg_797 or and_ln105_41_fu_512_p2);
    or_ln120_35_fu_561_p2 <= (or_ln120_34_reg_808 or and_ln105_53_fu_556_p2);
    or_ln120_36_fu_566_p2 <= (xor_ln107_reg_754_pp0_iter3_reg or or_ln120_28_reg_777_pp0_iter3_reg);
    or_ln120_fu_323_p2 <= (and_ln105_44_fu_313_p2 or and_ln105_38_reg_747);
    select_ln120_29_fu_359_p3 <= 
        select_ln120_fu_352_p3 when (or_ln120_fu_323_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_30_fu_371_p3 <= 
        zext_ln120_7_fu_367_p1 when (icmp_ln4_32_reg_662(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_31_fu_378_p3 <= 
        select_ln120_30_fu_371_p3 when (or_ln120_25_fu_328_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_32_fu_386_p3 <= 
        select_ln120_31_fu_378_p3 when (or_ln120_26_fu_333_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_33_fu_462_p3 <= 
        select_ln120_32_reg_786 when (or_ln120_27_fu_438_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_34_fu_473_p3 <= 
        zext_ln120_8_fu_469_p1 when (or_ln120_28_reg_777(0) = '1') else 
        ap_const_lv4_8;
    select_ln120_35_fu_480_p3 <= 
        select_ln120_34_fu_473_p3 when (or_ln120_29_fu_443_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln120_36_fu_488_p3 <= 
        select_ln120_35_fu_480_p3 when (or_ln120_30_fu_448_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln120_37_fu_496_p3 <= 
        select_ln120_36_fu_488_p3 when (or_ln120_31_fu_452_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln120_38_fu_504_p3 <= 
        select_ln120_37_fu_496_p3 when (or_ln120_32_fu_458_p2(0) = '1') else 
        ap_const_lv4_C;
    select_ln120_39_fu_531_p3 <= 
        select_ln120_38_reg_803 when (or_ln120_33_fu_521_p2(0) = '1') else 
        ap_const_lv4_D;
    select_ln120_40_fu_538_p3 <= 
        select_ln120_39_fu_531_p3 when (or_ln120_34_fu_526_p2(0) = '1') else 
        ap_const_lv4_E;
    select_ln120_42_fu_649_p3 <= 
        tmp_fu_577_p35 when (or_ln120_36_fu_566_p2(0) = '1') else 
        ap_const_lv11_0;
    select_ln120_fu_352_p3 <= 
        zext_ln120_fu_348_p1 when (and_ln105_38_reg_747(0) = '1') else 
        ap_const_lv2_2;
    tmp_fu_577_p33 <= "XXXXXXXXXXX";
    tmp_fu_577_p34 <= 
        select_ln120_40_reg_813 when (or_ln120_35_fu_561_p2(0) = '1') else 
        ap_const_lv4_F;
    xor_ln107_15_fu_262_p2 <= (icmp_ln4_32_fu_178_p2 xor ap_const_lv1_1);
    xor_ln107_16_fu_394_p2 <= (icmp_ln4_33_reg_671_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_17_fu_290_p2 <= (icmp_ln4_34_reg_677 xor ap_const_lv1_1);
    xor_ln107_18_fu_404_p2 <= (icmp_ln4_35_reg_682_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_19_fu_409_p2 <= (icmp_ln4_36_reg_688_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_20_fu_546_p2 <= (icmp_ln4_37_reg_694_pp0_iter3_reg xor ap_const_lv1_1);
    xor_ln107_fu_280_p2 <= (icmp_ln4_reg_657 xor ap_const_lv1_1);
    xor_ln120_fu_342_p2 <= (ap_const_lv1_1 xor and_ln105_42_fu_304_p2);
    zext_ln120_7_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_29_fu_359_p3),3));
    zext_ln120_8_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_33_fu_462_p3),4));
    zext_ln120_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln120_fu_342_p2),2));
end behav;
