// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_10 (
        ap_clk,
        ap_rst,
        x_0_val,
        x_1_val,
        x_3_val,
        x_4_val,
        x_5_val,
        x_6_val,
        x_8_val,
        x_9_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] x_0_val;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_180_p2;
reg   [0:0] icmp_ln4_reg_645;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln4_reg_645_pp0_iter1_reg;
wire   [0:0] icmp_ln4_124_fu_186_p2;
reg   [0:0] icmp_ln4_124_reg_654;
wire   [0:0] icmp_ln4_125_fu_192_p2;
reg   [0:0] icmp_ln4_125_reg_659;
wire   [0:0] icmp_ln4_126_fu_198_p2;
reg   [0:0] icmp_ln4_126_reg_665;
wire   [0:0] icmp_ln4_127_fu_204_p2;
reg   [0:0] icmp_ln4_127_reg_671;
reg   [0:0] icmp_ln4_127_reg_671_pp0_iter1_reg;
wire   [0:0] icmp_ln4_128_fu_210_p2;
reg   [0:0] icmp_ln4_128_reg_678;
reg   [0:0] icmp_ln4_128_reg_678_pp0_iter1_reg;
wire   [0:0] icmp_ln4_129_fu_216_p2;
reg   [0:0] icmp_ln4_129_reg_684;
reg   [0:0] icmp_ln4_129_reg_684_pp0_iter1_reg;
reg   [0:0] icmp_ln4_129_reg_684_pp0_iter2_reg;
wire   [0:0] icmp_ln4_130_fu_222_p2;
reg   [0:0] icmp_ln4_130_reg_690;
wire   [0:0] icmp_ln4_131_fu_228_p2;
reg   [0:0] icmp_ln4_131_reg_695;
wire   [0:0] icmp_ln4_132_fu_234_p2;
reg   [0:0] icmp_ln4_132_reg_700;
reg   [0:0] icmp_ln4_132_reg_700_pp0_iter1_reg;
wire   [0:0] icmp_ln4_133_fu_240_p2;
reg   [0:0] icmp_ln4_133_reg_705;
reg   [0:0] icmp_ln4_133_reg_705_pp0_iter1_reg;
wire   [0:0] icmp_ln4_134_fu_246_p2;
reg   [0:0] icmp_ln4_134_reg_710;
reg   [0:0] icmp_ln4_134_reg_710_pp0_iter1_reg;
wire   [0:0] icmp_ln4_135_fu_252_p2;
reg   [0:0] icmp_ln4_135_reg_715;
reg   [0:0] icmp_ln4_135_reg_715_pp0_iter1_reg;
reg   [0:0] icmp_ln4_135_reg_715_pp0_iter2_reg;
wire   [0:0] icmp_ln4_136_fu_258_p2;
reg   [0:0] icmp_ln4_136_reg_720;
reg   [0:0] icmp_ln4_136_reg_720_pp0_iter1_reg;
reg   [0:0] icmp_ln4_136_reg_720_pp0_iter2_reg;
wire   [0:0] and_ln105_fu_264_p2;
reg   [0:0] and_ln105_reg_725;
wire   [0:0] and_ln107_fu_276_p2;
reg   [0:0] and_ln107_reg_732;
reg   [0:0] and_ln107_reg_732_pp0_iter1_reg;
wire   [0:0] and_ln105_112_fu_287_p2;
reg   [0:0] and_ln105_112_reg_738;
wire   [0:0] and_ln107_12_fu_297_p2;
reg   [0:0] and_ln107_12_reg_744;
reg   [0:0] and_ln107_12_reg_744_pp0_iter2_reg;
wire   [0:0] and_ln105_115_fu_322_p2;
reg   [0:0] and_ln105_115_reg_750;
wire   [0:0] or_ln120_104_fu_360_p2;
reg   [0:0] or_ln120_104_reg_756;
wire   [2:0] select_ln120_118_fu_399_p3;
reg   [2:0] select_ln120_118_reg_762;
wire   [0:0] and_ln105_116_fu_412_p2;
reg   [0:0] and_ln105_116_reg_767;
wire   [0:0] or_ln120_109_fu_459_p2;
reg   [0:0] or_ln120_109_reg_772;
wire   [0:0] or_ln120_111_fu_463_p2;
reg   [0:0] or_ln120_111_reg_777;
wire   [3:0] select_ln120_125_fu_518_p3;
reg   [3:0] select_ln120_125_reg_783;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_56_fu_270_p2;
wire   [0:0] xor_ln107_fu_282_p2;
wire   [0:0] xor_ln107_57_fu_292_p2;
wire   [0:0] xor_ln107_59_fu_312_p2;
wire   [0:0] and_ln105_113_fu_303_p2;
wire   [0:0] xor_ln107_58_fu_307_p2;
wire   [0:0] and_ln105_124_fu_332_p2;
wire   [0:0] and_ln107_13_fu_317_p2;
wire   [0:0] and_ln105_117_fu_327_p2;
wire   [0:0] or_ln120_102_fu_348_p2;
wire   [0:0] and_ln105_118_fu_337_p2;
wire   [0:0] or_ln120_113_fu_365_p2;
wire   [0:0] or_ln120_114_fu_370_p2;
wire   [0:0] or_ln120_fu_342_p2;
wire   [1:0] zext_ln120_fu_375_p1;
wire   [1:0] select_ln120_fu_379_p3;
wire   [1:0] select_ln120_117_fu_387_p3;
wire   [0:0] or_ln120_103_fu_354_p2;
wire   [2:0] zext_ln120_21_fu_395_p1;
wire   [0:0] and_ln105_125_fu_416_p2;
wire   [0:0] xor_ln107_60_fu_407_p2;
wire   [0:0] and_ln105_126_fu_429_p2;
wire   [0:0] and_ln105_119_fu_420_p2;
wire   [0:0] and_ln105_120_fu_425_p2;
wire   [0:0] or_ln120_107_fu_449_p2;
wire   [0:0] and_ln105_121_fu_434_p2;
wire   [0:0] or_ln120_105_fu_439_p2;
wire   [2:0] select_ln120_119_fu_469_p3;
wire   [2:0] select_ln120_120_fu_475_p3;
wire   [2:0] select_ln120_121_fu_483_p3;
wire   [0:0] or_ln120_106_fu_444_p2;
wire   [3:0] zext_ln120_22_fu_490_p1;
wire   [3:0] select_ln120_122_fu_494_p3;
wire   [0:0] or_ln120_108_fu_453_p2;
wire   [3:0] select_ln120_123_fu_502_p3;
wire   [3:0] select_ln120_124_fu_510_p3;
wire   [0:0] xor_ln107_61_fu_526_p2;
wire   [0:0] and_ln105_127_fu_535_p2;
wire   [0:0] and_ln105_122_fu_531_p2;
wire   [0:0] and_ln105_123_fu_540_p2;
wire   [0:0] or_ln120_110_fu_545_p2;
wire   [3:0] select_ln120_126_fu_555_p3;
wire   [0:0] or_ln120_112_fu_550_p2;
wire   [3:0] select_ln120_127_fu_562_p3;
wire   [10:0] agg_result_fu_577_p31;
wire   [3:0] agg_result_fu_577_p32;
wire   [10:0] agg_result_fu_577_p33;
reg    ap_ce_reg;
reg   [17:0] x_0_val_int_reg;
reg   [17:0] x_1_val_int_reg;
reg   [17:0] x_3_val_int_reg;
reg   [17:0] x_4_val_int_reg;
reg   [17:0] x_5_val_int_reg;
reg   [17:0] x_6_val_int_reg;
reg   [17:0] x_8_val_int_reg;
reg   [17:0] x_9_val_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] agg_result_fu_577_p1;
wire   [3:0] agg_result_fu_577_p3;
wire   [3:0] agg_result_fu_577_p5;
wire   [3:0] agg_result_fu_577_p7;
wire   [3:0] agg_result_fu_577_p9;
wire   [3:0] agg_result_fu_577_p11;
wire   [3:0] agg_result_fu_577_p13;
wire   [3:0] agg_result_fu_577_p15;
wire  signed [3:0] agg_result_fu_577_p17;
wire  signed [3:0] agg_result_fu_577_p19;
wire  signed [3:0] agg_result_fu_577_p21;
wire  signed [3:0] agg_result_fu_577_p23;
wire  signed [3:0] agg_result_fu_577_p25;
wire  signed [3:0] agg_result_fu_577_p27;
wire  signed [3:0] agg_result_fu_577_p29;

my_prj_sparsemux_31_4_11_1_0_x1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_31_4_11_1_0_x1_U147(
    .din0(11'd1774),
    .din1(11'd1829),
    .din2(11'd615),
    .din3(11'd26),
    .din4(11'd1843),
    .din5(11'd2003),
    .din6(11'd790),
    .din7(11'd1840),
    .din8(11'd1450),
    .din9(11'd44),
    .din10(11'd1734),
    .din11(11'd295),
    .din12(11'd51),
    .din13(11'd71),
    .din14(11'd1541),
    .def(agg_result_fu_577_p31),
    .sel(agg_result_fu_577_p32),
    .dout(agg_result_fu_577_p33)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_112_reg_738 <= and_ln105_112_fu_287_p2;
        and_ln105_115_reg_750 <= and_ln105_115_fu_322_p2;
        and_ln105_116_reg_767 <= and_ln105_116_fu_412_p2;
        and_ln105_reg_725 <= and_ln105_fu_264_p2;
        and_ln107_12_reg_744 <= and_ln107_12_fu_297_p2;
        and_ln107_12_reg_744_pp0_iter2_reg <= and_ln107_12_reg_744;
        and_ln107_reg_732 <= and_ln107_fu_276_p2;
        and_ln107_reg_732_pp0_iter1_reg <= and_ln107_reg_732;
        icmp_ln4_124_reg_654 <= icmp_ln4_124_fu_186_p2;
        icmp_ln4_125_reg_659 <= icmp_ln4_125_fu_192_p2;
        icmp_ln4_126_reg_665 <= icmp_ln4_126_fu_198_p2;
        icmp_ln4_127_reg_671 <= icmp_ln4_127_fu_204_p2;
        icmp_ln4_127_reg_671_pp0_iter1_reg <= icmp_ln4_127_reg_671;
        icmp_ln4_128_reg_678 <= icmp_ln4_128_fu_210_p2;
        icmp_ln4_128_reg_678_pp0_iter1_reg <= icmp_ln4_128_reg_678;
        icmp_ln4_129_reg_684 <= icmp_ln4_129_fu_216_p2;
        icmp_ln4_129_reg_684_pp0_iter1_reg <= icmp_ln4_129_reg_684;
        icmp_ln4_129_reg_684_pp0_iter2_reg <= icmp_ln4_129_reg_684_pp0_iter1_reg;
        icmp_ln4_130_reg_690 <= icmp_ln4_130_fu_222_p2;
        icmp_ln4_131_reg_695 <= icmp_ln4_131_fu_228_p2;
        icmp_ln4_132_reg_700 <= icmp_ln4_132_fu_234_p2;
        icmp_ln4_132_reg_700_pp0_iter1_reg <= icmp_ln4_132_reg_700;
        icmp_ln4_133_reg_705 <= icmp_ln4_133_fu_240_p2;
        icmp_ln4_133_reg_705_pp0_iter1_reg <= icmp_ln4_133_reg_705;
        icmp_ln4_134_reg_710 <= icmp_ln4_134_fu_246_p2;
        icmp_ln4_134_reg_710_pp0_iter1_reg <= icmp_ln4_134_reg_710;
        icmp_ln4_135_reg_715 <= icmp_ln4_135_fu_252_p2;
        icmp_ln4_135_reg_715_pp0_iter1_reg <= icmp_ln4_135_reg_715;
        icmp_ln4_135_reg_715_pp0_iter2_reg <= icmp_ln4_135_reg_715_pp0_iter1_reg;
        icmp_ln4_136_reg_720 <= icmp_ln4_136_fu_258_p2;
        icmp_ln4_136_reg_720_pp0_iter1_reg <= icmp_ln4_136_reg_720;
        icmp_ln4_136_reg_720_pp0_iter2_reg <= icmp_ln4_136_reg_720_pp0_iter1_reg;
        icmp_ln4_reg_645 <= icmp_ln4_fu_180_p2;
        icmp_ln4_reg_645_pp0_iter1_reg <= icmp_ln4_reg_645;
        or_ln120_104_reg_756 <= or_ln120_104_fu_360_p2;
        or_ln120_109_reg_772 <= or_ln120_109_fu_459_p2;
        or_ln120_111_reg_777 <= or_ln120_111_fu_463_p2;
        select_ln120_118_reg_762 <= select_ln120_118_fu_399_p3;
        select_ln120_125_reg_783 <= select_ln120_125_fu_518_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_577_p33;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        x_0_val_int_reg <= x_0_val;
        x_1_val_int_reg <= x_1_val;
        x_3_val_int_reg <= x_3_val;
        x_4_val_int_reg <= x_4_val;
        x_5_val_int_reg <= x_5_val;
        x_6_val_int_reg <= x_6_val;
        x_8_val_int_reg <= x_8_val;
        x_9_val_int_reg <= x_9_val;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_577_p33;
    end else begin
        ap_return = 'bx;
    end
end

assign agg_result_fu_577_p31 = 'bx;

assign agg_result_fu_577_p32 = ((or_ln120_112_fu_550_p2[0:0] == 1'b1) ? select_ln120_127_fu_562_p3 : 4'd14);

assign and_ln105_112_fu_287_p2 = (xor_ln107_fu_282_p2 & icmp_ln4_125_reg_659);

assign and_ln105_113_fu_303_p2 = (icmp_ln4_126_reg_665 & and_ln105_reg_725);

assign and_ln105_115_fu_322_p2 = (icmp_ln4_128_reg_678 & and_ln105_112_fu_287_p2);

assign and_ln105_116_fu_412_p2 = (icmp_ln4_129_reg_684_pp0_iter1_reg & and_ln107_12_reg_744);

assign and_ln105_117_fu_327_p2 = (icmp_ln4_130_reg_690 & and_ln105_113_fu_303_p2);

assign and_ln105_118_fu_337_p2 = (and_ln105_reg_725 & and_ln105_124_fu_332_p2);

assign and_ln105_119_fu_420_p2 = (icmp_ln4_127_reg_671_pp0_iter1_reg & and_ln105_125_fu_416_p2);

assign and_ln105_120_fu_425_p2 = (icmp_ln4_133_reg_705_pp0_iter1_reg & and_ln105_115_reg_750);

assign and_ln105_121_fu_434_p2 = (and_ln105_126_fu_429_p2 & and_ln105_112_reg_738);

assign and_ln105_122_fu_531_p2 = (icmp_ln4_135_reg_715_pp0_iter2_reg & and_ln105_116_reg_767);

assign and_ln105_123_fu_540_p2 = (and_ln107_12_reg_744_pp0_iter2_reg & and_ln105_127_fu_535_p2);

assign and_ln105_124_fu_332_p2 = (xor_ln107_58_fu_307_p2 & icmp_ln4_131_reg_695);

assign and_ln105_125_fu_416_p2 = (icmp_ln4_132_reg_700_pp0_iter1_reg & and_ln107_reg_732_pp0_iter1_reg);

assign and_ln105_126_fu_429_p2 = (xor_ln107_60_fu_407_p2 & icmp_ln4_134_reg_710_pp0_iter1_reg);

assign and_ln105_127_fu_535_p2 = (xor_ln107_61_fu_526_p2 & icmp_ln4_136_reg_720_pp0_iter2_reg);

assign and_ln105_fu_264_p2 = (icmp_ln4_fu_180_p2 & icmp_ln4_124_fu_186_p2);

assign and_ln107_12_fu_297_p2 = (xor_ln107_fu_282_p2 & xor_ln107_57_fu_292_p2);

assign and_ln107_13_fu_317_p2 = (xor_ln107_59_fu_312_p2 & and_ln107_reg_732);

assign and_ln107_fu_276_p2 = (xor_ln107_56_fu_270_p2 & icmp_ln4_fu_180_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_124_fu_186_p2 = (($signed(x_6_val_int_reg) < $signed(18'd61440)) ? 1'b1 : 1'b0);

assign icmp_ln4_125_fu_192_p2 = (($signed(x_1_val_int_reg) < $signed(18'd26496)) ? 1'b1 : 1'b0);

assign icmp_ln4_126_fu_198_p2 = (($signed(x_0_val_int_reg) < $signed(18'd2176)) ? 1'b1 : 1'b0);

assign icmp_ln4_127_fu_204_p2 = (($signed(x_3_val_int_reg) < $signed(18'd95256)) ? 1'b1 : 1'b0);

assign icmp_ln4_128_fu_210_p2 = (($signed(x_5_val_int_reg) < $signed(18'd2527)) ? 1'b1 : 1'b0);

assign icmp_ln4_129_fu_216_p2 = (($signed(x_9_val_int_reg) < $signed(18'd136)) ? 1'b1 : 1'b0);

assign icmp_ln4_130_fu_222_p2 = (($signed(x_5_val_int_reg) < $signed(18'd3322)) ? 1'b1 : 1'b0);

assign icmp_ln4_131_fu_228_p2 = (($signed(x_6_val_int_reg) < $signed(18'd22144)) ? 1'b1 : 1'b0);

assign icmp_ln4_132_fu_234_p2 = (($signed(x_3_val_int_reg) < $signed(18'd75470)) ? 1'b1 : 1'b0);

assign icmp_ln4_133_fu_240_p2 = (($signed(x_8_val_int_reg) < $signed(18'd316)) ? 1'b1 : 1'b0);

assign icmp_ln4_134_fu_246_p2 = (($signed(x_3_val_int_reg) < $signed(18'd86876)) ? 1'b1 : 1'b0);

assign icmp_ln4_135_fu_252_p2 = (($signed(x_6_val_int_reg) < $signed(18'd44160)) ? 1'b1 : 1'b0);

assign icmp_ln4_136_fu_258_p2 = (($signed(x_4_val_int_reg) < $signed(18'd868)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_180_p2 = (($signed(x_0_val_int_reg) < $signed(18'd3456)) ? 1'b1 : 1'b0);

assign or_ln120_102_fu_348_p2 = (and_ln107_13_fu_317_p2 | and_ln105_113_fu_303_p2);

assign or_ln120_103_fu_354_p2 = (or_ln120_102_fu_348_p2 | and_ln105_118_fu_337_p2);

assign or_ln120_104_fu_360_p2 = (and_ln107_13_fu_317_p2 | and_ln105_reg_725);

assign or_ln120_105_fu_439_p2 = (or_ln120_104_reg_756 | and_ln105_119_fu_420_p2);

assign or_ln120_106_fu_444_p2 = (icmp_ln4_reg_645_pp0_iter1_reg | and_ln105_120_fu_425_p2);

assign or_ln120_107_fu_449_p2 = (icmp_ln4_reg_645_pp0_iter1_reg | and_ln105_115_reg_750);

assign or_ln120_108_fu_453_p2 = (or_ln120_107_fu_449_p2 | and_ln105_121_fu_434_p2);

assign or_ln120_109_fu_459_p2 = (icmp_ln4_reg_645_pp0_iter1_reg | and_ln105_112_reg_738);

assign or_ln120_110_fu_545_p2 = (or_ln120_109_reg_772 | and_ln105_122_fu_531_p2);

assign or_ln120_111_fu_463_p2 = (or_ln120_109_fu_459_p2 | and_ln105_116_fu_412_p2);

assign or_ln120_112_fu_550_p2 = (or_ln120_111_reg_777 | and_ln105_123_fu_540_p2);

assign or_ln120_113_fu_365_p2 = (xor_ln107_fu_282_p2 | icmp_ln4_124_reg_654);

assign or_ln120_114_fu_370_p2 = (or_ln120_113_fu_365_p2 | icmp_ln4_127_reg_671);

assign or_ln120_fu_342_p2 = (and_ln107_13_fu_317_p2 | and_ln105_117_fu_327_p2);

assign select_ln120_117_fu_387_p3 = ((or_ln120_102_fu_348_p2[0:0] == 1'b1) ? select_ln120_fu_379_p3 : 2'd3);

assign select_ln120_118_fu_399_p3 = ((or_ln120_103_fu_354_p2[0:0] == 1'b1) ? zext_ln120_21_fu_395_p1 : 3'd4);

assign select_ln120_119_fu_469_p3 = ((or_ln120_104_reg_756[0:0] == 1'b1) ? select_ln120_118_reg_762 : 3'd5);

assign select_ln120_120_fu_475_p3 = ((or_ln120_105_fu_439_p2[0:0] == 1'b1) ? select_ln120_119_fu_469_p3 : 3'd6);

assign select_ln120_121_fu_483_p3 = ((icmp_ln4_reg_645_pp0_iter1_reg[0:0] == 1'b1) ? select_ln120_120_fu_475_p3 : 3'd7);

assign select_ln120_122_fu_494_p3 = ((or_ln120_106_fu_444_p2[0:0] == 1'b1) ? zext_ln120_22_fu_490_p1 : 4'd8);

assign select_ln120_123_fu_502_p3 = ((or_ln120_107_fu_449_p2[0:0] == 1'b1) ? select_ln120_122_fu_494_p3 : 4'd9);

assign select_ln120_124_fu_510_p3 = ((or_ln120_108_fu_453_p2[0:0] == 1'b1) ? select_ln120_123_fu_502_p3 : 4'd10);

assign select_ln120_125_fu_518_p3 = ((or_ln120_109_fu_459_p2[0:0] == 1'b1) ? select_ln120_124_fu_510_p3 : 4'd11);

assign select_ln120_126_fu_555_p3 = ((or_ln120_110_fu_545_p2[0:0] == 1'b1) ? select_ln120_125_reg_783 : 4'd12);

assign select_ln120_127_fu_562_p3 = ((or_ln120_111_reg_777[0:0] == 1'b1) ? select_ln120_126_fu_555_p3 : 4'd13);

assign select_ln120_fu_379_p3 = ((or_ln120_fu_342_p2[0:0] == 1'b1) ? zext_ln120_fu_375_p1 : 2'd2);

assign xor_ln107_56_fu_270_p2 = (icmp_ln4_124_fu_186_p2 ^ 1'd1);

assign xor_ln107_57_fu_292_p2 = (icmp_ln4_125_reg_659 ^ 1'd1);

assign xor_ln107_58_fu_307_p2 = (icmp_ln4_126_reg_665 ^ 1'd1);

assign xor_ln107_59_fu_312_p2 = (icmp_ln4_127_reg_671 ^ 1'd1);

assign xor_ln107_60_fu_407_p2 = (icmp_ln4_128_reg_678_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_61_fu_526_p2 = (icmp_ln4_129_reg_684_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_fu_282_p2 = (icmp_ln4_reg_645 ^ 1'd1);

assign zext_ln120_21_fu_395_p1 = select_ln120_117_fu_387_p3;

assign zext_ln120_22_fu_490_p1 = select_ln120_121_fu_483_p3;

assign zext_ln120_fu_375_p1 = or_ln120_114_fu_370_p2;

endmodule //my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_10
