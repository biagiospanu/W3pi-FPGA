// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_s (
        ap_clk,
        ap_rst,
        x_0_val,
        x_2_val,
        x_3_val,
        x_4_val,
        x_5_val,
        x_8_val,
        x_9_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] x_0_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_5_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_162_p2;
reg   [0:0] icmp_ln4_reg_559;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln4_1_fu_168_p2;
reg   [0:0] icmp_ln4_1_reg_565;
reg   [0:0] icmp_ln4_1_reg_565_pp0_iter1_reg;
wire   [0:0] icmp_ln4_2_fu_174_p2;
reg   [0:0] icmp_ln4_2_reg_573;
reg   [0:0] icmp_ln4_2_reg_573_pp0_iter1_reg;
wire   [0:0] icmp_ln4_3_fu_180_p2;
reg   [0:0] icmp_ln4_3_reg_579;
reg   [0:0] icmp_ln4_3_reg_579_pp0_iter1_reg;
wire   [0:0] icmp_ln4_4_fu_186_p2;
reg   [0:0] icmp_ln4_4_reg_585;
reg   [0:0] icmp_ln4_4_reg_585_pp0_iter1_reg;
reg   [0:0] icmp_ln4_4_reg_585_pp0_iter2_reg;
wire   [0:0] icmp_ln4_5_fu_192_p2;
reg   [0:0] icmp_ln4_5_reg_591;
reg   [0:0] icmp_ln4_5_reg_591_pp0_iter1_reg;
reg   [0:0] icmp_ln4_5_reg_591_pp0_iter2_reg;
reg   [0:0] icmp_ln4_5_reg_591_pp0_iter3_reg;
wire   [0:0] icmp_ln4_6_fu_198_p2;
reg   [0:0] icmp_ln4_6_reg_597;
reg   [0:0] icmp_ln4_6_reg_597_pp0_iter1_reg;
wire   [0:0] icmp_ln4_7_fu_204_p2;
reg   [0:0] icmp_ln4_7_reg_602;
reg   [0:0] icmp_ln4_7_reg_602_pp0_iter1_reg;
wire   [0:0] icmp_ln4_8_fu_210_p2;
reg   [0:0] icmp_ln4_8_reg_607;
reg   [0:0] icmp_ln4_8_reg_607_pp0_iter1_reg;
reg   [0:0] icmp_ln4_8_reg_607_pp0_iter2_reg;
wire   [0:0] icmp_ln4_9_fu_216_p2;
reg   [0:0] icmp_ln4_9_reg_612;
reg   [0:0] icmp_ln4_9_reg_612_pp0_iter1_reg;
reg   [0:0] icmp_ln4_9_reg_612_pp0_iter2_reg;
wire   [0:0] icmp_ln4_10_fu_222_p2;
reg   [0:0] icmp_ln4_10_reg_617;
reg   [0:0] icmp_ln4_10_reg_617_pp0_iter1_reg;
reg   [0:0] icmp_ln4_10_reg_617_pp0_iter2_reg;
wire   [0:0] icmp_ln4_11_fu_228_p2;
reg   [0:0] icmp_ln4_11_reg_622;
reg   [0:0] icmp_ln4_11_reg_622_pp0_iter1_reg;
reg   [0:0] icmp_ln4_11_reg_622_pp0_iter2_reg;
reg   [0:0] icmp_ln4_11_reg_622_pp0_iter3_reg;
wire   [0:0] xor_ln107_fu_234_p2;
reg   [0:0] xor_ln107_reg_627;
reg   [0:0] xor_ln107_reg_627_pp0_iter2_reg;
reg   [0:0] xor_ln107_reg_627_pp0_iter3_reg;
wire   [0:0] xor_ln107_1_fu_239_p2;
reg   [0:0] xor_ln107_1_reg_634;
wire   [0:0] and_ln107_fu_244_p2;
reg   [0:0] and_ln107_reg_639;
wire   [0:0] and_ln105_1_fu_249_p2;
reg   [0:0] and_ln105_1_reg_645;
wire   [0:0] and_ln105_fu_254_p2;
reg   [0:0] and_ln105_reg_651;
wire   [0:0] and_ln107_1_fu_263_p2;
reg   [0:0] and_ln107_1_reg_657;
reg   [0:0] and_ln107_1_reg_657_pp0_iter3_reg;
wire   [0:0] and_ln105_2_fu_273_p2;
reg   [0:0] and_ln105_2_reg_663;
wire   [0:0] or_ln120_3_fu_307_p2;
reg   [0:0] or_ln120_3_reg_668;
reg   [0:0] or_ln120_3_reg_668_pp0_iter3_reg;
wire   [0:0] or_ln120_5_fu_311_p2;
reg   [0:0] or_ln120_5_reg_675;
wire   [2:0] select_ln120_3_fu_348_p3;
reg   [2:0] select_ln120_3_reg_681;
wire   [0:0] or_ln120_9_fu_404_p2;
reg   [0:0] or_ln120_9_reg_686;
wire   [3:0] select_ln120_9_fu_452_p3;
reg   [3:0] select_ln120_9_reg_691;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_2_fu_258_p2;
wire   [0:0] xor_ln107_3_fu_268_p2;
wire   [0:0] and_ln105_10_fu_282_p2;
wire   [0:0] and_ln105_4_fu_278_p2;
wire   [0:0] or_ln120_1_fu_297_p2;
wire   [0:0] and_ln105_5_fu_287_p2;
wire   [0:0] or_ln120_fu_292_p2;
wire   [1:0] zext_ln120_fu_317_p1;
wire   [1:0] select_ln120_fu_320_p3;
wire   [1:0] select_ln120_1_fu_328_p3;
wire   [0:0] or_ln120_2_fu_301_p2;
wire   [2:0] zext_ln120_1_fu_336_p1;
wire   [2:0] select_ln120_2_fu_340_p3;
wire   [0:0] xor_ln107_4_fu_356_p2;
wire   [0:0] and_ln105_11_fu_369_p2;
wire   [0:0] and_ln105_3_fu_361_p2;
wire   [0:0] and_ln105_6_fu_365_p2;
wire   [0:0] and_ln105_7_fu_374_p2;
wire   [0:0] or_ln120_7_fu_394_p2;
wire   [0:0] and_ln105_8_fu_379_p2;
wire   [0:0] or_ln120_4_fu_384_p2;
wire   [2:0] select_ln120_4_fu_410_p3;
wire   [2:0] select_ln120_5_fu_417_p3;
wire   [0:0] or_ln120_6_fu_389_p2;
wire   [3:0] zext_ln120_2_fu_424_p1;
wire   [3:0] select_ln120_6_fu_428_p3;
wire   [0:0] or_ln120_8_fu_398_p2;
wire   [3:0] select_ln120_7_fu_436_p3;
wire   [3:0] select_ln120_8_fu_444_p3;
wire   [0:0] xor_ln107_5_fu_460_p2;
wire   [0:0] and_ln105_12_fu_465_p2;
wire   [0:0] and_ln105_9_fu_470_p2;
wire   [0:0] or_ln120_10_fu_475_p2;
wire   [10:0] tmp_fu_491_p27;
wire   [3:0] tmp_fu_491_p28;
wire   [0:0] or_ln120_11_fu_480_p2;
wire   [10:0] tmp_fu_491_p29;
wire   [10:0] select_ln120_11_fu_551_p3;
reg    ap_ce_reg;
reg   [17:0] x_0_val_int_reg;
reg   [17:0] x_2_val_int_reg;
reg   [17:0] x_3_val_int_reg;
reg   [17:0] x_4_val_int_reg;
reg   [17:0] x_5_val_int_reg;
reg   [17:0] x_8_val_int_reg;
reg   [17:0] x_9_val_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] tmp_fu_491_p1;
wire   [3:0] tmp_fu_491_p3;
wire   [3:0] tmp_fu_491_p5;
wire   [3:0] tmp_fu_491_p7;
wire   [3:0] tmp_fu_491_p9;
wire   [3:0] tmp_fu_491_p11;
wire   [3:0] tmp_fu_491_p13;
wire   [3:0] tmp_fu_491_p15;
wire  signed [3:0] tmp_fu_491_p17;
wire  signed [3:0] tmp_fu_491_p19;
wire  signed [3:0] tmp_fu_491_p21;
wire  signed [3:0] tmp_fu_491_p23;
wire  signed [3:0] tmp_fu_491_p25;

my_prj_sparsemux_27_4_11_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_27_4_11_1_0_U83(
    .din0(11'd1437),
    .din1(11'd2041),
    .din2(11'd1609),
    .din3(11'd555),
    .din4(11'd1720),
    .din5(11'd1552),
    .din6(11'd1812),
    .din7(11'd71),
    .din8(11'd1433),
    .din9(11'd311),
    .din10(11'd1948),
    .din11(11'd1865),
    .din12(11'd79),
    .def(tmp_fu_491_p27),
    .sel(tmp_fu_491_p28),
    .dout(tmp_fu_491_p29)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_1_reg_645 <= and_ln105_1_fu_249_p2;
        and_ln105_2_reg_663 <= and_ln105_2_fu_273_p2;
        and_ln105_reg_651 <= and_ln105_fu_254_p2;
        and_ln107_1_reg_657 <= and_ln107_1_fu_263_p2;
        and_ln107_1_reg_657_pp0_iter3_reg <= and_ln107_1_reg_657;
        and_ln107_reg_639 <= and_ln107_fu_244_p2;
        icmp_ln4_10_reg_617 <= icmp_ln4_10_fu_222_p2;
        icmp_ln4_10_reg_617_pp0_iter1_reg <= icmp_ln4_10_reg_617;
        icmp_ln4_10_reg_617_pp0_iter2_reg <= icmp_ln4_10_reg_617_pp0_iter1_reg;
        icmp_ln4_11_reg_622 <= icmp_ln4_11_fu_228_p2;
        icmp_ln4_11_reg_622_pp0_iter1_reg <= icmp_ln4_11_reg_622;
        icmp_ln4_11_reg_622_pp0_iter2_reg <= icmp_ln4_11_reg_622_pp0_iter1_reg;
        icmp_ln4_11_reg_622_pp0_iter3_reg <= icmp_ln4_11_reg_622_pp0_iter2_reg;
        icmp_ln4_1_reg_565 <= icmp_ln4_1_fu_168_p2;
        icmp_ln4_1_reg_565_pp0_iter1_reg <= icmp_ln4_1_reg_565;
        icmp_ln4_2_reg_573 <= icmp_ln4_2_fu_174_p2;
        icmp_ln4_2_reg_573_pp0_iter1_reg <= icmp_ln4_2_reg_573;
        icmp_ln4_3_reg_579 <= icmp_ln4_3_fu_180_p2;
        icmp_ln4_3_reg_579_pp0_iter1_reg <= icmp_ln4_3_reg_579;
        icmp_ln4_4_reg_585 <= icmp_ln4_4_fu_186_p2;
        icmp_ln4_4_reg_585_pp0_iter1_reg <= icmp_ln4_4_reg_585;
        icmp_ln4_4_reg_585_pp0_iter2_reg <= icmp_ln4_4_reg_585_pp0_iter1_reg;
        icmp_ln4_5_reg_591 <= icmp_ln4_5_fu_192_p2;
        icmp_ln4_5_reg_591_pp0_iter1_reg <= icmp_ln4_5_reg_591;
        icmp_ln4_5_reg_591_pp0_iter2_reg <= icmp_ln4_5_reg_591_pp0_iter1_reg;
        icmp_ln4_5_reg_591_pp0_iter3_reg <= icmp_ln4_5_reg_591_pp0_iter2_reg;
        icmp_ln4_6_reg_597 <= icmp_ln4_6_fu_198_p2;
        icmp_ln4_6_reg_597_pp0_iter1_reg <= icmp_ln4_6_reg_597;
        icmp_ln4_7_reg_602 <= icmp_ln4_7_fu_204_p2;
        icmp_ln4_7_reg_602_pp0_iter1_reg <= icmp_ln4_7_reg_602;
        icmp_ln4_8_reg_607 <= icmp_ln4_8_fu_210_p2;
        icmp_ln4_8_reg_607_pp0_iter1_reg <= icmp_ln4_8_reg_607;
        icmp_ln4_8_reg_607_pp0_iter2_reg <= icmp_ln4_8_reg_607_pp0_iter1_reg;
        icmp_ln4_9_reg_612 <= icmp_ln4_9_fu_216_p2;
        icmp_ln4_9_reg_612_pp0_iter1_reg <= icmp_ln4_9_reg_612;
        icmp_ln4_9_reg_612_pp0_iter2_reg <= icmp_ln4_9_reg_612_pp0_iter1_reg;
        icmp_ln4_reg_559 <= icmp_ln4_fu_162_p2;
        or_ln120_3_reg_668 <= or_ln120_3_fu_307_p2;
        or_ln120_3_reg_668_pp0_iter3_reg <= or_ln120_3_reg_668;
        or_ln120_5_reg_675 <= or_ln120_5_fu_311_p2;
        or_ln120_9_reg_686 <= or_ln120_9_fu_404_p2;
        select_ln120_3_reg_681 <= select_ln120_3_fu_348_p3;
        select_ln120_9_reg_691 <= select_ln120_9_fu_452_p3;
        xor_ln107_1_reg_634 <= xor_ln107_1_fu_239_p2;
        xor_ln107_reg_627 <= xor_ln107_fu_234_p2;
        xor_ln107_reg_627_pp0_iter2_reg <= xor_ln107_reg_627;
        xor_ln107_reg_627_pp0_iter3_reg <= xor_ln107_reg_627_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln120_11_fu_551_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        x_0_val_int_reg <= x_0_val;
        x_2_val_int_reg <= x_2_val;
        x_3_val_int_reg <= x_3_val;
        x_4_val_int_reg <= x_4_val;
        x_5_val_int_reg <= x_5_val;
        x_8_val_int_reg <= x_8_val;
        x_9_val_int_reg <= x_9_val;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln120_11_fu_551_p3;
    end else begin
        ap_return = 'bx;
    end
end

assign and_ln105_10_fu_282_p2 = (xor_ln107_3_fu_268_p2 & icmp_ln4_7_reg_602_pp0_iter1_reg);

assign and_ln105_11_fu_369_p2 = (xor_ln107_4_fu_356_p2 & icmp_ln4_9_reg_612_pp0_iter2_reg);

assign and_ln105_12_fu_465_p2 = (xor_ln107_5_fu_460_p2 & icmp_ln4_11_reg_622_pp0_iter3_reg);

assign and_ln105_1_fu_249_p2 = (icmp_ln4_3_reg_579 & and_ln107_fu_244_p2);

assign and_ln105_2_fu_273_p2 = (icmp_ln4_4_reg_585_pp0_iter1_reg & and_ln105_fu_254_p2);

assign and_ln105_3_fu_361_p2 = (icmp_ln4_5_reg_591_pp0_iter2_reg & and_ln107_1_reg_657);

assign and_ln105_4_fu_278_p2 = (icmp_ln4_6_reg_597_pp0_iter1_reg & and_ln105_1_reg_645);

assign and_ln105_5_fu_287_p2 = (and_ln107_reg_639 & and_ln105_10_fu_282_p2);

assign and_ln105_6_fu_365_p2 = (icmp_ln4_8_reg_607_pp0_iter2_reg & and_ln105_2_reg_663);

assign and_ln105_7_fu_374_p2 = (and_ln105_reg_651 & and_ln105_11_fu_369_p2);

assign and_ln105_8_fu_379_p2 = (icmp_ln4_10_reg_617_pp0_iter2_reg & and_ln105_3_fu_361_p2);

assign and_ln105_9_fu_470_p2 = (and_ln107_1_reg_657_pp0_iter3_reg & and_ln105_12_fu_465_p2);

assign and_ln105_fu_254_p2 = (xor_ln107_reg_627 & icmp_ln4_2_reg_573_pp0_iter1_reg);

assign and_ln107_1_fu_263_p2 = (xor_ln107_reg_627 & xor_ln107_2_fu_258_p2);

assign and_ln107_fu_244_p2 = (xor_ln107_1_fu_239_p2 & icmp_ln4_reg_559);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_10_fu_222_p2 = (($signed(x_5_val_int_reg) < $signed(18'd3618)) ? 1'b1 : 1'b0);

assign icmp_ln4_11_fu_228_p2 = (($signed(x_0_val_int_reg) < $signed(18'd5248)) ? 1'b1 : 1'b0);

assign icmp_ln4_1_fu_168_p2 = (($signed(x_2_val_int_reg) < $signed(18'd1754)) ? 1'b1 : 1'b0);

assign icmp_ln4_2_fu_174_p2 = (($signed(x_9_val_int_reg) < $signed(18'd261948)) ? 1'b1 : 1'b0);

assign icmp_ln4_3_fu_180_p2 = (($signed(x_0_val_int_reg) < $signed(18'd7040)) ? 1'b1 : 1'b0);

assign icmp_ln4_4_fu_186_p2 = (($signed(x_3_val_int_reg) < $signed(18'd76402)) ? 1'b1 : 1'b0);

assign icmp_ln4_5_fu_192_p2 = (($signed(x_8_val_int_reg) < $signed(18'd204)) ? 1'b1 : 1'b0);

assign icmp_ln4_6_fu_198_p2 = (($signed(x_0_val_int_reg) < $signed(18'd2688)) ? 1'b1 : 1'b0);

assign icmp_ln4_7_fu_204_p2 = (($signed(x_4_val_int_reg) < $signed(18'd141)) ? 1'b1 : 1'b0);

assign icmp_ln4_8_fu_210_p2 = (($signed(x_9_val_int_reg) < $signed(18'd261626)) ? 1'b1 : 1'b0);

assign icmp_ln4_9_fu_216_p2 = (($signed(x_3_val_int_reg) < $signed(18'd97513)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_162_p2 = (($signed(x_2_val_int_reg) < $signed(18'd14832)) ? 1'b1 : 1'b0);

assign or_ln120_10_fu_475_p2 = (or_ln120_9_reg_686 | and_ln105_9_fu_470_p2);

assign or_ln120_11_fu_480_p2 = (xor_ln107_reg_627_pp0_iter3_reg | or_ln120_3_reg_668_pp0_iter3_reg);

assign or_ln120_1_fu_297_p2 = (icmp_ln4_1_reg_565_pp0_iter1_reg | and_ln105_1_reg_645);

assign or_ln120_2_fu_301_p2 = (or_ln120_1_fu_297_p2 | and_ln105_5_fu_287_p2);

assign or_ln120_3_fu_307_p2 = (icmp_ln4_1_reg_565_pp0_iter1_reg | and_ln107_reg_639);

assign or_ln120_4_fu_384_p2 = (or_ln120_3_reg_668 | and_ln105_6_fu_365_p2);

assign or_ln120_5_fu_311_p2 = (or_ln120_3_fu_307_p2 | and_ln105_2_fu_273_p2);

assign or_ln120_6_fu_389_p2 = (or_ln120_5_reg_675 | and_ln105_7_fu_374_p2);

assign or_ln120_7_fu_394_p2 = (or_ln120_3_reg_668 | and_ln105_reg_651);

assign or_ln120_8_fu_398_p2 = (or_ln120_7_fu_394_p2 | and_ln105_8_fu_379_p2);

assign or_ln120_9_fu_404_p2 = (or_ln120_7_fu_394_p2 | and_ln105_3_fu_361_p2);

assign or_ln120_fu_292_p2 = (icmp_ln4_1_reg_565_pp0_iter1_reg | and_ln105_4_fu_278_p2);

assign select_ln120_11_fu_551_p3 = ((or_ln120_11_fu_480_p2[0:0] == 1'b1) ? tmp_fu_491_p29 : 11'd0);

assign select_ln120_1_fu_328_p3 = ((or_ln120_1_fu_297_p2[0:0] == 1'b1) ? select_ln120_fu_320_p3 : 2'd3);

assign select_ln120_2_fu_340_p3 = ((or_ln120_2_fu_301_p2[0:0] == 1'b1) ? zext_ln120_1_fu_336_p1 : 3'd4);

assign select_ln120_3_fu_348_p3 = ((or_ln120_3_fu_307_p2[0:0] == 1'b1) ? select_ln120_2_fu_340_p3 : 3'd5);

assign select_ln120_4_fu_410_p3 = ((or_ln120_4_fu_384_p2[0:0] == 1'b1) ? select_ln120_3_reg_681 : 3'd6);

assign select_ln120_5_fu_417_p3 = ((or_ln120_5_reg_675[0:0] == 1'b1) ? select_ln120_4_fu_410_p3 : 3'd7);

assign select_ln120_6_fu_428_p3 = ((or_ln120_6_fu_389_p2[0:0] == 1'b1) ? zext_ln120_2_fu_424_p1 : 4'd8);

assign select_ln120_7_fu_436_p3 = ((or_ln120_7_fu_394_p2[0:0] == 1'b1) ? select_ln120_6_fu_428_p3 : 4'd9);

assign select_ln120_8_fu_444_p3 = ((or_ln120_8_fu_398_p2[0:0] == 1'b1) ? select_ln120_7_fu_436_p3 : 4'd10);

assign select_ln120_9_fu_452_p3 = ((or_ln120_9_fu_404_p2[0:0] == 1'b1) ? select_ln120_8_fu_444_p3 : 4'd11);

assign select_ln120_fu_320_p3 = ((or_ln120_fu_292_p2[0:0] == 1'b1) ? zext_ln120_fu_317_p1 : 2'd2);

assign tmp_fu_491_p27 = 'bx;

assign tmp_fu_491_p28 = ((or_ln120_10_fu_475_p2[0:0] == 1'b1) ? select_ln120_9_reg_691 : 4'd12);

assign xor_ln107_1_fu_239_p2 = (icmp_ln4_1_reg_565 ^ 1'd1);

assign xor_ln107_2_fu_258_p2 = (icmp_ln4_2_reg_573_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_3_fu_268_p2 = (icmp_ln4_3_reg_579_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_4_fu_356_p2 = (icmp_ln4_4_reg_585_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_5_fu_460_p2 = (icmp_ln4_5_reg_591_pp0_iter3_reg ^ 1'd1);

assign xor_ln107_fu_234_p2 = (icmp_ln4_reg_559 ^ 1'd1);

assign zext_ln120_1_fu_336_p1 = select_ln120_1_fu_328_p3;

assign zext_ln120_2_fu_424_p1 = select_ln120_5_fu_417_p3;

assign zext_ln120_fu_317_p1 = xor_ln107_1_reg_634;

endmodule //my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_s
