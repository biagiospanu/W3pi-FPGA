// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_1 (
        ap_clk,
        ap_rst,
        x_0_val,
        x_1_val,
        x_2_val,
        x_3_val,
        x_4_val,
        x_6_val,
        x_7_val,
        x_8_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] x_0_val;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_180_p2;
reg   [0:0] icmp_ln4_reg_636;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln4_reg_636_pp0_iter1_reg;
reg   [0:0] icmp_ln4_reg_636_pp0_iter2_reg;
wire   [0:0] icmp_ln4_12_fu_186_p2;
reg   [0:0] icmp_ln4_12_reg_647;
wire   [0:0] icmp_ln4_13_fu_192_p2;
reg   [0:0] icmp_ln4_13_reg_653;
wire   [0:0] icmp_ln4_14_fu_198_p2;
reg   [0:0] icmp_ln4_14_reg_659;
reg   [0:0] icmp_ln4_14_reg_659_pp0_iter1_reg;
wire   [0:0] icmp_ln4_15_fu_204_p2;
reg   [0:0] icmp_ln4_15_reg_665;
reg   [0:0] icmp_ln4_15_reg_665_pp0_iter1_reg;
wire   [0:0] icmp_ln4_16_fu_210_p2;
reg   [0:0] icmp_ln4_16_reg_671;
reg   [0:0] icmp_ln4_16_reg_671_pp0_iter1_reg;
reg   [0:0] icmp_ln4_16_reg_671_pp0_iter2_reg;
wire   [0:0] icmp_ln4_17_fu_216_p2;
reg   [0:0] icmp_ln4_17_reg_677;
reg   [0:0] icmp_ln4_17_reg_677_pp0_iter1_reg;
reg   [0:0] icmp_ln4_17_reg_677_pp0_iter2_reg;
reg   [0:0] icmp_ln4_17_reg_677_pp0_iter3_reg;
wire   [0:0] icmp_ln4_18_fu_222_p2;
reg   [0:0] icmp_ln4_18_reg_683;
reg   [0:0] icmp_ln4_18_reg_683_pp0_iter1_reg;
wire   [0:0] icmp_ln4_19_fu_228_p2;
reg   [0:0] icmp_ln4_19_reg_688;
reg   [0:0] icmp_ln4_19_reg_688_pp0_iter1_reg;
wire   [0:0] icmp_ln4_20_fu_234_p2;
reg   [0:0] icmp_ln4_20_reg_693;
reg   [0:0] icmp_ln4_20_reg_693_pp0_iter1_reg;
wire   [0:0] icmp_ln4_21_fu_240_p2;
reg   [0:0] icmp_ln4_21_reg_698;
reg   [0:0] icmp_ln4_21_reg_698_pp0_iter1_reg;
reg   [0:0] icmp_ln4_21_reg_698_pp0_iter2_reg;
wire   [0:0] icmp_ln4_22_fu_246_p2;
reg   [0:0] icmp_ln4_22_reg_703;
reg   [0:0] icmp_ln4_22_reg_703_pp0_iter1_reg;
reg   [0:0] icmp_ln4_22_reg_703_pp0_iter2_reg;
wire   [0:0] icmp_ln4_23_fu_252_p2;
reg   [0:0] icmp_ln4_23_reg_708;
reg   [0:0] icmp_ln4_23_reg_708_pp0_iter1_reg;
reg   [0:0] icmp_ln4_23_reg_708_pp0_iter2_reg;
wire   [0:0] icmp_ln4_24_fu_258_p2;
reg   [0:0] icmp_ln4_24_reg_713;
reg   [0:0] icmp_ln4_24_reg_713_pp0_iter1_reg;
reg   [0:0] icmp_ln4_24_reg_713_pp0_iter2_reg;
reg   [0:0] icmp_ln4_24_reg_713_pp0_iter3_reg;
wire   [0:0] and_ln105_fu_269_p2;
reg   [0:0] and_ln105_reg_718;
wire   [0:0] and_ln107_fu_278_p2;
reg   [0:0] and_ln107_reg_724;
wire   [0:0] and_ln105_10_fu_283_p2;
reg   [0:0] and_ln105_10_reg_729;
reg   [0:0] and_ln105_10_reg_729_pp0_iter2_reg;
wire   [0:0] and_ln107_2_fu_293_p2;
reg   [0:0] and_ln107_2_reg_736;
reg   [0:0] and_ln107_2_reg_736_pp0_iter2_reg;
reg   [0:0] and_ln107_2_reg_736_pp0_iter3_reg;
wire   [0:0] and_ln105_11_fu_299_p2;
reg   [0:0] and_ln105_11_reg_742;
wire   [0:0] and_ln105_12_fu_304_p2;
reg   [0:0] and_ln105_12_reg_747;
wire   [0:0] or_ln120_12_fu_309_p2;
reg   [0:0] or_ln120_12_reg_754;
wire   [0:0] and_ln105_13_fu_325_p2;
reg   [0:0] and_ln105_13_reg_760;
wire   [0:0] or_ln120_17_fu_373_p2;
reg   [0:0] or_ln120_17_reg_765;
wire   [2:0] select_ln120_16_fu_430_p3;
reg   [2:0] select_ln120_16_reg_771;
wire   [0:0] or_ln120_21_fu_485_p2;
reg   [0:0] or_ln120_21_reg_776;
wire   [3:0] select_ln120_22_fu_533_p3;
reg   [3:0] select_ln120_22_reg_781;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_6_fu_273_p2;
wire   [0:0] xor_ln107_fu_264_p2;
wire   [0:0] xor_ln107_7_fu_288_p2;
wire   [0:0] xor_ln107_8_fu_315_p2;
wire   [0:0] and_ln105_22_fu_333_p2;
wire   [0:0] xor_ln107_9_fu_320_p2;
wire   [0:0] and_ln105_23_fu_343_p2;
wire   [0:0] and_ln105_15_fu_329_p2;
wire   [0:0] and_ln105_16_fu_338_p2;
wire   [0:0] or_ln120_14_fu_363_p2;
wire   [0:0] and_ln105_17_fu_348_p2;
wire   [0:0] xor_ln120_fu_378_p2;
wire   [0:0] or_ln120_fu_353_p2;
wire   [1:0] zext_ln120_fu_383_p1;
wire   [1:0] select_ln120_fu_387_p3;
wire   [1:0] select_ln120_12_fu_395_p3;
wire   [0:0] or_ln120_13_fu_358_p2;
wire   [2:0] zext_ln120_3_fu_402_p1;
wire   [2:0] select_ln120_13_fu_406_p3;
wire   [0:0] or_ln120_15_fu_367_p2;
wire   [2:0] select_ln120_14_fu_414_p3;
wire   [2:0] select_ln120_15_fu_422_p3;
wire   [0:0] xor_ln107_10_fu_437_p2;
wire   [0:0] and_ln105_24_fu_450_p2;
wire   [0:0] and_ln105_14_fu_442_p2;
wire   [0:0] and_ln105_18_fu_446_p2;
wire   [0:0] and_ln105_19_fu_455_p2;
wire   [0:0] or_ln120_19_fu_475_p2;
wire   [0:0] and_ln105_20_fu_460_p2;
wire   [0:0] or_ln120_16_fu_465_p2;
wire   [3:0] zext_ln120_4_fu_491_p1;
wire   [3:0] select_ln120_17_fu_494_p3;
wire   [0:0] or_ln120_18_fu_470_p2;
wire   [3:0] select_ln120_18_fu_502_p3;
wire   [3:0] select_ln120_19_fu_509_p3;
wire   [0:0] or_ln120_20_fu_479_p2;
wire   [3:0] select_ln120_20_fu_517_p3;
wire   [3:0] select_ln120_21_fu_525_p3;
wire   [0:0] xor_ln107_11_fu_541_p2;
wire   [0:0] and_ln105_25_fu_546_p2;
wire   [0:0] and_ln105_21_fu_551_p2;
wire   [0:0] or_ln120_22_fu_556_p2;
wire   [10:0] agg_result_fu_568_p31;
wire   [3:0] agg_result_fu_568_p32;
wire   [10:0] agg_result_fu_568_p33;
reg    ap_ce_reg;
reg   [17:0] x_0_val_int_reg;
reg   [17:0] x_1_val_int_reg;
reg   [17:0] x_2_val_int_reg;
reg   [17:0] x_3_val_int_reg;
reg   [17:0] x_4_val_int_reg;
reg   [17:0] x_6_val_int_reg;
reg   [17:0] x_7_val_int_reg;
reg   [17:0] x_8_val_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] agg_result_fu_568_p1;
wire   [3:0] agg_result_fu_568_p3;
wire   [3:0] agg_result_fu_568_p5;
wire   [3:0] agg_result_fu_568_p7;
wire   [3:0] agg_result_fu_568_p9;
wire   [3:0] agg_result_fu_568_p11;
wire   [3:0] agg_result_fu_568_p13;
wire   [3:0] agg_result_fu_568_p15;
wire  signed [3:0] agg_result_fu_568_p17;
wire  signed [3:0] agg_result_fu_568_p19;
wire  signed [3:0] agg_result_fu_568_p21;
wire  signed [3:0] agg_result_fu_568_p23;
wire  signed [3:0] agg_result_fu_568_p25;
wire  signed [3:0] agg_result_fu_568_p27;
wire  signed [3:0] agg_result_fu_568_p29;

my_prj_sparsemux_31_4_11_1_0_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_31_4_11_1_0_x_U73(
    .din0(11'd1493),
    .din1(11'd252),
    .din2(11'd1591),
    .din3(11'd936),
    .din4(11'd132),
    .din5(11'd1847),
    .din6(11'd1488),
    .din7(11'd1648),
    .din8(11'd76),
    .din9(11'd1401),
    .din10(11'd1079),
    .din11(11'd129),
    .din12(11'd1812),
    .din13(11'd1610),
    .din14(11'd1890),
    .def(agg_result_fu_568_p31),
    .sel(agg_result_fu_568_p32),
    .dout(agg_result_fu_568_p33)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_10_reg_729 <= and_ln105_10_fu_283_p2;
        and_ln105_10_reg_729_pp0_iter2_reg <= and_ln105_10_reg_729;
        and_ln105_11_reg_742 <= and_ln105_11_fu_299_p2;
        and_ln105_12_reg_747 <= and_ln105_12_fu_304_p2;
        and_ln105_13_reg_760 <= and_ln105_13_fu_325_p2;
        and_ln105_reg_718 <= and_ln105_fu_269_p2;
        and_ln107_2_reg_736 <= and_ln107_2_fu_293_p2;
        and_ln107_2_reg_736_pp0_iter2_reg <= and_ln107_2_reg_736;
        and_ln107_2_reg_736_pp0_iter3_reg <= and_ln107_2_reg_736_pp0_iter2_reg;
        and_ln107_reg_724 <= and_ln107_fu_278_p2;
        icmp_ln4_12_reg_647 <= icmp_ln4_12_fu_186_p2;
        icmp_ln4_13_reg_653 <= icmp_ln4_13_fu_192_p2;
        icmp_ln4_14_reg_659 <= icmp_ln4_14_fu_198_p2;
        icmp_ln4_14_reg_659_pp0_iter1_reg <= icmp_ln4_14_reg_659;
        icmp_ln4_15_reg_665 <= icmp_ln4_15_fu_204_p2;
        icmp_ln4_15_reg_665_pp0_iter1_reg <= icmp_ln4_15_reg_665;
        icmp_ln4_16_reg_671 <= icmp_ln4_16_fu_210_p2;
        icmp_ln4_16_reg_671_pp0_iter1_reg <= icmp_ln4_16_reg_671;
        icmp_ln4_16_reg_671_pp0_iter2_reg <= icmp_ln4_16_reg_671_pp0_iter1_reg;
        icmp_ln4_17_reg_677 <= icmp_ln4_17_fu_216_p2;
        icmp_ln4_17_reg_677_pp0_iter1_reg <= icmp_ln4_17_reg_677;
        icmp_ln4_17_reg_677_pp0_iter2_reg <= icmp_ln4_17_reg_677_pp0_iter1_reg;
        icmp_ln4_17_reg_677_pp0_iter3_reg <= icmp_ln4_17_reg_677_pp0_iter2_reg;
        icmp_ln4_18_reg_683 <= icmp_ln4_18_fu_222_p2;
        icmp_ln4_18_reg_683_pp0_iter1_reg <= icmp_ln4_18_reg_683;
        icmp_ln4_19_reg_688 <= icmp_ln4_19_fu_228_p2;
        icmp_ln4_19_reg_688_pp0_iter1_reg <= icmp_ln4_19_reg_688;
        icmp_ln4_20_reg_693 <= icmp_ln4_20_fu_234_p2;
        icmp_ln4_20_reg_693_pp0_iter1_reg <= icmp_ln4_20_reg_693;
        icmp_ln4_21_reg_698 <= icmp_ln4_21_fu_240_p2;
        icmp_ln4_21_reg_698_pp0_iter1_reg <= icmp_ln4_21_reg_698;
        icmp_ln4_21_reg_698_pp0_iter2_reg <= icmp_ln4_21_reg_698_pp0_iter1_reg;
        icmp_ln4_22_reg_703 <= icmp_ln4_22_fu_246_p2;
        icmp_ln4_22_reg_703_pp0_iter1_reg <= icmp_ln4_22_reg_703;
        icmp_ln4_22_reg_703_pp0_iter2_reg <= icmp_ln4_22_reg_703_pp0_iter1_reg;
        icmp_ln4_23_reg_708 <= icmp_ln4_23_fu_252_p2;
        icmp_ln4_23_reg_708_pp0_iter1_reg <= icmp_ln4_23_reg_708;
        icmp_ln4_23_reg_708_pp0_iter2_reg <= icmp_ln4_23_reg_708_pp0_iter1_reg;
        icmp_ln4_24_reg_713 <= icmp_ln4_24_fu_258_p2;
        icmp_ln4_24_reg_713_pp0_iter1_reg <= icmp_ln4_24_reg_713;
        icmp_ln4_24_reg_713_pp0_iter2_reg <= icmp_ln4_24_reg_713_pp0_iter1_reg;
        icmp_ln4_24_reg_713_pp0_iter3_reg <= icmp_ln4_24_reg_713_pp0_iter2_reg;
        icmp_ln4_reg_636 <= icmp_ln4_fu_180_p2;
        icmp_ln4_reg_636_pp0_iter1_reg <= icmp_ln4_reg_636;
        icmp_ln4_reg_636_pp0_iter2_reg <= icmp_ln4_reg_636_pp0_iter1_reg;
        or_ln120_12_reg_754 <= or_ln120_12_fu_309_p2;
        or_ln120_17_reg_765 <= or_ln120_17_fu_373_p2;
        or_ln120_21_reg_776 <= or_ln120_21_fu_485_p2;
        select_ln120_16_reg_771 <= select_ln120_16_fu_430_p3;
        select_ln120_22_reg_781 <= select_ln120_22_fu_533_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_568_p33;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        x_0_val_int_reg <= x_0_val;
        x_1_val_int_reg <= x_1_val;
        x_2_val_int_reg <= x_2_val;
        x_3_val_int_reg <= x_3_val;
        x_4_val_int_reg <= x_4_val;
        x_6_val_int_reg <= x_6_val;
        x_7_val_int_reg <= x_7_val;
        x_8_val_int_reg <= x_8_val;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_568_p33;
    end else begin
        ap_return = 'bx;
    end
end

assign agg_result_fu_568_p31 = 'bx;

assign agg_result_fu_568_p32 = ((or_ln120_22_fu_556_p2[0:0] == 1'b1) ? select_ln120_22_reg_781 : 4'd14);

assign and_ln105_10_fu_283_p2 = (xor_ln107_fu_264_p2 & icmp_ln4_13_reg_653);

assign and_ln105_11_fu_299_p2 = (icmp_ln4_14_reg_659 & and_ln105_fu_269_p2);

assign and_ln105_12_fu_304_p2 = (icmp_ln4_15_reg_665 & and_ln107_fu_278_p2);

assign and_ln105_13_fu_325_p2 = (icmp_ln4_16_reg_671_pp0_iter1_reg & and_ln105_10_reg_729);

assign and_ln105_14_fu_442_p2 = (icmp_ln4_17_reg_677_pp0_iter2_reg & and_ln107_2_reg_736_pp0_iter2_reg);

assign and_ln105_15_fu_329_p2 = (icmp_ln4_18_reg_683_pp0_iter1_reg & and_ln105_11_reg_742);

assign and_ln105_16_fu_338_p2 = (and_ln105_reg_718 & and_ln105_22_fu_333_p2);

assign and_ln105_17_fu_348_p2 = (and_ln107_reg_724 & and_ln105_23_fu_343_p2);

assign and_ln105_18_fu_446_p2 = (icmp_ln4_21_reg_698_pp0_iter2_reg & and_ln105_13_reg_760);

assign and_ln105_19_fu_455_p2 = (and_ln105_24_fu_450_p2 & and_ln105_10_reg_729_pp0_iter2_reg);

assign and_ln105_20_fu_460_p2 = (icmp_ln4_23_reg_708_pp0_iter2_reg & and_ln105_14_fu_442_p2);

assign and_ln105_21_fu_551_p2 = (and_ln107_2_reg_736_pp0_iter3_reg & and_ln105_25_fu_546_p2);

assign and_ln105_22_fu_333_p2 = (xor_ln107_8_fu_315_p2 & icmp_ln4_19_reg_688_pp0_iter1_reg);

assign and_ln105_23_fu_343_p2 = (xor_ln107_9_fu_320_p2 & icmp_ln4_20_reg_693_pp0_iter1_reg);

assign and_ln105_24_fu_450_p2 = (xor_ln107_10_fu_437_p2 & icmp_ln4_22_reg_703_pp0_iter2_reg);

assign and_ln105_25_fu_546_p2 = (xor_ln107_11_fu_541_p2 & icmp_ln4_24_reg_713_pp0_iter3_reg);

assign and_ln105_fu_269_p2 = (icmp_ln4_reg_636 & icmp_ln4_12_reg_647);

assign and_ln107_2_fu_293_p2 = (xor_ln107_fu_264_p2 & xor_ln107_7_fu_288_p2);

assign and_ln107_fu_278_p2 = (xor_ln107_6_fu_273_p2 & icmp_ln4_reg_636);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_12_fu_186_p2 = (($signed(x_0_val_int_reg) < $signed(18'd2688)) ? 1'b1 : 1'b0);

assign icmp_ln4_13_fu_192_p2 = (($signed(x_7_val_int_reg) < $signed(18'd260608)) ? 1'b1 : 1'b0);

assign icmp_ln4_14_fu_198_p2 = (($signed(x_1_val_int_reg) < $signed(18'd4224)) ? 1'b1 : 1'b0);

assign icmp_ln4_15_fu_204_p2 = (($signed(x_1_val_int_reg) < $signed(18'd5504)) ? 1'b1 : 1'b0);

assign icmp_ln4_16_fu_210_p2 = (($signed(x_0_val_int_reg) < $signed(18'd2176)) ? 1'b1 : 1'b0);

assign icmp_ln4_17_fu_216_p2 = (($signed(x_4_val_int_reg) < $signed(18'd1072)) ? 1'b1 : 1'b0);

assign icmp_ln4_18_fu_222_p2 = (($signed(x_1_val_int_reg) < $signed(18'd2944)) ? 1'b1 : 1'b0);

assign icmp_ln4_19_fu_228_p2 = (($signed(x_7_val_int_reg) < $signed(18'd261632)) ? 1'b1 : 1'b0);

assign icmp_ln4_20_fu_234_p2 = (($signed(x_8_val_int_reg) < $signed(18'd304)) ? 1'b1 : 1'b0);

assign icmp_ln4_21_fu_240_p2 = (($signed(x_3_val_int_reg) < $signed(18'd77350)) ? 1'b1 : 1'b0);

assign icmp_ln4_22_fu_246_p2 = (($signed(x_0_val_int_reg) < $signed(18'd7040)) ? 1'b1 : 1'b0);

assign icmp_ln4_23_fu_252_p2 = (($signed(x_8_val_int_reg) < $signed(18'd472)) ? 1'b1 : 1'b0);

assign icmp_ln4_24_fu_258_p2 = (($signed(x_2_val_int_reg) < $signed(18'd50834)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_180_p2 = (($signed(x_6_val_int_reg) < $signed(18'd9600)) ? 1'b1 : 1'b0);

assign or_ln120_12_fu_309_p2 = (and_ln105_12_fu_304_p2 | and_ln105_11_fu_299_p2);

assign or_ln120_13_fu_358_p2 = (or_ln120_12_reg_754 | and_ln105_16_fu_338_p2);

assign or_ln120_14_fu_363_p2 = (and_ln105_reg_718 | and_ln105_12_reg_747);

assign or_ln120_15_fu_367_p2 = (or_ln120_14_fu_363_p2 | and_ln105_17_fu_348_p2);

assign or_ln120_16_fu_465_p2 = (icmp_ln4_reg_636_pp0_iter2_reg | and_ln105_18_fu_446_p2);

assign or_ln120_17_fu_373_p2 = (icmp_ln4_reg_636_pp0_iter1_reg | and_ln105_13_fu_325_p2);

assign or_ln120_18_fu_470_p2 = (or_ln120_17_reg_765 | and_ln105_19_fu_455_p2);

assign or_ln120_19_fu_475_p2 = (icmp_ln4_reg_636_pp0_iter2_reg | and_ln105_10_reg_729_pp0_iter2_reg);

assign or_ln120_20_fu_479_p2 = (or_ln120_19_fu_475_p2 | and_ln105_20_fu_460_p2);

assign or_ln120_21_fu_485_p2 = (or_ln120_19_fu_475_p2 | and_ln105_14_fu_442_p2);

assign or_ln120_22_fu_556_p2 = (or_ln120_21_reg_776 | and_ln105_21_fu_551_p2);

assign or_ln120_fu_353_p2 = (and_ln105_15_fu_329_p2 | and_ln105_12_reg_747);

assign select_ln120_12_fu_395_p3 = ((or_ln120_12_reg_754[0:0] == 1'b1) ? select_ln120_fu_387_p3 : 2'd3);

assign select_ln120_13_fu_406_p3 = ((or_ln120_13_fu_358_p2[0:0] == 1'b1) ? zext_ln120_3_fu_402_p1 : 3'd4);

assign select_ln120_14_fu_414_p3 = ((or_ln120_14_fu_363_p2[0:0] == 1'b1) ? select_ln120_13_fu_406_p3 : 3'd5);

assign select_ln120_15_fu_422_p3 = ((or_ln120_15_fu_367_p2[0:0] == 1'b1) ? select_ln120_14_fu_414_p3 : 3'd6);

assign select_ln120_16_fu_430_p3 = ((icmp_ln4_reg_636_pp0_iter1_reg[0:0] == 1'b1) ? select_ln120_15_fu_422_p3 : 3'd7);

assign select_ln120_17_fu_494_p3 = ((or_ln120_16_fu_465_p2[0:0] == 1'b1) ? zext_ln120_4_fu_491_p1 : 4'd8);

assign select_ln120_18_fu_502_p3 = ((or_ln120_17_reg_765[0:0] == 1'b1) ? select_ln120_17_fu_494_p3 : 4'd9);

assign select_ln120_19_fu_509_p3 = ((or_ln120_18_fu_470_p2[0:0] == 1'b1) ? select_ln120_18_fu_502_p3 : 4'd10);

assign select_ln120_20_fu_517_p3 = ((or_ln120_19_fu_475_p2[0:0] == 1'b1) ? select_ln120_19_fu_509_p3 : 4'd11);

assign select_ln120_21_fu_525_p3 = ((or_ln120_20_fu_479_p2[0:0] == 1'b1) ? select_ln120_20_fu_517_p3 : 4'd12);

assign select_ln120_22_fu_533_p3 = ((or_ln120_21_fu_485_p2[0:0] == 1'b1) ? select_ln120_21_fu_525_p3 : 4'd13);

assign select_ln120_fu_387_p3 = ((or_ln120_fu_353_p2[0:0] == 1'b1) ? zext_ln120_fu_383_p1 : 2'd2);

assign xor_ln107_10_fu_437_p2 = (icmp_ln4_16_reg_671_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_11_fu_541_p2 = (icmp_ln4_17_reg_677_pp0_iter3_reg ^ 1'd1);

assign xor_ln107_6_fu_273_p2 = (icmp_ln4_12_reg_647 ^ 1'd1);

assign xor_ln107_7_fu_288_p2 = (icmp_ln4_13_reg_653 ^ 1'd1);

assign xor_ln107_8_fu_315_p2 = (icmp_ln4_14_reg_659_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_9_fu_320_p2 = (icmp_ln4_15_reg_665_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_fu_264_p2 = (icmp_ln4_reg_636 ^ 1'd1);

assign xor_ln120_fu_378_p2 = (1'd1 ^ and_ln105_12_reg_747);

assign zext_ln120_3_fu_402_p1 = select_ln120_12_fu_395_p3;

assign zext_ln120_4_fu_491_p1 = select_ln120_16_reg_771;

assign zext_ln120_fu_383_p1 = xor_ln120_fu_378_p2;

endmodule //my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_1
