// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_17 (
        ap_clk,
        ap_rst,
        x_0_val,
        x_1_val,
        x_2_val,
        x_3_val,
        x_4_val,
        x_5_val,
        x_6_val,
        x_9_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] x_0_val;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_9_val;
output  [11:0] ap_return;
input   ap_ce;

reg[11:0] ap_return;

wire   [0:0] icmp_ln4_fu_186_p2;
reg   [0:0] icmp_ln4_reg_659;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln4_reg_659_pp0_iter1_reg;
reg   [0:0] icmp_ln4_reg_659_pp0_iter2_reg;
wire   [0:0] icmp_ln4_80_fu_192_p2;
reg   [0:0] icmp_ln4_80_reg_670;
wire   [0:0] icmp_ln4_81_fu_198_p2;
reg   [0:0] icmp_ln4_81_reg_676;
wire   [0:0] icmp_ln4_82_fu_204_p2;
reg   [0:0] icmp_ln4_82_reg_682;
wire   [0:0] icmp_ln4_83_fu_210_p2;
reg   [0:0] icmp_ln4_83_reg_688;
reg   [0:0] icmp_ln4_83_reg_688_pp0_iter1_reg;
wire   [0:0] icmp_ln4_84_fu_216_p2;
reg   [0:0] icmp_ln4_84_reg_694;
reg   [0:0] icmp_ln4_84_reg_694_pp0_iter1_reg;
reg   [0:0] icmp_ln4_84_reg_694_pp0_iter2_reg;
wire   [0:0] icmp_ln4_85_fu_222_p2;
reg   [0:0] icmp_ln4_85_reg_700;
reg   [0:0] icmp_ln4_85_reg_700_pp0_iter1_reg;
reg   [0:0] icmp_ln4_85_reg_700_pp0_iter2_reg;
reg   [0:0] icmp_ln4_85_reg_700_pp0_iter3_reg;
wire   [0:0] icmp_ln4_86_fu_228_p2;
reg   [0:0] icmp_ln4_86_reg_706;
reg   [0:0] icmp_ln4_86_reg_706_pp0_iter1_reg;
wire   [0:0] icmp_ln4_87_fu_234_p2;
reg   [0:0] icmp_ln4_87_reg_711;
wire   [0:0] icmp_ln4_88_fu_240_p2;
reg   [0:0] icmp_ln4_88_reg_716;
reg   [0:0] icmp_ln4_88_reg_716_pp0_iter1_reg;
wire   [0:0] icmp_ln4_89_fu_246_p2;
reg   [0:0] icmp_ln4_89_reg_721;
reg   [0:0] icmp_ln4_89_reg_721_pp0_iter1_reg;
wire   [0:0] icmp_ln4_90_fu_252_p2;
reg   [0:0] icmp_ln4_90_reg_726;
reg   [0:0] icmp_ln4_90_reg_726_pp0_iter1_reg;
reg   [0:0] icmp_ln4_90_reg_726_pp0_iter2_reg;
wire   [0:0] icmp_ln4_91_fu_258_p2;
reg   [0:0] icmp_ln4_91_reg_731;
reg   [0:0] icmp_ln4_91_reg_731_pp0_iter1_reg;
reg   [0:0] icmp_ln4_91_reg_731_pp0_iter2_reg;
wire   [0:0] icmp_ln4_92_fu_264_p2;
reg   [0:0] icmp_ln4_92_reg_736;
reg   [0:0] icmp_ln4_92_reg_736_pp0_iter1_reg;
reg   [0:0] icmp_ln4_92_reg_736_pp0_iter2_reg;
wire   [0:0] icmp_ln4_93_fu_270_p2;
reg   [0:0] icmp_ln4_93_reg_741;
reg   [0:0] icmp_ln4_93_reg_741_pp0_iter1_reg;
reg   [0:0] icmp_ln4_93_reg_741_pp0_iter2_reg;
reg   [0:0] icmp_ln4_93_reg_741_pp0_iter3_reg;
wire   [0:0] and_ln105_fu_281_p2;
reg   [0:0] and_ln105_reg_746;
wire   [0:0] and_ln107_fu_290_p2;
reg   [0:0] and_ln107_reg_753;
wire   [0:0] and_ln105_86_fu_295_p2;
reg   [0:0] and_ln105_86_reg_758;
reg   [0:0] and_ln105_86_reg_758_pp0_iter2_reg;
wire   [0:0] and_ln107_8_fu_305_p2;
reg   [0:0] and_ln107_8_reg_765;
reg   [0:0] and_ln107_8_reg_765_pp0_iter2_reg;
reg   [0:0] and_ln107_8_reg_765_pp0_iter3_reg;
wire   [0:0] and_ln105_87_fu_311_p2;
reg   [0:0] and_ln105_87_reg_771;
wire   [0:0] and_ln105_88_fu_321_p2;
reg   [0:0] and_ln105_88_reg_777;
wire   [0:0] or_ln120_fu_337_p2;
reg   [0:0] or_ln120_reg_783;
wire   [0:0] and_ln105_89_fu_348_p2;
reg   [0:0] and_ln105_89_reg_788;
wire   [0:0] or_ln120_67_fu_385_p2;
reg   [0:0] or_ln120_67_reg_793;
wire   [3:0] select_ln120_80_fu_453_p3;
reg   [3:0] select_ln120_80_reg_799;
wire   [0:0] or_ln120_71_fu_508_p2;
reg   [0:0] or_ln120_71_reg_804;
wire   [3:0] select_ln120_86_fu_552_p3;
reg   [3:0] select_ln120_86_reg_809;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_36_fu_285_p2;
wire   [0:0] xor_ln107_fu_276_p2;
wire   [0:0] xor_ln107_37_fu_300_p2;
wire   [0:0] xor_ln107_38_fu_316_p2;
wire   [0:0] and_ln105_92_fu_326_p2;
wire   [0:0] and_ln105_93_fu_331_p2;
wire   [0:0] xor_ln107_39_fu_343_p2;
wire   [0:0] and_ln105_95_fu_360_p2;
wire   [0:0] and_ln105_94_fu_356_p2;
wire   [0:0] or_ln120_64_fu_375_p2;
wire   [0:0] and_ln105_96_fu_365_p2;
wire   [0:0] and_ln105_91_fu_352_p2;
wire   [0:0] xor_ln120_fu_390_p2;
wire   [1:0] zext_ln120_fu_396_p1;
wire   [1:0] select_ln120_fu_400_p3;
wire   [1:0] select_ln120_75_fu_407_p3;
wire   [2:0] zext_ln120_13_fu_414_p1;
wire   [0:0] or_ln120_63_fu_370_p2;
wire   [2:0] select_ln120_76_fu_418_p3;
wire   [2:0] select_ln120_77_fu_425_p3;
wire   [0:0] or_ln120_65_fu_379_p2;
wire   [2:0] select_ln120_78_fu_433_p3;
wire   [2:0] select_ln120_79_fu_441_p3;
wire   [3:0] zext_ln120_14_fu_449_p1;
wire   [0:0] xor_ln107_40_fu_460_p2;
wire   [0:0] and_ln105_98_fu_473_p2;
wire   [0:0] and_ln105_90_fu_465_p2;
wire   [0:0] and_ln105_97_fu_469_p2;
wire   [0:0] and_ln105_99_fu_478_p2;
wire   [0:0] or_ln120_69_fu_498_p2;
wire   [0:0] and_ln105_100_fu_483_p2;
wire   [0:0] or_ln120_66_fu_488_p2;
wire   [3:0] select_ln120_81_fu_514_p3;
wire   [0:0] or_ln120_68_fu_493_p2;
wire   [3:0] select_ln120_82_fu_521_p3;
wire   [3:0] select_ln120_83_fu_528_p3;
wire   [0:0] or_ln120_70_fu_502_p2;
wire   [3:0] select_ln120_84_fu_536_p3;
wire   [3:0] select_ln120_85_fu_544_p3;
wire   [0:0] xor_ln107_41_fu_560_p2;
wire   [0:0] and_ln105_101_fu_565_p2;
wire   [0:0] and_ln105_102_fu_570_p2;
wire   [0:0] or_ln120_72_fu_575_p2;
wire   [11:0] agg_result_fu_587_p33;
wire   [3:0] agg_result_fu_587_p34;
wire   [11:0] agg_result_fu_587_p35;
reg    ap_ce_reg;
reg   [17:0] x_0_val_int_reg;
reg   [17:0] x_1_val_int_reg;
reg   [17:0] x_2_val_int_reg;
reg   [17:0] x_3_val_int_reg;
reg   [17:0] x_4_val_int_reg;
reg   [17:0] x_5_val_int_reg;
reg   [17:0] x_6_val_int_reg;
reg   [17:0] x_9_val_int_reg;
reg   [11:0] ap_return_int_reg;
wire   [3:0] agg_result_fu_587_p1;
wire   [3:0] agg_result_fu_587_p3;
wire   [3:0] agg_result_fu_587_p5;
wire   [3:0] agg_result_fu_587_p7;
wire   [3:0] agg_result_fu_587_p9;
wire   [3:0] agg_result_fu_587_p11;
wire   [3:0] agg_result_fu_587_p13;
wire   [3:0] agg_result_fu_587_p15;
wire  signed [3:0] agg_result_fu_587_p17;
wire  signed [3:0] agg_result_fu_587_p19;
wire  signed [3:0] agg_result_fu_587_p21;
wire  signed [3:0] agg_result_fu_587_p23;
wire  signed [3:0] agg_result_fu_587_p25;
wire  signed [3:0] agg_result_fu_587_p27;
wire  signed [3:0] agg_result_fu_587_p29;
wire  signed [3:0] agg_result_fu_587_p31;

my_prj_sparsemux_33_4_12_1_0_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
sparsemux_33_4_12_1_0_x_U10(
    .din0(12'd3342),
    .din1(12'd3879),
    .din2(12'd3398),
    .din3(12'd3945),
    .din4(12'd3472),
    .din5(12'd199),
    .din6(12'd3673),
    .din7(12'd3271),
    .din8(12'd3634),
    .din9(12'd487),
    .din10(12'd3636),
    .din11(12'd3321),
    .din12(12'd2917),
    .din13(12'd690),
    .din14(12'd3366),
    .din15(12'd39),
    .def(agg_result_fu_587_p33),
    .sel(agg_result_fu_587_p34),
    .dout(agg_result_fu_587_p35)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_86_reg_758 <= and_ln105_86_fu_295_p2;
        and_ln105_86_reg_758_pp0_iter2_reg <= and_ln105_86_reg_758;
        and_ln105_87_reg_771 <= and_ln105_87_fu_311_p2;
        and_ln105_88_reg_777 <= and_ln105_88_fu_321_p2;
        and_ln105_89_reg_788 <= and_ln105_89_fu_348_p2;
        and_ln105_reg_746 <= and_ln105_fu_281_p2;
        and_ln107_8_reg_765 <= and_ln107_8_fu_305_p2;
        and_ln107_8_reg_765_pp0_iter2_reg <= and_ln107_8_reg_765;
        and_ln107_8_reg_765_pp0_iter3_reg <= and_ln107_8_reg_765_pp0_iter2_reg;
        and_ln107_reg_753 <= and_ln107_fu_290_p2;
        icmp_ln4_80_reg_670 <= icmp_ln4_80_fu_192_p2;
        icmp_ln4_81_reg_676 <= icmp_ln4_81_fu_198_p2;
        icmp_ln4_82_reg_682 <= icmp_ln4_82_fu_204_p2;
        icmp_ln4_83_reg_688 <= icmp_ln4_83_fu_210_p2;
        icmp_ln4_83_reg_688_pp0_iter1_reg <= icmp_ln4_83_reg_688;
        icmp_ln4_84_reg_694 <= icmp_ln4_84_fu_216_p2;
        icmp_ln4_84_reg_694_pp0_iter1_reg <= icmp_ln4_84_reg_694;
        icmp_ln4_84_reg_694_pp0_iter2_reg <= icmp_ln4_84_reg_694_pp0_iter1_reg;
        icmp_ln4_85_reg_700 <= icmp_ln4_85_fu_222_p2;
        icmp_ln4_85_reg_700_pp0_iter1_reg <= icmp_ln4_85_reg_700;
        icmp_ln4_85_reg_700_pp0_iter2_reg <= icmp_ln4_85_reg_700_pp0_iter1_reg;
        icmp_ln4_85_reg_700_pp0_iter3_reg <= icmp_ln4_85_reg_700_pp0_iter2_reg;
        icmp_ln4_86_reg_706 <= icmp_ln4_86_fu_228_p2;
        icmp_ln4_86_reg_706_pp0_iter1_reg <= icmp_ln4_86_reg_706;
        icmp_ln4_87_reg_711 <= icmp_ln4_87_fu_234_p2;
        icmp_ln4_88_reg_716 <= icmp_ln4_88_fu_240_p2;
        icmp_ln4_88_reg_716_pp0_iter1_reg <= icmp_ln4_88_reg_716;
        icmp_ln4_89_reg_721 <= icmp_ln4_89_fu_246_p2;
        icmp_ln4_89_reg_721_pp0_iter1_reg <= icmp_ln4_89_reg_721;
        icmp_ln4_90_reg_726 <= icmp_ln4_90_fu_252_p2;
        icmp_ln4_90_reg_726_pp0_iter1_reg <= icmp_ln4_90_reg_726;
        icmp_ln4_90_reg_726_pp0_iter2_reg <= icmp_ln4_90_reg_726_pp0_iter1_reg;
        icmp_ln4_91_reg_731 <= icmp_ln4_91_fu_258_p2;
        icmp_ln4_91_reg_731_pp0_iter1_reg <= icmp_ln4_91_reg_731;
        icmp_ln4_91_reg_731_pp0_iter2_reg <= icmp_ln4_91_reg_731_pp0_iter1_reg;
        icmp_ln4_92_reg_736 <= icmp_ln4_92_fu_264_p2;
        icmp_ln4_92_reg_736_pp0_iter1_reg <= icmp_ln4_92_reg_736;
        icmp_ln4_92_reg_736_pp0_iter2_reg <= icmp_ln4_92_reg_736_pp0_iter1_reg;
        icmp_ln4_93_reg_741 <= icmp_ln4_93_fu_270_p2;
        icmp_ln4_93_reg_741_pp0_iter1_reg <= icmp_ln4_93_reg_741;
        icmp_ln4_93_reg_741_pp0_iter2_reg <= icmp_ln4_93_reg_741_pp0_iter1_reg;
        icmp_ln4_93_reg_741_pp0_iter3_reg <= icmp_ln4_93_reg_741_pp0_iter2_reg;
        icmp_ln4_reg_659 <= icmp_ln4_fu_186_p2;
        icmp_ln4_reg_659_pp0_iter1_reg <= icmp_ln4_reg_659;
        icmp_ln4_reg_659_pp0_iter2_reg <= icmp_ln4_reg_659_pp0_iter1_reg;
        or_ln120_67_reg_793 <= or_ln120_67_fu_385_p2;
        or_ln120_71_reg_804 <= or_ln120_71_fu_508_p2;
        or_ln120_reg_783 <= or_ln120_fu_337_p2;
        select_ln120_80_reg_799 <= select_ln120_80_fu_453_p3;
        select_ln120_86_reg_809 <= select_ln120_86_fu_552_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_587_p35;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        x_0_val_int_reg <= x_0_val;
        x_1_val_int_reg <= x_1_val;
        x_2_val_int_reg <= x_2_val;
        x_3_val_int_reg <= x_3_val;
        x_4_val_int_reg <= x_4_val;
        x_5_val_int_reg <= x_5_val;
        x_6_val_int_reg <= x_6_val;
        x_9_val_int_reg <= x_9_val;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_587_p35;
    end else begin
        ap_return = 'bx;
    end
end

assign agg_result_fu_587_p33 = 'bx;

assign agg_result_fu_587_p34 = ((or_ln120_72_fu_575_p2[0:0] == 1'b1) ? select_ln120_86_reg_809 : 4'd15);

assign and_ln105_100_fu_483_p2 = (icmp_ln4_92_reg_736_pp0_iter2_reg & and_ln105_90_fu_465_p2);

assign and_ln105_101_fu_565_p2 = (xor_ln107_41_fu_560_p2 & icmp_ln4_93_reg_741_pp0_iter3_reg);

assign and_ln105_102_fu_570_p2 = (and_ln107_8_reg_765_pp0_iter3_reg & and_ln105_101_fu_565_p2);

assign and_ln105_86_fu_295_p2 = (xor_ln107_fu_276_p2 & icmp_ln4_81_reg_676);

assign and_ln105_87_fu_311_p2 = (icmp_ln4_82_reg_682 & and_ln105_fu_281_p2);

assign and_ln105_88_fu_321_p2 = (icmp_ln4_83_reg_688 & and_ln107_fu_290_p2);

assign and_ln105_89_fu_348_p2 = (icmp_ln4_84_reg_694_pp0_iter1_reg & and_ln105_86_reg_758);

assign and_ln105_90_fu_465_p2 = (icmp_ln4_85_reg_700_pp0_iter2_reg & and_ln107_8_reg_765_pp0_iter2_reg);

assign and_ln105_91_fu_352_p2 = (icmp_ln4_86_reg_706_pp0_iter1_reg & and_ln105_87_reg_771);

assign and_ln105_92_fu_326_p2 = (xor_ln107_38_fu_316_p2 & icmp_ln4_87_reg_711);

assign and_ln105_93_fu_331_p2 = (and_ln105_fu_281_p2 & and_ln105_92_fu_326_p2);

assign and_ln105_94_fu_356_p2 = (icmp_ln4_88_reg_716_pp0_iter1_reg & and_ln105_88_reg_777);

assign and_ln105_95_fu_360_p2 = (xor_ln107_39_fu_343_p2 & icmp_ln4_89_reg_721_pp0_iter1_reg);

assign and_ln105_96_fu_365_p2 = (and_ln107_reg_753 & and_ln105_95_fu_360_p2);

assign and_ln105_97_fu_469_p2 = (icmp_ln4_90_reg_726_pp0_iter2_reg & and_ln105_89_reg_788);

assign and_ln105_98_fu_473_p2 = (xor_ln107_40_fu_460_p2 & icmp_ln4_91_reg_731_pp0_iter2_reg);

assign and_ln105_99_fu_478_p2 = (and_ln105_98_fu_473_p2 & and_ln105_86_reg_758_pp0_iter2_reg);

assign and_ln105_fu_281_p2 = (icmp_ln4_reg_659 & icmp_ln4_80_reg_670);

assign and_ln107_8_fu_305_p2 = (xor_ln107_fu_276_p2 & xor_ln107_37_fu_300_p2);

assign and_ln107_fu_290_p2 = (xor_ln107_36_fu_285_p2 & icmp_ln4_reg_659);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_80_fu_192_p2 = (($signed(x_3_val_int_reg) < $signed(18'd73373)) ? 1'b1 : 1'b0);

assign icmp_ln4_81_fu_198_p2 = (($signed(x_1_val_int_reg) < $signed(18'd13696)) ? 1'b1 : 1'b0);

assign icmp_ln4_82_fu_204_p2 = (($signed(x_1_val_int_reg) < $signed(18'd10880)) ? 1'b1 : 1'b0);

assign icmp_ln4_83_fu_210_p2 = (($signed(x_5_val_int_reg) < $signed(18'd3800)) ? 1'b1 : 1'b0);

assign icmp_ln4_84_fu_216_p2 = (($signed(x_4_val_int_reg) < $signed(18'd283)) ? 1'b1 : 1'b0);

assign icmp_ln4_85_fu_222_p2 = (($signed(x_4_val_int_reg) < $signed(18'd2407)) ? 1'b1 : 1'b0);

assign icmp_ln4_86_fu_228_p2 = (($signed(x_6_val_int_reg) < $signed(18'd77568)) ? 1'b1 : 1'b0);

assign icmp_ln4_87_fu_234_p2 = (($signed(x_0_val_int_reg) < $signed(18'd4736)) ? 1'b1 : 1'b0);

assign icmp_ln4_88_fu_240_p2 = (($signed(x_9_val_int_reg) < $signed(18'd261656)) ? 1'b1 : 1'b0);

assign icmp_ln4_89_fu_246_p2 = (($signed(x_3_val_int_reg) < $signed(18'd88482)) ? 1'b1 : 1'b0);

assign icmp_ln4_90_fu_252_p2 = (($signed(x_1_val_int_reg) < $signed(18'd10112)) ? 1'b1 : 1'b0);

assign icmp_ln4_91_fu_258_p2 = (($signed(x_4_val_int_reg) < $signed(18'd481)) ? 1'b1 : 1'b0);

assign icmp_ln4_92_fu_264_p2 = (($signed(x_2_val_int_reg) < $signed(18'd2465)) ? 1'b1 : 1'b0);

assign icmp_ln4_93_fu_270_p2 = (($signed(x_2_val_int_reg) < $signed(18'd59299)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_186_p2 = (($signed(x_0_val_int_reg) < $signed(18'd6528)) ? 1'b1 : 1'b0);

assign or_ln120_63_fu_370_p2 = (and_ln105_reg_746 | and_ln105_94_fu_356_p2);

assign or_ln120_64_fu_375_p2 = (and_ln105_reg_746 | and_ln105_88_reg_777);

assign or_ln120_65_fu_379_p2 = (or_ln120_64_fu_375_p2 | and_ln105_96_fu_365_p2);

assign or_ln120_66_fu_488_p2 = (icmp_ln4_reg_659_pp0_iter2_reg | and_ln105_97_fu_469_p2);

assign or_ln120_67_fu_385_p2 = (icmp_ln4_reg_659_pp0_iter1_reg | and_ln105_89_fu_348_p2);

assign or_ln120_68_fu_493_p2 = (or_ln120_67_reg_793 | and_ln105_99_fu_478_p2);

assign or_ln120_69_fu_498_p2 = (icmp_ln4_reg_659_pp0_iter2_reg | and_ln105_86_reg_758_pp0_iter2_reg);

assign or_ln120_70_fu_502_p2 = (or_ln120_69_fu_498_p2 | and_ln105_100_fu_483_p2);

assign or_ln120_71_fu_508_p2 = (or_ln120_69_fu_498_p2 | and_ln105_90_fu_465_p2);

assign or_ln120_72_fu_575_p2 = (or_ln120_71_reg_804 | and_ln105_102_fu_570_p2);

assign or_ln120_fu_337_p2 = (and_ln105_93_fu_331_p2 | and_ln105_87_fu_311_p2);

assign select_ln120_75_fu_407_p3 = ((or_ln120_reg_783[0:0] == 1'b1) ? select_ln120_fu_400_p3 : 2'd3);

assign select_ln120_76_fu_418_p3 = ((and_ln105_reg_746[0:0] == 1'b1) ? zext_ln120_13_fu_414_p1 : 3'd4);

assign select_ln120_77_fu_425_p3 = ((or_ln120_63_fu_370_p2[0:0] == 1'b1) ? select_ln120_76_fu_418_p3 : 3'd5);

assign select_ln120_78_fu_433_p3 = ((or_ln120_64_fu_375_p2[0:0] == 1'b1) ? select_ln120_77_fu_425_p3 : 3'd6);

assign select_ln120_79_fu_441_p3 = ((or_ln120_65_fu_379_p2[0:0] == 1'b1) ? select_ln120_78_fu_433_p3 : 3'd7);

assign select_ln120_80_fu_453_p3 = ((icmp_ln4_reg_659_pp0_iter1_reg[0:0] == 1'b1) ? zext_ln120_14_fu_449_p1 : 4'd8);

assign select_ln120_81_fu_514_p3 = ((or_ln120_66_fu_488_p2[0:0] == 1'b1) ? select_ln120_80_reg_799 : 4'd9);

assign select_ln120_82_fu_521_p3 = ((or_ln120_67_reg_793[0:0] == 1'b1) ? select_ln120_81_fu_514_p3 : 4'd10);

assign select_ln120_83_fu_528_p3 = ((or_ln120_68_fu_493_p2[0:0] == 1'b1) ? select_ln120_82_fu_521_p3 : 4'd11);

assign select_ln120_84_fu_536_p3 = ((or_ln120_69_fu_498_p2[0:0] == 1'b1) ? select_ln120_83_fu_528_p3 : 4'd12);

assign select_ln120_85_fu_544_p3 = ((or_ln120_70_fu_502_p2[0:0] == 1'b1) ? select_ln120_84_fu_536_p3 : 4'd13);

assign select_ln120_86_fu_552_p3 = ((or_ln120_71_fu_508_p2[0:0] == 1'b1) ? select_ln120_85_fu_544_p3 : 4'd14);

assign select_ln120_fu_400_p3 = ((and_ln105_87_reg_771[0:0] == 1'b1) ? zext_ln120_fu_396_p1 : 2'd2);

assign xor_ln107_36_fu_285_p2 = (icmp_ln4_80_reg_670 ^ 1'd1);

assign xor_ln107_37_fu_300_p2 = (icmp_ln4_81_reg_676 ^ 1'd1);

assign xor_ln107_38_fu_316_p2 = (icmp_ln4_82_reg_682 ^ 1'd1);

assign xor_ln107_39_fu_343_p2 = (icmp_ln4_83_reg_688_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_40_fu_460_p2 = (icmp_ln4_84_reg_694_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_41_fu_560_p2 = (icmp_ln4_85_reg_700_pp0_iter3_reg ^ 1'd1);

assign xor_ln107_fu_276_p2 = (icmp_ln4_reg_659 ^ 1'd1);

assign xor_ln120_fu_390_p2 = (1'd1 ^ and_ln105_91_fu_352_p2);

assign zext_ln120_13_fu_414_p1 = select_ln120_75_fu_407_p3;

assign zext_ln120_14_fu_449_p1 = select_ln120_79_fu_441_p3;

assign zext_ln120_fu_396_p1 = xor_ln120_fu_390_p2;

endmodule //my_prj_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_17
