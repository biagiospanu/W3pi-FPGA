-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_39F0 : STD_LOGIC_VECTOR (17 downto 0) := "000011100111110000";
    constant ap_const_lv18_6DA : STD_LOGIC_VECTOR (17 downto 0) := "000000011011011010";
    constant ap_const_lv18_3FF3C : STD_LOGIC_VECTOR (17 downto 0) := "111111111100111100";
    constant ap_const_lv18_1B80 : STD_LOGIC_VECTOR (17 downto 0) := "000001101110000000";
    constant ap_const_lv18_12A72 : STD_LOGIC_VECTOR (17 downto 0) := "010010101001110010";
    constant ap_const_lv18_CC : STD_LOGIC_VECTOR (17 downto 0) := "000000000011001100";
    constant ap_const_lv18_A80 : STD_LOGIC_VECTOR (17 downto 0) := "000000101010000000";
    constant ap_const_lv18_8D : STD_LOGIC_VECTOR (17 downto 0) := "000000000010001101";
    constant ap_const_lv18_3FDFA : STD_LOGIC_VECTOR (17 downto 0) := "111111110111111010";
    constant ap_const_lv18_17CE9 : STD_LOGIC_VECTOR (17 downto 0) := "010111110011101001";
    constant ap_const_lv18_E22 : STD_LOGIC_VECTOR (17 downto 0) := "000000111000100010";
    constant ap_const_lv18_1480 : STD_LOGIC_VECTOR (17 downto 0) := "000001010010000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv11_59D : STD_LOGIC_VECTOR (10 downto 0) := "10110011101";
    constant ap_const_lv11_7F9 : STD_LOGIC_VECTOR (10 downto 0) := "11111111001";
    constant ap_const_lv11_649 : STD_LOGIC_VECTOR (10 downto 0) := "11001001001";
    constant ap_const_lv11_22B : STD_LOGIC_VECTOR (10 downto 0) := "01000101011";
    constant ap_const_lv11_6B8 : STD_LOGIC_VECTOR (10 downto 0) := "11010111000";
    constant ap_const_lv11_610 : STD_LOGIC_VECTOR (10 downto 0) := "11000010000";
    constant ap_const_lv11_714 : STD_LOGIC_VECTOR (10 downto 0) := "11100010100";
    constant ap_const_lv11_47 : STD_LOGIC_VECTOR (10 downto 0) := "00001000111";
    constant ap_const_lv11_599 : STD_LOGIC_VECTOR (10 downto 0) := "10110011001";
    constant ap_const_lv11_137 : STD_LOGIC_VECTOR (10 downto 0) := "00100110111";
    constant ap_const_lv11_79C : STD_LOGIC_VECTOR (10 downto 0) := "11110011100";
    constant ap_const_lv11_749 : STD_LOGIC_VECTOR (10 downto 0) := "11101001001";
    constant ap_const_lv11_4F : STD_LOGIC_VECTOR (10 downto 0) := "00001001111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal icmp_ln4_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_1_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_1_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_1_reg_565_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_2_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_2_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_2_reg_573_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_3_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_3_reg_579 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_3_reg_579_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_4_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_4_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_4_reg_585_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_4_reg_585_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_5_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_5_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_5_reg_591_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_5_reg_591_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_5_reg_591_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_6_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_6_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_6_reg_597_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_7_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_7_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_7_reg_602_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_8_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_8_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_8_reg_607_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_8_reg_607_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_9_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_9_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_9_reg_612_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_9_reg_612_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_10_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_10_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_10_reg_617_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_10_reg_617_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_11_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_11_reg_622 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_11_reg_622_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_11_reg_622_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_11_reg_622_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_reg_627_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_reg_627_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_1_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_1_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_1_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_1_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_1_reg_657 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_1_reg_657_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_2_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_2_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_3_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_3_reg_668 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_3_reg_668_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_5_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_5_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_3_fu_348_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_3_reg_681 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_9_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_9_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_9_fu_452_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_9_reg_691 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal xor_ln107_2_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_3_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_10_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_4_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_1_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_5_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_317_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_fu_320_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_1_fu_328_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln120_2_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_1_fu_336_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_2_fu_340_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln107_4_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_11_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_3_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_6_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_7_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_7_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_8_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_4_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_4_fu_410_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_5_fu_417_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_6_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_2_fu_424_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_6_fu_428_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_8_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_7_fu_436_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_8_fu_444_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln107_5_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_12_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_9_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_10_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_491_p27 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_491_p28 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_11_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_491_p29 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln120_11_fu_551_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read1_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read7_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_491_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_491_p25 : STD_LOGIC_VECTOR (3 downto 0);

    component my_prj_accelerator_sparsemux_27_4_11_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        din9 : IN STD_LOGIC_VECTOR (10 downto 0);
        din10 : IN STD_LOGIC_VECTOR (10 downto 0);
        din11 : IN STD_LOGIC_VECTOR (10 downto 0);
        din12 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_27_4_11_1_0_U110 : component my_prj_accelerator_sparsemux_27_4_11_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        CASE9 => "1001",
        din9_WIDTH => 11,
        CASE10 => "1010",
        din10_WIDTH => 11,
        CASE11 => "1011",
        din11_WIDTH => 11,
        CASE12 => "1100",
        din12_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_59D,
        din1 => ap_const_lv11_7F9,
        din2 => ap_const_lv11_649,
        din3 => ap_const_lv11_22B,
        din4 => ap_const_lv11_6B8,
        din5 => ap_const_lv11_610,
        din6 => ap_const_lv11_714,
        din7 => ap_const_lv11_47,
        din8 => ap_const_lv11_599,
        din9 => ap_const_lv11_137,
        din10 => ap_const_lv11_79C,
        din11 => ap_const_lv11_749,
        din12 => ap_const_lv11_4F,
        def => tmp_fu_491_p27,
        sel => tmp_fu_491_p28,
        dout => tmp_fu_491_p29);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_1_reg_645 <= and_ln105_1_fu_249_p2;
                and_ln105_2_reg_663 <= and_ln105_2_fu_273_p2;
                and_ln105_reg_651 <= and_ln105_fu_254_p2;
                and_ln107_1_reg_657 <= and_ln107_1_fu_263_p2;
                and_ln107_1_reg_657_pp0_iter3_reg <= and_ln107_1_reg_657;
                and_ln107_reg_639 <= and_ln107_fu_244_p2;
                icmp_ln4_10_reg_617 <= icmp_ln4_10_fu_222_p2;
                icmp_ln4_10_reg_617_pp0_iter1_reg <= icmp_ln4_10_reg_617;
                icmp_ln4_10_reg_617_pp0_iter2_reg <= icmp_ln4_10_reg_617_pp0_iter1_reg;
                icmp_ln4_11_reg_622 <= icmp_ln4_11_fu_228_p2;
                icmp_ln4_11_reg_622_pp0_iter1_reg <= icmp_ln4_11_reg_622;
                icmp_ln4_11_reg_622_pp0_iter2_reg <= icmp_ln4_11_reg_622_pp0_iter1_reg;
                icmp_ln4_11_reg_622_pp0_iter3_reg <= icmp_ln4_11_reg_622_pp0_iter2_reg;
                icmp_ln4_1_reg_565 <= icmp_ln4_1_fu_168_p2;
                icmp_ln4_1_reg_565_pp0_iter1_reg <= icmp_ln4_1_reg_565;
                icmp_ln4_2_reg_573 <= icmp_ln4_2_fu_174_p2;
                icmp_ln4_2_reg_573_pp0_iter1_reg <= icmp_ln4_2_reg_573;
                icmp_ln4_3_reg_579 <= icmp_ln4_3_fu_180_p2;
                icmp_ln4_3_reg_579_pp0_iter1_reg <= icmp_ln4_3_reg_579;
                icmp_ln4_4_reg_585 <= icmp_ln4_4_fu_186_p2;
                icmp_ln4_4_reg_585_pp0_iter1_reg <= icmp_ln4_4_reg_585;
                icmp_ln4_4_reg_585_pp0_iter2_reg <= icmp_ln4_4_reg_585_pp0_iter1_reg;
                icmp_ln4_5_reg_591 <= icmp_ln4_5_fu_192_p2;
                icmp_ln4_5_reg_591_pp0_iter1_reg <= icmp_ln4_5_reg_591;
                icmp_ln4_5_reg_591_pp0_iter2_reg <= icmp_ln4_5_reg_591_pp0_iter1_reg;
                icmp_ln4_5_reg_591_pp0_iter3_reg <= icmp_ln4_5_reg_591_pp0_iter2_reg;
                icmp_ln4_6_reg_597 <= icmp_ln4_6_fu_198_p2;
                icmp_ln4_6_reg_597_pp0_iter1_reg <= icmp_ln4_6_reg_597;
                icmp_ln4_7_reg_602 <= icmp_ln4_7_fu_204_p2;
                icmp_ln4_7_reg_602_pp0_iter1_reg <= icmp_ln4_7_reg_602;
                icmp_ln4_8_reg_607 <= icmp_ln4_8_fu_210_p2;
                icmp_ln4_8_reg_607_pp0_iter1_reg <= icmp_ln4_8_reg_607;
                icmp_ln4_8_reg_607_pp0_iter2_reg <= icmp_ln4_8_reg_607_pp0_iter1_reg;
                icmp_ln4_9_reg_612 <= icmp_ln4_9_fu_216_p2;
                icmp_ln4_9_reg_612_pp0_iter1_reg <= icmp_ln4_9_reg_612;
                icmp_ln4_9_reg_612_pp0_iter2_reg <= icmp_ln4_9_reg_612_pp0_iter1_reg;
                icmp_ln4_reg_559 <= icmp_ln4_fu_162_p2;
                or_ln120_3_reg_668 <= or_ln120_3_fu_307_p2;
                or_ln120_3_reg_668_pp0_iter3_reg <= or_ln120_3_reg_668;
                or_ln120_5_reg_675 <= or_ln120_5_fu_311_p2;
                or_ln120_9_reg_686 <= or_ln120_9_fu_404_p2;
                select_ln120_3_reg_681 <= select_ln120_3_fu_348_p3;
                select_ln120_9_reg_691 <= select_ln120_9_fu_452_p3;
                xor_ln107_1_reg_634 <= xor_ln107_1_fu_239_p2;
                xor_ln107_reg_627 <= xor_ln107_fu_234_p2;
                xor_ln107_reg_627_pp0_iter2_reg <= xor_ln107_reg_627;
                xor_ln107_reg_627_pp0_iter3_reg <= xor_ln107_reg_627_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln120_11_fu_551_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
                p_read7_int_reg <= p_read7;
            end if;
        end if;
    end process;
    and_ln105_10_fu_282_p2 <= (xor_ln107_3_fu_268_p2 and icmp_ln4_7_reg_602_pp0_iter1_reg);
    and_ln105_11_fu_369_p2 <= (xor_ln107_4_fu_356_p2 and icmp_ln4_9_reg_612_pp0_iter2_reg);
    and_ln105_12_fu_465_p2 <= (xor_ln107_5_fu_460_p2 and icmp_ln4_11_reg_622_pp0_iter3_reg);
    and_ln105_1_fu_249_p2 <= (icmp_ln4_3_reg_579 and and_ln107_fu_244_p2);
    and_ln105_2_fu_273_p2 <= (icmp_ln4_4_reg_585_pp0_iter1_reg and and_ln105_fu_254_p2);
    and_ln105_3_fu_361_p2 <= (icmp_ln4_5_reg_591_pp0_iter2_reg and and_ln107_1_reg_657);
    and_ln105_4_fu_278_p2 <= (icmp_ln4_6_reg_597_pp0_iter1_reg and and_ln105_1_reg_645);
    and_ln105_5_fu_287_p2 <= (and_ln107_reg_639 and and_ln105_10_fu_282_p2);
    and_ln105_6_fu_365_p2 <= (icmp_ln4_8_reg_607_pp0_iter2_reg and and_ln105_2_reg_663);
    and_ln105_7_fu_374_p2 <= (and_ln105_reg_651 and and_ln105_11_fu_369_p2);
    and_ln105_8_fu_379_p2 <= (icmp_ln4_10_reg_617_pp0_iter2_reg and and_ln105_3_fu_361_p2);
    and_ln105_9_fu_470_p2 <= (and_ln107_1_reg_657_pp0_iter3_reg and and_ln105_12_fu_465_p2);
    and_ln105_fu_254_p2 <= (xor_ln107_reg_627 and icmp_ln4_2_reg_573_pp0_iter1_reg);
    and_ln107_1_fu_263_p2 <= (xor_ln107_reg_627 and xor_ln107_2_fu_258_p2);
    and_ln107_fu_244_p2 <= (xor_ln107_1_fu_239_p2 and icmp_ln4_reg_559);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln120_11_fu_551_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln120_11_fu_551_p3;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_10_fu_222_p2 <= "1" when (signed(p_read5_int_reg) < signed(ap_const_lv18_E22)) else "0";
    icmp_ln4_11_fu_228_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_1480)) else "0";
    icmp_ln4_1_fu_168_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_6DA)) else "0";
    icmp_ln4_2_fu_174_p2 <= "1" when (signed(p_read7_int_reg) < signed(ap_const_lv18_3FF3C)) else "0";
    icmp_ln4_3_fu_180_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_1B80)) else "0";
    icmp_ln4_4_fu_186_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_12A72)) else "0";
    icmp_ln4_5_fu_192_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_CC)) else "0";
    icmp_ln4_6_fu_198_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_A80)) else "0";
    icmp_ln4_7_fu_204_p2 <= "1" when (signed(p_read4_int_reg) < signed(ap_const_lv18_8D)) else "0";
    icmp_ln4_8_fu_210_p2 <= "1" when (signed(p_read7_int_reg) < signed(ap_const_lv18_3FDFA)) else "0";
    icmp_ln4_9_fu_216_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_17CE9)) else "0";
    icmp_ln4_fu_162_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_39F0)) else "0";
    or_ln120_10_fu_475_p2 <= (or_ln120_9_reg_686 or and_ln105_9_fu_470_p2);
    or_ln120_11_fu_480_p2 <= (xor_ln107_reg_627_pp0_iter3_reg or or_ln120_3_reg_668_pp0_iter3_reg);
    or_ln120_1_fu_297_p2 <= (icmp_ln4_1_reg_565_pp0_iter1_reg or and_ln105_1_reg_645);
    or_ln120_2_fu_301_p2 <= (or_ln120_1_fu_297_p2 or and_ln105_5_fu_287_p2);
    or_ln120_3_fu_307_p2 <= (icmp_ln4_1_reg_565_pp0_iter1_reg or and_ln107_reg_639);
    or_ln120_4_fu_384_p2 <= (or_ln120_3_reg_668 or and_ln105_6_fu_365_p2);
    or_ln120_5_fu_311_p2 <= (or_ln120_3_fu_307_p2 or and_ln105_2_fu_273_p2);
    or_ln120_6_fu_389_p2 <= (or_ln120_5_reg_675 or and_ln105_7_fu_374_p2);
    or_ln120_7_fu_394_p2 <= (or_ln120_3_reg_668 or and_ln105_reg_651);
    or_ln120_8_fu_398_p2 <= (or_ln120_7_fu_394_p2 or and_ln105_8_fu_379_p2);
    or_ln120_9_fu_404_p2 <= (or_ln120_7_fu_394_p2 or and_ln105_3_fu_361_p2);
    or_ln120_fu_292_p2 <= (icmp_ln4_1_reg_565_pp0_iter1_reg or and_ln105_4_fu_278_p2);
    select_ln120_11_fu_551_p3 <= 
        tmp_fu_491_p29 when (or_ln120_11_fu_480_p2(0) = '1') else 
        ap_const_lv11_0;
    select_ln120_1_fu_328_p3 <= 
        select_ln120_fu_320_p3 when (or_ln120_1_fu_297_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_2_fu_340_p3 <= 
        zext_ln120_1_fu_336_p1 when (or_ln120_2_fu_301_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_3_fu_348_p3 <= 
        select_ln120_2_fu_340_p3 when (or_ln120_3_fu_307_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_4_fu_410_p3 <= 
        select_ln120_3_reg_681 when (or_ln120_4_fu_384_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_5_fu_417_p3 <= 
        select_ln120_4_fu_410_p3 when (or_ln120_5_reg_675(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_6_fu_428_p3 <= 
        zext_ln120_2_fu_424_p1 when (or_ln120_6_fu_389_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln120_7_fu_436_p3 <= 
        select_ln120_6_fu_428_p3 when (or_ln120_7_fu_394_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln120_8_fu_444_p3 <= 
        select_ln120_7_fu_436_p3 when (or_ln120_8_fu_398_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln120_9_fu_452_p3 <= 
        select_ln120_8_fu_444_p3 when (or_ln120_9_fu_404_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln120_fu_320_p3 <= 
        zext_ln120_fu_317_p1 when (or_ln120_fu_292_p2(0) = '1') else 
        ap_const_lv2_2;
    tmp_fu_491_p27 <= "XXXXXXXXXXX";
    tmp_fu_491_p28 <= 
        select_ln120_9_reg_691 when (or_ln120_10_fu_475_p2(0) = '1') else 
        ap_const_lv4_C;
    xor_ln107_1_fu_239_p2 <= (icmp_ln4_1_reg_565 xor ap_const_lv1_1);
    xor_ln107_2_fu_258_p2 <= (icmp_ln4_2_reg_573_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_3_fu_268_p2 <= (icmp_ln4_3_reg_579_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_4_fu_356_p2 <= (icmp_ln4_4_reg_585_pp0_iter2_reg xor ap_const_lv1_1);
    xor_ln107_5_fu_460_p2 <= (icmp_ln4_5_reg_591_pp0_iter3_reg xor ap_const_lv1_1);
    xor_ln107_fu_234_p2 <= (icmp_ln4_reg_559 xor ap_const_lv1_1);
    zext_ln120_1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_1_fu_328_p3),3));
    zext_ln120_2_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_5_fu_417_p3),4));
    zext_ln120_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln107_1_reg_634),2));
end behav;
