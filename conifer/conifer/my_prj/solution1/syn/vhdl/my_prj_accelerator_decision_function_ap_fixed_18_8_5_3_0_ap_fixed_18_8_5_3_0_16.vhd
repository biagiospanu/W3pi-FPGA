-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_600 : STD_LOGIC_VECTOR (17 downto 0) := "000000011000000000";
    constant ap_const_lv18_3FA00 : STD_LOGIC_VECTOR (17 downto 0) := "111111101000000000";
    constant ap_const_lv18_31 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000110001";
    constant ap_const_lv18_880 : STD_LOGIC_VECTOR (17 downto 0) := "000000100010000000";
    constant ap_const_lv18_196EE : STD_LOGIC_VECTOR (17 downto 0) := "011001011011101110";
    constant ap_const_lv18_10B53 : STD_LOGIC_VECTOR (17 downto 0) := "010000101101010011";
    constant ap_const_lv18_7F80 : STD_LOGIC_VECTOR (17 downto 0) := "000111111110000000";
    constant ap_const_lv18_D47 : STD_LOGIC_VECTOR (17 downto 0) := "000000110101000111";
    constant ap_const_lv18_131CC : STD_LOGIC_VECTOR (17 downto 0) := "010011000111001100";
    constant ap_const_lv18_C47 : STD_LOGIC_VECTOR (17 downto 0) := "000000110001000111";
    constant ap_const_lv18_EEFA : STD_LOGIC_VECTOR (17 downto 0) := "001110111011111010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv11_56F : STD_LOGIC_VECTOR (10 downto 0) := "10101101111";
    constant ap_const_lv11_5C1 : STD_LOGIC_VECTOR (10 downto 0) := "10111000001";
    constant ap_const_lv11_68 : STD_LOGIC_VECTOR (10 downto 0) := "00001101000";
    constant ap_const_lv11_6A3 : STD_LOGIC_VECTOR (10 downto 0) := "11010100011";
    constant ap_const_lv11_57B : STD_LOGIC_VECTOR (10 downto 0) := "10101111011";
    constant ap_const_lv11_73D : STD_LOGIC_VECTOR (10 downto 0) := "11100111101";
    constant ap_const_lv11_7BC : STD_LOGIC_VECTOR (10 downto 0) := "11110111100";
    constant ap_const_lv11_A6 : STD_LOGIC_VECTOR (10 downto 0) := "00010100110";
    constant ap_const_lv11_69 : STD_LOGIC_VECTOR (10 downto 0) := "00001101001";
    constant ap_const_lv11_5BA : STD_LOGIC_VECTOR (10 downto 0) := "10110111010";
    constant ap_const_lv11_631 : STD_LOGIC_VECTOR (10 downto 0) := "11000110001";
    constant ap_const_lv11_268 : STD_LOGIC_VECTOR (10 downto 0) := "01001101000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal icmp_ln4_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_94_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_94_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_94_reg_538_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_95_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_95_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_96_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_96_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_96_reg_553_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_97_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_97_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_97_reg_559_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_98_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_98_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_99_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_99_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_100_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_100_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_100_reg_576_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_101_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_101_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_101_reg_581_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_102_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_102_reg_586 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_102_reg_586_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_103_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_103_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_103_reg_591_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_103_reg_591_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_reg_596 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_104_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_104_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_105_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_105_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_105_reg_614_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_74_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_74_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_76_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_76_reg_626 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_88_fu_321_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_88_reg_634 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln120_80_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_80_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_95_fu_440_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_95_reg_645 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal xor_ln107_42_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_43_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_46_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_103_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_9_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_10_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_106_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_83_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_309_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln120_73_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_fu_313_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln107_44_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_107_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_45_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_110_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_108_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_109_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_78_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_111_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_15_fu_387_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_75_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_89_fu_390_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_90_fu_397_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_77_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_91_fu_405_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_92_fu_412_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln120_16_fu_420_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_79_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_93_fu_424_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_94_fu_432_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln105_112_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_81_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_468_p25 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_468_p26 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_82_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_468_p27 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln120_97_fu_524_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read1_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read7_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_468_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_468_p23 : STD_LOGIC_VECTOR (3 downto 0);

    component my_prj_accelerator_sparsemux_25_4_11_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        din9 : IN STD_LOGIC_VECTOR (10 downto 0);
        din10 : IN STD_LOGIC_VECTOR (10 downto 0);
        din11 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_25_4_11_1_0_U119 : component my_prj_accelerator_sparsemux_25_4_11_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        CASE9 => "1001",
        din9_WIDTH => 11,
        CASE10 => "1010",
        din10_WIDTH => 11,
        CASE11 => "1011",
        din11_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_56F,
        din1 => ap_const_lv11_5C1,
        din2 => ap_const_lv11_68,
        din3 => ap_const_lv11_6A3,
        din4 => ap_const_lv11_57B,
        din5 => ap_const_lv11_73D,
        din6 => ap_const_lv11_7BC,
        din7 => ap_const_lv11_A6,
        din8 => ap_const_lv11_69,
        din9 => ap_const_lv11_5BA,
        din10 => ap_const_lv11_631,
        din11 => ap_const_lv11_268,
        def => tmp_fu_468_p25,
        sel => tmp_fu_468_p26,
        dout => tmp_fu_468_p27);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_104_reg_608 <= and_ln105_104_fu_256_p2;
                and_ln105_105_reg_614 <= and_ln105_105_fu_261_p2;
                and_ln105_105_reg_614_pp0_iter2_reg <= and_ln105_105_reg_614;
                and_ln107_reg_602 <= and_ln107_fu_233_p2;
                icmp_ln4_100_reg_576 <= icmp_ln4_100_fu_198_p2;
                icmp_ln4_100_reg_576_pp0_iter1_reg <= icmp_ln4_100_reg_576;
                icmp_ln4_101_reg_581 <= icmp_ln4_101_fu_204_p2;
                icmp_ln4_101_reg_581_pp0_iter1_reg <= icmp_ln4_101_reg_581;
                icmp_ln4_102_reg_586 <= icmp_ln4_102_fu_210_p2;
                icmp_ln4_102_reg_586_pp0_iter1_reg <= icmp_ln4_102_reg_586;
                icmp_ln4_103_reg_591 <= icmp_ln4_103_fu_216_p2;
                icmp_ln4_103_reg_591_pp0_iter1_reg <= icmp_ln4_103_reg_591;
                icmp_ln4_103_reg_591_pp0_iter2_reg <= icmp_ln4_103_reg_591_pp0_iter1_reg;
                icmp_ln4_94_reg_538 <= icmp_ln4_94_fu_162_p2;
                icmp_ln4_94_reg_538_pp0_iter1_reg <= icmp_ln4_94_reg_538;
                icmp_ln4_95_reg_546 <= icmp_ln4_95_fu_168_p2;
                icmp_ln4_96_reg_553 <= icmp_ln4_96_fu_174_p2;
                icmp_ln4_96_reg_553_pp0_iter1_reg <= icmp_ln4_96_reg_553;
                icmp_ln4_97_reg_559 <= icmp_ln4_97_fu_180_p2;
                icmp_ln4_97_reg_559_pp0_iter1_reg <= icmp_ln4_97_reg_559;
                icmp_ln4_98_reg_565 <= icmp_ln4_98_fu_186_p2;
                icmp_ln4_99_reg_571 <= icmp_ln4_99_fu_192_p2;
                icmp_ln4_reg_532 <= icmp_ln4_fu_156_p2;
                or_ln120_74_reg_620 <= or_ln120_74_fu_294_p2;
                or_ln120_76_reg_626 <= or_ln120_76_fu_300_p2;
                or_ln120_80_reg_639 <= or_ln120_80_fu_383_p2;
                select_ln120_88_reg_634 <= select_ln120_88_fu_321_p3;
                select_ln120_95_reg_645 <= select_ln120_95_fu_440_p3;
                xor_ln107_reg_596 <= xor_ln107_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln120_97_fu_524_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
                p_read7_int_reg <= p_read7;
            end if;
        end if;
    end process;
    and_ln105_103_fu_252_p2 <= (icmp_ln4_96_reg_553 and icmp_ln4_94_reg_538);
    and_ln105_104_fu_256_p2 <= (icmp_ln4_97_reg_559 and and_ln107_fu_233_p2);
    and_ln105_105_fu_261_p2 <= (icmp_ln4_98_reg_565 and and_ln105_fu_238_p2);
    and_ln105_106_fu_277_p2 <= (icmp_ln4_99_reg_571 and and_ln105_103_fu_252_p2);
    and_ln105_107_fu_339_p2 <= (xor_ln107_44_fu_329_p2 and icmp_ln4_100_reg_576_pp0_iter1_reg);
    and_ln105_108_fu_344_p2 <= (icmp_ln4_94_reg_538_pp0_iter1_reg and and_ln105_107_fu_339_p2);
    and_ln105_109_fu_349_p2 <= (icmp_ln4_101_reg_581_pp0_iter1_reg and and_ln105_104_reg_608);
    and_ln105_110_fu_353_p2 <= (xor_ln107_45_fu_334_p2 and icmp_ln4_102_reg_586_pp0_iter1_reg);
    and_ln105_111_fu_358_p2 <= (and_ln107_reg_602 and and_ln105_110_fu_353_p2);
    and_ln105_112_fu_448_p2 <= (icmp_ln4_103_reg_591_pp0_iter2_reg and and_ln105_105_reg_614_pp0_iter2_reg);
    and_ln105_fu_238_p2 <= (xor_ln107_reg_596 and icmp_ln4_95_reg_546);
    and_ln107_10_fu_271_p2 <= (xor_ln107_46_fu_266_p2 and and_ln105_fu_238_p2);
    and_ln107_9_fu_247_p2 <= (xor_ln107_reg_596 and xor_ln107_43_fu_242_p2);
    and_ln107_fu_233_p2 <= (xor_ln107_42_fu_228_p2 and icmp_ln4_reg_532);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln120_97_fu_524_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln120_97_fu_524_p3;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_100_fu_198_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_D47)) else "0";
    icmp_ln4_101_fu_204_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_131CC)) else "0";
    icmp_ln4_102_fu_210_p2 <= "1" when (signed(p_read4_int_reg) < signed(ap_const_lv18_C47)) else "0";
    icmp_ln4_103_fu_216_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_EEFA)) else "0";
    icmp_ln4_94_fu_162_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_3FA00)) else "0";
    icmp_ln4_95_fu_168_p2 <= "1" when (signed(p_read7_int_reg) < signed(ap_const_lv18_31)) else "0";
    icmp_ln4_96_fu_174_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_880)) else "0";
    icmp_ln4_97_fu_180_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_196EE)) else "0";
    icmp_ln4_98_fu_186_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_10B53)) else "0";
    icmp_ln4_99_fu_192_p2 <= "1" when (signed(p_read5_int_reg) < signed(ap_const_lv18_7F80)) else "0";
    icmp_ln4_fu_156_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_600)) else "0";
    or_ln120_73_fu_288_p2 <= (or_ln120_fu_282_p2 or and_ln105_106_fu_277_p2);
    or_ln120_74_fu_294_p2 <= (or_ln120_fu_282_p2 or and_ln105_103_fu_252_p2);
    or_ln120_75_fu_363_p2 <= (or_ln120_74_reg_620 or and_ln105_108_fu_344_p2);
    or_ln120_76_fu_300_p2 <= (or_ln120_fu_282_p2 or icmp_ln4_94_reg_538);
    or_ln120_77_fu_368_p2 <= (or_ln120_76_reg_626 or and_ln105_109_fu_349_p2);
    or_ln120_78_fu_373_p2 <= (or_ln120_76_reg_626 or and_ln105_104_reg_608);
    or_ln120_79_fu_377_p2 <= (or_ln120_78_fu_373_p2 or and_ln105_111_fu_358_p2);
    or_ln120_80_fu_383_p2 <= (or_ln120_76_reg_626 or and_ln107_reg_602);
    or_ln120_81_fu_452_p2 <= (or_ln120_80_reg_639 or and_ln105_112_fu_448_p2);
    or_ln120_82_fu_457_p2 <= (or_ln120_80_reg_639 or and_ln105_105_reg_614_pp0_iter2_reg);
    or_ln120_83_fu_305_p2 <= (icmp_ln4_reg_532 or icmp_ln4_95_reg_546);
    or_ln120_fu_282_p2 <= (and_ln107_9_fu_247_p2 or and_ln107_10_fu_271_p2);
    select_ln120_88_fu_321_p3 <= 
        select_ln120_fu_313_p3 when (or_ln120_73_fu_288_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_89_fu_390_p3 <= 
        zext_ln120_15_fu_387_p1 when (or_ln120_74_reg_620(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_90_fu_397_p3 <= 
        select_ln120_89_fu_390_p3 when (or_ln120_75_fu_363_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_91_fu_405_p3 <= 
        select_ln120_90_fu_397_p3 when (or_ln120_76_reg_626(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_92_fu_412_p3 <= 
        select_ln120_91_fu_405_p3 when (or_ln120_77_fu_368_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_93_fu_424_p3 <= 
        zext_ln120_16_fu_420_p1 when (or_ln120_78_fu_373_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln120_94_fu_432_p3 <= 
        select_ln120_93_fu_424_p3 when (or_ln120_79_fu_377_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln120_95_fu_440_p3 <= 
        select_ln120_94_fu_432_p3 when (or_ln120_80_fu_383_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln120_97_fu_524_p3 <= 
        tmp_fu_468_p27 when (or_ln120_82_fu_457_p2(0) = '1') else 
        ap_const_lv11_0;
    select_ln120_fu_313_p3 <= 
        zext_ln120_fu_309_p1 when (or_ln120_fu_282_p2(0) = '1') else 
        ap_const_lv2_2;
    tmp_fu_468_p25 <= "XXXXXXXXXXX";
    tmp_fu_468_p26 <= 
        select_ln120_95_reg_645 when (or_ln120_81_fu_452_p2(0) = '1') else 
        ap_const_lv4_B;
    xor_ln107_42_fu_228_p2 <= (icmp_ln4_94_reg_538 xor ap_const_lv1_1);
    xor_ln107_43_fu_242_p2 <= (icmp_ln4_95_reg_546 xor ap_const_lv1_1);
    xor_ln107_44_fu_329_p2 <= (icmp_ln4_96_reg_553_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_45_fu_334_p2 <= (icmp_ln4_97_reg_559_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_46_fu_266_p2 <= (icmp_ln4_98_reg_565 xor ap_const_lv1_1);
    xor_ln107_fu_222_p2 <= (icmp_ln4_fu_156_p2 xor ap_const_lv1_1);
    zext_ln120_15_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_88_reg_634),3));
    zext_ln120_16_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_92_fu_412_p3),4));
    zext_ln120_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln120_83_fu_305_p2),2));
end behav;
