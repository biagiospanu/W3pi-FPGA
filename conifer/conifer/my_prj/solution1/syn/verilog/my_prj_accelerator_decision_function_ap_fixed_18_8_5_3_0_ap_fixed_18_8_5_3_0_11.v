// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_11 (
        ap_clk,
        ap_rst,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] p_read1;
input  [17:0] p_read2;
input  [17:0] p_read3;
input  [17:0] p_read4;
input  [17:0] p_read5;
input  [17:0] p_read6;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_130_p2;
reg   [0:0] icmp_ln4_reg_420;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln4_137_fu_136_p2;
reg   [0:0] icmp_ln4_137_reg_427;
wire   [0:0] icmp_ln4_138_fu_142_p2;
reg   [0:0] icmp_ln4_138_reg_433;
wire   [0:0] icmp_ln4_139_fu_148_p2;
reg   [0:0] icmp_ln4_139_reg_439;
reg   [0:0] icmp_ln4_139_reg_439_pp0_iter1_reg;
wire   [0:0] icmp_ln4_140_fu_154_p2;
reg   [0:0] icmp_ln4_140_reg_445;
reg   [0:0] icmp_ln4_140_reg_445_pp0_iter1_reg;
wire   [0:0] icmp_ln4_141_fu_160_p2;
reg   [0:0] icmp_ln4_141_reg_451;
reg   [0:0] icmp_ln4_141_reg_451_pp0_iter1_reg;
wire   [0:0] icmp_ln4_142_fu_166_p2;
reg   [0:0] icmp_ln4_142_reg_456;
reg   [0:0] icmp_ln4_142_reg_456_pp0_iter1_reg;
wire   [0:0] icmp_ln4_143_fu_172_p2;
reg   [0:0] icmp_ln4_143_reg_461;
reg   [0:0] icmp_ln4_143_reg_461_pp0_iter1_reg;
reg   [0:0] icmp_ln4_143_reg_461_pp0_iter2_reg;
wire   [0:0] and_ln105_fu_183_p2;
reg   [0:0] and_ln105_reg_466;
wire   [0:0] and_ln107_fu_192_p2;
reg   [0:0] and_ln107_reg_471;
wire   [0:0] and_ln105_124_fu_197_p2;
reg   [0:0] and_ln105_124_reg_478;
wire   [0:0] or_ln120_fu_213_p2;
reg   [0:0] or_ln120_reg_484;
wire   [0:0] and_ln107_15_fu_237_p2;
reg   [0:0] and_ln107_15_reg_490;
wire   [0:0] or_ln120_117_fu_280_p2;
reg   [0:0] or_ln120_117_reg_496;
wire   [2:0] select_ln120_132_fu_329_p3;
reg   [2:0] select_ln120_132_reg_503;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_62_fu_187_p2;
wire   [0:0] xor_ln107_fu_178_p2;
wire   [0:0] xor_ln107_63_fu_202_p2;
wire   [0:0] and_ln107_14_fu_207_p2;
wire   [0:0] xor_ln107_65_fu_232_p2;
wire   [0:0] and_ln105_125_fu_219_p2;
wire   [0:0] xor_ln107_64_fu_223_p2;
wire   [0:0] and_ln105_130_fu_247_p2;
wire   [0:0] and_ln105_126_fu_228_p2;
wire   [0:0] or_ln120_113_fu_257_p2;
wire   [0:0] and_ln105_127_fu_242_p2;
wire   [0:0] or_ln120_115_fu_268_p2;
wire   [0:0] and_ln105_128_fu_252_p2;
wire   [0:0] xor_ln120_fu_285_p2;
wire   [1:0] zext_ln120_fu_290_p1;
wire   [1:0] select_ln120_fu_294_p3;
wire   [1:0] select_ln120_129_fu_301_p3;
wire   [0:0] or_ln120_114_fu_262_p2;
wire   [2:0] zext_ln120_23_fu_309_p1;
wire   [2:0] select_ln120_130_fu_313_p3;
wire   [0:0] or_ln120_116_fu_274_p2;
wire   [2:0] select_ln120_131_fu_321_p3;
wire   [0:0] and_ln105_129_fu_337_p2;
wire   [2:0] select_ln120_133_fu_350_p3;
wire   [0:0] or_ln120_118_fu_341_p2;
wire   [3:0] zext_ln120_24_fu_356_p1;
wire   [10:0] tmp_fu_368_p19;
wire   [3:0] tmp_fu_368_p20;
wire   [0:0] or_ln120_119_fu_346_p2;
wire   [10:0] tmp_fu_368_p21;
wire   [10:0] select_ln120_135_fu_412_p3;
reg    ap_ce_reg;
reg   [17:0] p_read1_int_reg;
reg   [17:0] p_read2_int_reg;
reg   [17:0] p_read3_int_reg;
reg   [17:0] p_read4_int_reg;
reg   [17:0] p_read5_int_reg;
reg   [17:0] p_read6_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] tmp_fu_368_p1;
wire   [3:0] tmp_fu_368_p3;
wire   [3:0] tmp_fu_368_p5;
wire   [3:0] tmp_fu_368_p7;
wire   [3:0] tmp_fu_368_p9;
wire   [3:0] tmp_fu_368_p11;
wire   [3:0] tmp_fu_368_p13;
wire   [3:0] tmp_fu_368_p15;
wire  signed [3:0] tmp_fu_368_p17;

my_prj_accelerator_sparsemux_19_4_11_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_19_4_11_1_0_U166(
    .din0(11'd1499),
    .din1(11'd1471),
    .din2(11'd1615),
    .din3(11'd1726),
    .din4(11'd100),
    .din5(11'd357),
    .din6(11'd1965),
    .din7(11'd518),
    .din8(11'd1681),
    .def(tmp_fu_368_p19),
    .sel(tmp_fu_368_p20),
    .dout(tmp_fu_368_p21)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_124_reg_478 <= and_ln105_124_fu_197_p2;
        and_ln105_reg_466 <= and_ln105_fu_183_p2;
        and_ln107_15_reg_490 <= and_ln107_15_fu_237_p2;
        and_ln107_reg_471 <= and_ln107_fu_192_p2;
        icmp_ln4_137_reg_427 <= icmp_ln4_137_fu_136_p2;
        icmp_ln4_138_reg_433 <= icmp_ln4_138_fu_142_p2;
        icmp_ln4_139_reg_439 <= icmp_ln4_139_fu_148_p2;
        icmp_ln4_139_reg_439_pp0_iter1_reg <= icmp_ln4_139_reg_439;
        icmp_ln4_140_reg_445 <= icmp_ln4_140_fu_154_p2;
        icmp_ln4_140_reg_445_pp0_iter1_reg <= icmp_ln4_140_reg_445;
        icmp_ln4_141_reg_451 <= icmp_ln4_141_fu_160_p2;
        icmp_ln4_141_reg_451_pp0_iter1_reg <= icmp_ln4_141_reg_451;
        icmp_ln4_142_reg_456 <= icmp_ln4_142_fu_166_p2;
        icmp_ln4_142_reg_456_pp0_iter1_reg <= icmp_ln4_142_reg_456;
        icmp_ln4_143_reg_461 <= icmp_ln4_143_fu_172_p2;
        icmp_ln4_143_reg_461_pp0_iter1_reg <= icmp_ln4_143_reg_461;
        icmp_ln4_143_reg_461_pp0_iter2_reg <= icmp_ln4_143_reg_461_pp0_iter1_reg;
        icmp_ln4_reg_420 <= icmp_ln4_fu_130_p2;
        or_ln120_117_reg_496 <= or_ln120_117_fu_280_p2;
        or_ln120_reg_484 <= or_ln120_fu_213_p2;
        select_ln120_132_reg_503 <= select_ln120_132_fu_329_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln120_135_fu_412_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        p_read1_int_reg <= p_read1;
        p_read2_int_reg <= p_read2;
        p_read3_int_reg <= p_read3;
        p_read4_int_reg <= p_read4;
        p_read5_int_reg <= p_read5;
        p_read6_int_reg <= p_read6;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln120_135_fu_412_p3;
    end else begin
        ap_return = 'bx;
    end
end

assign and_ln105_124_fu_197_p2 = (xor_ln107_fu_178_p2 & icmp_ln4_138_reg_433);

assign and_ln105_125_fu_219_p2 = (icmp_ln4_139_reg_439_pp0_iter1_reg & and_ln107_reg_471);

assign and_ln105_126_fu_228_p2 = (icmp_ln4_140_reg_445_pp0_iter1_reg & and_ln105_124_reg_478);

assign and_ln105_127_fu_242_p2 = (icmp_ln4_141_reg_451_pp0_iter1_reg & and_ln105_125_fu_219_p2);

assign and_ln105_128_fu_252_p2 = (and_ln107_reg_471 & and_ln105_130_fu_247_p2);

assign and_ln105_129_fu_337_p2 = (icmp_ln4_143_reg_461_pp0_iter2_reg & and_ln107_15_reg_490);

assign and_ln105_130_fu_247_p2 = (xor_ln107_64_fu_223_p2 & icmp_ln4_142_reg_456_pp0_iter1_reg);

assign and_ln105_fu_183_p2 = (icmp_ln4_reg_420 & icmp_ln4_137_reg_427);

assign and_ln107_14_fu_207_p2 = (xor_ln107_fu_178_p2 & xor_ln107_63_fu_202_p2);

assign and_ln107_15_fu_237_p2 = (xor_ln107_65_fu_232_p2 & and_ln105_124_reg_478);

assign and_ln107_fu_192_p2 = (xor_ln107_62_fu_187_p2 & icmp_ln4_reg_420);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_137_fu_136_p2 = (($signed(p_read2_int_reg) < $signed(18'd1754)) ? 1'b1 : 1'b0);

assign icmp_ln4_138_fu_142_p2 = (($signed(p_read6_int_reg) < $signed(18'd49)) ? 1'b1 : 1'b0);

assign icmp_ln4_139_fu_148_p2 = (($signed(p_read4_int_reg) < $signed(18'd32128)) ? 1'b1 : 1'b0);

assign icmp_ln4_140_fu_154_p2 = (($signed(p_read1_int_reg) < $signed(18'd13696)) ? 1'b1 : 1'b0);

assign icmp_ln4_141_fu_160_p2 = (($signed(p_read3_int_reg) < $signed(18'd2488)) ? 1'b1 : 1'b0);

assign icmp_ln4_142_fu_166_p2 = (($signed(p_read3_int_reg) < $signed(18'd2320)) ? 1'b1 : 1'b0);

assign icmp_ln4_143_fu_172_p2 = (($signed(p_read1_int_reg) < $signed(18'd19072)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_130_p2 = (($signed(p_read5_int_reg) < $signed(18'd1536)) ? 1'b1 : 1'b0);

assign or_ln120_113_fu_257_p2 = (or_ln120_reg_484 | and_ln105_126_fu_228_p2);

assign or_ln120_114_fu_262_p2 = (or_ln120_113_fu_257_p2 | and_ln105_127_fu_242_p2);

assign or_ln120_115_fu_268_p2 = (or_ln120_113_fu_257_p2 | and_ln105_125_fu_219_p2);

assign or_ln120_116_fu_274_p2 = (or_ln120_115_fu_268_p2 | and_ln105_128_fu_252_p2);

assign or_ln120_117_fu_280_p2 = (or_ln120_113_fu_257_p2 | and_ln107_reg_471);

assign or_ln120_118_fu_341_p2 = (or_ln120_117_reg_496 | and_ln105_129_fu_337_p2);

assign or_ln120_119_fu_346_p2 = (or_ln120_117_reg_496 | and_ln107_15_reg_490);

assign or_ln120_fu_213_p2 = (and_ln107_14_fu_207_p2 | and_ln105_fu_183_p2);

assign select_ln120_129_fu_301_p3 = ((or_ln120_113_fu_257_p2[0:0] == 1'b1) ? select_ln120_fu_294_p3 : 2'd3);

assign select_ln120_130_fu_313_p3 = ((or_ln120_114_fu_262_p2[0:0] == 1'b1) ? zext_ln120_23_fu_309_p1 : 3'd4);

assign select_ln120_131_fu_321_p3 = ((or_ln120_115_fu_268_p2[0:0] == 1'b1) ? select_ln120_130_fu_313_p3 : 3'd5);

assign select_ln120_132_fu_329_p3 = ((or_ln120_116_fu_274_p2[0:0] == 1'b1) ? select_ln120_131_fu_321_p3 : 3'd6);

assign select_ln120_133_fu_350_p3 = ((or_ln120_117_reg_496[0:0] == 1'b1) ? select_ln120_132_reg_503 : 3'd7);

assign select_ln120_135_fu_412_p3 = ((or_ln120_119_fu_346_p2[0:0] == 1'b1) ? tmp_fu_368_p21 : 11'd0);

assign select_ln120_fu_294_p3 = ((or_ln120_reg_484[0:0] == 1'b1) ? zext_ln120_fu_290_p1 : 2'd2);

assign tmp_fu_368_p19 = 'bx;

assign tmp_fu_368_p20 = ((or_ln120_118_fu_341_p2[0:0] == 1'b1) ? zext_ln120_24_fu_356_p1 : 4'd8);

assign xor_ln107_62_fu_187_p2 = (icmp_ln4_137_reg_427 ^ 1'd1);

assign xor_ln107_63_fu_202_p2 = (icmp_ln4_138_reg_433 ^ 1'd1);

assign xor_ln107_64_fu_223_p2 = (icmp_ln4_139_reg_439_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_65_fu_232_p2 = (icmp_ln4_140_reg_445_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_fu_178_p2 = (icmp_ln4_reg_420 ^ 1'd1);

assign xor_ln120_fu_285_p2 = (1'd1 ^ and_ln105_reg_466);

assign zext_ln120_23_fu_309_p1 = select_ln120_129_fu_301_p3;

assign zext_ln120_24_fu_356_p1 = select_ln120_133_fu_350_p3;

assign zext_ln120_fu_290_p1 = xor_ln120_fu_285_p2;

endmodule //my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_11
