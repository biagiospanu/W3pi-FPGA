// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_15 (
        ap_clk,
        ap_rst,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] p_read1;
input  [17:0] p_read2;
input  [17:0] p_read3;
input  [17:0] p_read4;
input  [17:0] p_read5;
input  [17:0] p_read6;
input  [17:0] p_read7;
input  [17:0] p_read8;
input  [17:0] p_read9;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_194_p2;
reg   [0:0] icmp_ln4_reg_667;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln4_reg_667_pp0_iter1_reg;
reg   [0:0] icmp_ln4_reg_667_pp0_iter2_reg;
wire   [0:0] icmp_ln4_104_fu_200_p2;
reg   [0:0] icmp_ln4_104_reg_678;
wire   [0:0] icmp_ln4_105_fu_206_p2;
reg   [0:0] icmp_ln4_105_reg_684;
wire   [0:0] icmp_ln4_106_fu_212_p2;
reg   [0:0] icmp_ln4_106_reg_690;
wire   [0:0] icmp_ln4_107_fu_218_p2;
reg   [0:0] icmp_ln4_107_reg_696;
reg   [0:0] icmp_ln4_107_reg_696_pp0_iter1_reg;
wire   [0:0] icmp_ln4_108_fu_224_p2;
reg   [0:0] icmp_ln4_108_reg_702;
reg   [0:0] icmp_ln4_108_reg_702_pp0_iter1_reg;
reg   [0:0] icmp_ln4_108_reg_702_pp0_iter2_reg;
wire   [0:0] icmp_ln4_109_fu_230_p2;
reg   [0:0] icmp_ln4_109_reg_708;
reg   [0:0] icmp_ln4_109_reg_708_pp0_iter1_reg;
reg   [0:0] icmp_ln4_109_reg_708_pp0_iter2_reg;
reg   [0:0] icmp_ln4_109_reg_708_pp0_iter3_reg;
wire   [0:0] icmp_ln4_110_fu_236_p2;
reg   [0:0] icmp_ln4_110_reg_714;
reg   [0:0] icmp_ln4_110_reg_714_pp0_iter1_reg;
wire   [0:0] icmp_ln4_111_fu_242_p2;
reg   [0:0] icmp_ln4_111_reg_719;
wire   [0:0] icmp_ln4_112_fu_248_p2;
reg   [0:0] icmp_ln4_112_reg_724;
reg   [0:0] icmp_ln4_112_reg_724_pp0_iter1_reg;
wire   [0:0] icmp_ln4_113_fu_254_p2;
reg   [0:0] icmp_ln4_113_reg_729;
reg   [0:0] icmp_ln4_113_reg_729_pp0_iter1_reg;
wire   [0:0] icmp_ln4_114_fu_260_p2;
reg   [0:0] icmp_ln4_114_reg_734;
reg   [0:0] icmp_ln4_114_reg_734_pp0_iter1_reg;
reg   [0:0] icmp_ln4_114_reg_734_pp0_iter2_reg;
wire   [0:0] icmp_ln4_115_fu_266_p2;
reg   [0:0] icmp_ln4_115_reg_739;
reg   [0:0] icmp_ln4_115_reg_739_pp0_iter1_reg;
reg   [0:0] icmp_ln4_115_reg_739_pp0_iter2_reg;
wire   [0:0] icmp_ln4_116_fu_272_p2;
reg   [0:0] icmp_ln4_116_reg_744;
reg   [0:0] icmp_ln4_116_reg_744_pp0_iter1_reg;
reg   [0:0] icmp_ln4_116_reg_744_pp0_iter2_reg;
wire   [0:0] icmp_ln4_117_fu_278_p2;
reg   [0:0] icmp_ln4_117_reg_749;
reg   [0:0] icmp_ln4_117_reg_749_pp0_iter1_reg;
reg   [0:0] icmp_ln4_117_reg_749_pp0_iter2_reg;
reg   [0:0] icmp_ln4_117_reg_749_pp0_iter3_reg;
wire   [0:0] and_ln105_fu_289_p2;
reg   [0:0] and_ln105_reg_754;
wire   [0:0] and_ln107_fu_298_p2;
reg   [0:0] and_ln107_reg_761;
wire   [0:0] and_ln105_113_fu_303_p2;
reg   [0:0] and_ln105_113_reg_766;
reg   [0:0] and_ln105_113_reg_766_pp0_iter2_reg;
wire   [0:0] and_ln107_11_fu_313_p2;
reg   [0:0] and_ln107_11_reg_773;
reg   [0:0] and_ln107_11_reg_773_pp0_iter2_reg;
reg   [0:0] and_ln107_11_reg_773_pp0_iter3_reg;
wire   [0:0] and_ln105_114_fu_319_p2;
reg   [0:0] and_ln105_114_reg_779;
wire   [0:0] and_ln105_115_fu_329_p2;
reg   [0:0] and_ln105_115_reg_785;
wire   [0:0] or_ln120_fu_345_p2;
reg   [0:0] or_ln120_reg_791;
wire   [0:0] and_ln105_116_fu_356_p2;
reg   [0:0] and_ln105_116_reg_796;
wire   [0:0] or_ln120_88_fu_393_p2;
reg   [0:0] or_ln120_88_reg_801;
wire   [3:0] select_ln120_103_fu_461_p3;
reg   [3:0] select_ln120_103_reg_807;
wire   [0:0] or_ln120_92_fu_516_p2;
reg   [0:0] or_ln120_92_reg_812;
wire   [3:0] select_ln120_109_fu_560_p3;
reg   [3:0] select_ln120_109_reg_817;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_47_fu_293_p2;
wire   [0:0] xor_ln107_fu_284_p2;
wire   [0:0] xor_ln107_48_fu_308_p2;
wire   [0:0] xor_ln107_49_fu_324_p2;
wire   [0:0] and_ln105_119_fu_334_p2;
wire   [0:0] and_ln105_120_fu_339_p2;
wire   [0:0] xor_ln107_50_fu_351_p2;
wire   [0:0] and_ln105_122_fu_368_p2;
wire   [0:0] and_ln105_121_fu_364_p2;
wire   [0:0] or_ln120_85_fu_383_p2;
wire   [0:0] and_ln105_123_fu_373_p2;
wire   [0:0] and_ln105_118_fu_360_p2;
wire   [0:0] xor_ln120_fu_398_p2;
wire   [1:0] zext_ln120_fu_404_p1;
wire   [1:0] select_ln120_fu_408_p3;
wire   [1:0] select_ln120_98_fu_415_p3;
wire   [2:0] zext_ln120_17_fu_422_p1;
wire   [0:0] or_ln120_84_fu_378_p2;
wire   [2:0] select_ln120_99_fu_426_p3;
wire   [2:0] select_ln120_100_fu_433_p3;
wire   [0:0] or_ln120_86_fu_387_p2;
wire   [2:0] select_ln120_101_fu_441_p3;
wire   [2:0] select_ln120_102_fu_449_p3;
wire   [3:0] zext_ln120_18_fu_457_p1;
wire   [0:0] xor_ln107_51_fu_468_p2;
wire   [0:0] and_ln105_125_fu_481_p2;
wire   [0:0] and_ln105_117_fu_473_p2;
wire   [0:0] and_ln105_124_fu_477_p2;
wire   [0:0] and_ln105_126_fu_486_p2;
wire   [0:0] or_ln120_90_fu_506_p2;
wire   [0:0] and_ln105_127_fu_491_p2;
wire   [0:0] or_ln120_87_fu_496_p2;
wire   [3:0] select_ln120_104_fu_522_p3;
wire   [0:0] or_ln120_89_fu_501_p2;
wire   [3:0] select_ln120_105_fu_529_p3;
wire   [3:0] select_ln120_106_fu_536_p3;
wire   [0:0] or_ln120_91_fu_510_p2;
wire   [3:0] select_ln120_107_fu_544_p3;
wire   [3:0] select_ln120_108_fu_552_p3;
wire   [0:0] xor_ln107_52_fu_568_p2;
wire   [0:0] and_ln105_128_fu_573_p2;
wire   [0:0] and_ln105_129_fu_578_p2;
wire   [0:0] or_ln120_93_fu_583_p2;
wire   [10:0] agg_result_fu_595_p33;
wire   [3:0] agg_result_fu_595_p34;
wire   [10:0] agg_result_fu_595_p35;
reg    ap_ce_reg;
reg   [17:0] p_read1_int_reg;
reg   [17:0] p_read2_int_reg;
reg   [17:0] p_read3_int_reg;
reg   [17:0] p_read4_int_reg;
reg   [17:0] p_read5_int_reg;
reg   [17:0] p_read6_int_reg;
reg   [17:0] p_read7_int_reg;
reg   [17:0] p_read8_int_reg;
reg   [17:0] p_read9_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] agg_result_fu_595_p1;
wire   [3:0] agg_result_fu_595_p3;
wire   [3:0] agg_result_fu_595_p5;
wire   [3:0] agg_result_fu_595_p7;
wire   [3:0] agg_result_fu_595_p9;
wire   [3:0] agg_result_fu_595_p11;
wire   [3:0] agg_result_fu_595_p13;
wire   [3:0] agg_result_fu_595_p15;
wire  signed [3:0] agg_result_fu_595_p17;
wire  signed [3:0] agg_result_fu_595_p19;
wire  signed [3:0] agg_result_fu_595_p21;
wire  signed [3:0] agg_result_fu_595_p23;
wire  signed [3:0] agg_result_fu_595_p25;
wire  signed [3:0] agg_result_fu_595_p27;
wire  signed [3:0] agg_result_fu_595_p29;
wire  signed [3:0] agg_result_fu_595_p31;

my_prj_accelerator_sparsemux_33_4_11_1_0_x2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 11 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_33_4_11_1_0_x2_U128(
    .din0(11'd1991),
    .din1(11'd1743),
    .din2(11'd1529),
    .din3(11'd2036),
    .din4(11'd1583),
    .din5(11'd446),
    .din6(11'd1803),
    .din7(11'd4),
    .din8(11'd644),
    .din9(11'd216),
    .din10(11'd1690),
    .din11(11'd49),
    .din12(11'd1916),
    .din13(11'd175),
    .din14(11'd1386),
    .din15(11'd1844),
    .def(agg_result_fu_595_p33),
    .sel(agg_result_fu_595_p34),
    .dout(agg_result_fu_595_p35)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_113_reg_766 <= and_ln105_113_fu_303_p2;
        and_ln105_113_reg_766_pp0_iter2_reg <= and_ln105_113_reg_766;
        and_ln105_114_reg_779 <= and_ln105_114_fu_319_p2;
        and_ln105_115_reg_785 <= and_ln105_115_fu_329_p2;
        and_ln105_116_reg_796 <= and_ln105_116_fu_356_p2;
        and_ln105_reg_754 <= and_ln105_fu_289_p2;
        and_ln107_11_reg_773 <= and_ln107_11_fu_313_p2;
        and_ln107_11_reg_773_pp0_iter2_reg <= and_ln107_11_reg_773;
        and_ln107_11_reg_773_pp0_iter3_reg <= and_ln107_11_reg_773_pp0_iter2_reg;
        and_ln107_reg_761 <= and_ln107_fu_298_p2;
        icmp_ln4_104_reg_678 <= icmp_ln4_104_fu_200_p2;
        icmp_ln4_105_reg_684 <= icmp_ln4_105_fu_206_p2;
        icmp_ln4_106_reg_690 <= icmp_ln4_106_fu_212_p2;
        icmp_ln4_107_reg_696 <= icmp_ln4_107_fu_218_p2;
        icmp_ln4_107_reg_696_pp0_iter1_reg <= icmp_ln4_107_reg_696;
        icmp_ln4_108_reg_702 <= icmp_ln4_108_fu_224_p2;
        icmp_ln4_108_reg_702_pp0_iter1_reg <= icmp_ln4_108_reg_702;
        icmp_ln4_108_reg_702_pp0_iter2_reg <= icmp_ln4_108_reg_702_pp0_iter1_reg;
        icmp_ln4_109_reg_708 <= icmp_ln4_109_fu_230_p2;
        icmp_ln4_109_reg_708_pp0_iter1_reg <= icmp_ln4_109_reg_708;
        icmp_ln4_109_reg_708_pp0_iter2_reg <= icmp_ln4_109_reg_708_pp0_iter1_reg;
        icmp_ln4_109_reg_708_pp0_iter3_reg <= icmp_ln4_109_reg_708_pp0_iter2_reg;
        icmp_ln4_110_reg_714 <= icmp_ln4_110_fu_236_p2;
        icmp_ln4_110_reg_714_pp0_iter1_reg <= icmp_ln4_110_reg_714;
        icmp_ln4_111_reg_719 <= icmp_ln4_111_fu_242_p2;
        icmp_ln4_112_reg_724 <= icmp_ln4_112_fu_248_p2;
        icmp_ln4_112_reg_724_pp0_iter1_reg <= icmp_ln4_112_reg_724;
        icmp_ln4_113_reg_729 <= icmp_ln4_113_fu_254_p2;
        icmp_ln4_113_reg_729_pp0_iter1_reg <= icmp_ln4_113_reg_729;
        icmp_ln4_114_reg_734 <= icmp_ln4_114_fu_260_p2;
        icmp_ln4_114_reg_734_pp0_iter1_reg <= icmp_ln4_114_reg_734;
        icmp_ln4_114_reg_734_pp0_iter2_reg <= icmp_ln4_114_reg_734_pp0_iter1_reg;
        icmp_ln4_115_reg_739 <= icmp_ln4_115_fu_266_p2;
        icmp_ln4_115_reg_739_pp0_iter1_reg <= icmp_ln4_115_reg_739;
        icmp_ln4_115_reg_739_pp0_iter2_reg <= icmp_ln4_115_reg_739_pp0_iter1_reg;
        icmp_ln4_116_reg_744 <= icmp_ln4_116_fu_272_p2;
        icmp_ln4_116_reg_744_pp0_iter1_reg <= icmp_ln4_116_reg_744;
        icmp_ln4_116_reg_744_pp0_iter2_reg <= icmp_ln4_116_reg_744_pp0_iter1_reg;
        icmp_ln4_117_reg_749 <= icmp_ln4_117_fu_278_p2;
        icmp_ln4_117_reg_749_pp0_iter1_reg <= icmp_ln4_117_reg_749;
        icmp_ln4_117_reg_749_pp0_iter2_reg <= icmp_ln4_117_reg_749_pp0_iter1_reg;
        icmp_ln4_117_reg_749_pp0_iter3_reg <= icmp_ln4_117_reg_749_pp0_iter2_reg;
        icmp_ln4_reg_667 <= icmp_ln4_fu_194_p2;
        icmp_ln4_reg_667_pp0_iter1_reg <= icmp_ln4_reg_667;
        icmp_ln4_reg_667_pp0_iter2_reg <= icmp_ln4_reg_667_pp0_iter1_reg;
        or_ln120_88_reg_801 <= or_ln120_88_fu_393_p2;
        or_ln120_92_reg_812 <= or_ln120_92_fu_516_p2;
        or_ln120_reg_791 <= or_ln120_fu_345_p2;
        select_ln120_103_reg_807 <= select_ln120_103_fu_461_p3;
        select_ln120_109_reg_817 <= select_ln120_109_fu_560_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_595_p35;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        p_read1_int_reg <= p_read1;
        p_read2_int_reg <= p_read2;
        p_read3_int_reg <= p_read3;
        p_read4_int_reg <= p_read4;
        p_read5_int_reg <= p_read5;
        p_read6_int_reg <= p_read6;
        p_read7_int_reg <= p_read7;
        p_read8_int_reg <= p_read8;
        p_read9_int_reg <= p_read9;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_595_p35;
    end else begin
        ap_return = 'bx;
    end
end

assign agg_result_fu_595_p33 = 'bx;

assign agg_result_fu_595_p34 = ((or_ln120_93_fu_583_p2[0:0] == 1'b1) ? select_ln120_109_reg_817 : 4'd15);

assign and_ln105_113_fu_303_p2 = (xor_ln107_fu_284_p2 & icmp_ln4_105_reg_684);

assign and_ln105_114_fu_319_p2 = (icmp_ln4_106_reg_690 & and_ln105_fu_289_p2);

assign and_ln105_115_fu_329_p2 = (icmp_ln4_107_reg_696 & and_ln107_fu_298_p2);

assign and_ln105_116_fu_356_p2 = (icmp_ln4_108_reg_702_pp0_iter1_reg & and_ln105_113_reg_766);

assign and_ln105_117_fu_473_p2 = (icmp_ln4_109_reg_708_pp0_iter2_reg & and_ln107_11_reg_773_pp0_iter2_reg);

assign and_ln105_118_fu_360_p2 = (icmp_ln4_110_reg_714_pp0_iter1_reg & and_ln105_114_reg_779);

assign and_ln105_119_fu_334_p2 = (xor_ln107_49_fu_324_p2 & icmp_ln4_111_reg_719);

assign and_ln105_120_fu_339_p2 = (and_ln105_fu_289_p2 & and_ln105_119_fu_334_p2);

assign and_ln105_121_fu_364_p2 = (icmp_ln4_112_reg_724_pp0_iter1_reg & and_ln105_115_reg_785);

assign and_ln105_122_fu_368_p2 = (xor_ln107_50_fu_351_p2 & icmp_ln4_113_reg_729_pp0_iter1_reg);

assign and_ln105_123_fu_373_p2 = (and_ln107_reg_761 & and_ln105_122_fu_368_p2);

assign and_ln105_124_fu_477_p2 = (icmp_ln4_114_reg_734_pp0_iter2_reg & and_ln105_116_reg_796);

assign and_ln105_125_fu_481_p2 = (xor_ln107_51_fu_468_p2 & icmp_ln4_115_reg_739_pp0_iter2_reg);

assign and_ln105_126_fu_486_p2 = (and_ln105_125_fu_481_p2 & and_ln105_113_reg_766_pp0_iter2_reg);

assign and_ln105_127_fu_491_p2 = (icmp_ln4_116_reg_744_pp0_iter2_reg & and_ln105_117_fu_473_p2);

assign and_ln105_128_fu_573_p2 = (xor_ln107_52_fu_568_p2 & icmp_ln4_117_reg_749_pp0_iter3_reg);

assign and_ln105_129_fu_578_p2 = (and_ln107_11_reg_773_pp0_iter3_reg & and_ln105_128_fu_573_p2);

assign and_ln105_fu_289_p2 = (icmp_ln4_reg_667 & icmp_ln4_104_reg_678);

assign and_ln107_11_fu_313_p2 = (xor_ln107_fu_284_p2 & xor_ln107_48_fu_308_p2);

assign and_ln107_fu_298_p2 = (xor_ln107_47_fu_293_p2 & icmp_ln4_reg_667);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_104_fu_200_p2 = (($signed(p_read3_int_reg) < $signed(18'd56050)) ? 1'b1 : 1'b0);

assign icmp_ln4_105_fu_206_p2 = (($signed(p_read5_int_reg) < $signed(18'd232)) ? 1'b1 : 1'b0);

assign icmp_ln4_106_fu_212_p2 = (($signed(p_read8_int_reg) < $signed(18'd620)) ? 1'b1 : 1'b0);

assign icmp_ln4_107_fu_218_p2 = (($signed(p_read7_int_reg) < $signed(18'd28288)) ? 1'b1 : 1'b0);

assign icmp_ln4_108_fu_224_p2 = (($signed(p_read8_int_reg) < $signed(18'd307)) ? 1'b1 : 1'b0);

assign icmp_ln4_109_fu_230_p2 = (($signed(p_read4_int_reg) < $signed(18'd85740)) ? 1'b1 : 1'b0);

assign icmp_ln4_110_fu_236_p2 = (($signed(p_read7_int_reg) < $signed(18'd22144)) ? 1'b1 : 1'b0);

assign icmp_ln4_111_fu_242_p2 = (($signed(p_read6_int_reg) < $signed(18'd5115)) ? 1'b1 : 1'b0);

assign icmp_ln4_112_fu_248_p2 = (($signed(p_read2_int_reg) < $signed(18'd8832)) ? 1'b1 : 1'b0);

assign icmp_ln4_113_fu_254_p2 = (($signed(p_read9_int_reg) < $signed(18'd262092)) ? 1'b1 : 1'b0);

assign icmp_ln4_114_fu_260_p2 = (($signed(p_read4_int_reg) < $signed(18'd42881)) ? 1'b1 : 1'b0);

assign icmp_ln4_115_fu_266_p2 = (($signed(p_read1_int_reg) < $signed(18'd4992)) ? 1'b1 : 1'b0);

assign icmp_ln4_116_fu_272_p2 = (($signed(p_read2_int_reg) < $signed(18'd23424)) ? 1'b1 : 1'b0);

assign icmp_ln4_117_fu_278_p2 = (($signed(p_read3_int_reg) < $signed(18'd69007)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_194_p2 = (($signed(p_read1_int_reg) < $signed(18'd4224)) ? 1'b1 : 1'b0);

assign or_ln120_84_fu_378_p2 = (and_ln105_reg_754 | and_ln105_121_fu_364_p2);

assign or_ln120_85_fu_383_p2 = (and_ln105_reg_754 | and_ln105_115_reg_785);

assign or_ln120_86_fu_387_p2 = (or_ln120_85_fu_383_p2 | and_ln105_123_fu_373_p2);

assign or_ln120_87_fu_496_p2 = (icmp_ln4_reg_667_pp0_iter2_reg | and_ln105_124_fu_477_p2);

assign or_ln120_88_fu_393_p2 = (icmp_ln4_reg_667_pp0_iter1_reg | and_ln105_116_fu_356_p2);

assign or_ln120_89_fu_501_p2 = (or_ln120_88_reg_801 | and_ln105_126_fu_486_p2);

assign or_ln120_90_fu_506_p2 = (icmp_ln4_reg_667_pp0_iter2_reg | and_ln105_113_reg_766_pp0_iter2_reg);

assign or_ln120_91_fu_510_p2 = (or_ln120_90_fu_506_p2 | and_ln105_127_fu_491_p2);

assign or_ln120_92_fu_516_p2 = (or_ln120_90_fu_506_p2 | and_ln105_117_fu_473_p2);

assign or_ln120_93_fu_583_p2 = (or_ln120_92_reg_812 | and_ln105_129_fu_578_p2);

assign or_ln120_fu_345_p2 = (and_ln105_120_fu_339_p2 | and_ln105_114_fu_319_p2);

assign select_ln120_100_fu_433_p3 = ((or_ln120_84_fu_378_p2[0:0] == 1'b1) ? select_ln120_99_fu_426_p3 : 3'd5);

assign select_ln120_101_fu_441_p3 = ((or_ln120_85_fu_383_p2[0:0] == 1'b1) ? select_ln120_100_fu_433_p3 : 3'd6);

assign select_ln120_102_fu_449_p3 = ((or_ln120_86_fu_387_p2[0:0] == 1'b1) ? select_ln120_101_fu_441_p3 : 3'd7);

assign select_ln120_103_fu_461_p3 = ((icmp_ln4_reg_667_pp0_iter1_reg[0:0] == 1'b1) ? zext_ln120_18_fu_457_p1 : 4'd8);

assign select_ln120_104_fu_522_p3 = ((or_ln120_87_fu_496_p2[0:0] == 1'b1) ? select_ln120_103_reg_807 : 4'd9);

assign select_ln120_105_fu_529_p3 = ((or_ln120_88_reg_801[0:0] == 1'b1) ? select_ln120_104_fu_522_p3 : 4'd10);

assign select_ln120_106_fu_536_p3 = ((or_ln120_89_fu_501_p2[0:0] == 1'b1) ? select_ln120_105_fu_529_p3 : 4'd11);

assign select_ln120_107_fu_544_p3 = ((or_ln120_90_fu_506_p2[0:0] == 1'b1) ? select_ln120_106_fu_536_p3 : 4'd12);

assign select_ln120_108_fu_552_p3 = ((or_ln120_91_fu_510_p2[0:0] == 1'b1) ? select_ln120_107_fu_544_p3 : 4'd13);

assign select_ln120_109_fu_560_p3 = ((or_ln120_92_fu_516_p2[0:0] == 1'b1) ? select_ln120_108_fu_552_p3 : 4'd14);

assign select_ln120_98_fu_415_p3 = ((or_ln120_reg_791[0:0] == 1'b1) ? select_ln120_fu_408_p3 : 2'd3);

assign select_ln120_99_fu_426_p3 = ((and_ln105_reg_754[0:0] == 1'b1) ? zext_ln120_17_fu_422_p1 : 3'd4);

assign select_ln120_fu_408_p3 = ((and_ln105_114_reg_779[0:0] == 1'b1) ? zext_ln120_fu_404_p1 : 2'd2);

assign xor_ln107_47_fu_293_p2 = (icmp_ln4_104_reg_678 ^ 1'd1);

assign xor_ln107_48_fu_308_p2 = (icmp_ln4_105_reg_684 ^ 1'd1);

assign xor_ln107_49_fu_324_p2 = (icmp_ln4_106_reg_690 ^ 1'd1);

assign xor_ln107_50_fu_351_p2 = (icmp_ln4_107_reg_696_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_51_fu_468_p2 = (icmp_ln4_108_reg_702_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_52_fu_568_p2 = (icmp_ln4_109_reg_708_pp0_iter3_reg ^ 1'd1);

assign xor_ln107_fu_284_p2 = (icmp_ln4_reg_667 ^ 1'd1);

assign xor_ln120_fu_398_p2 = (1'd1 ^ and_ln105_118_fu_360_p2);

assign zext_ln120_17_fu_422_p1 = select_ln120_98_fu_415_p3;

assign zext_ln120_18_fu_457_p1 = select_ln120_102_fu_449_p3;

assign zext_ln120_fu_404_p1 = xor_ln120_fu_398_p2;

endmodule //my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_15
