// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_5 (
        ap_clk,
        ap_rst,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] p_read1;
input  [17:0] p_read2;
input  [17:0] p_read3;
input  [17:0] p_read4;
input  [17:0] p_read5;
input  [17:0] p_read6;
input  [17:0] p_read7;
input  [17:0] p_read8;
output  [11:0] ap_return;
input   ap_ce;

reg[11:0] ap_return;

wire   [0:0] icmp_ln4_fu_188_p2;
reg   [0:0] icmp_ln4_reg_669;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln4_reg_669_pp0_iter1_reg;
wire   [0:0] icmp_ln4_46_fu_194_p2;
reg   [0:0] icmp_ln4_46_reg_676;
wire   [0:0] icmp_ln4_47_fu_200_p2;
reg   [0:0] icmp_ln4_47_reg_682;
wire   [0:0] icmp_ln4_48_fu_206_p2;
reg   [0:0] icmp_ln4_48_reg_688;
reg   [0:0] icmp_ln4_48_reg_688_pp0_iter1_reg;
wire   [0:0] icmp_ln4_49_fu_212_p2;
reg   [0:0] icmp_ln4_49_reg_694;
reg   [0:0] icmp_ln4_49_reg_694_pp0_iter1_reg;
reg   [0:0] icmp_ln4_49_reg_694_pp0_iter2_reg;
wire   [0:0] icmp_ln4_50_fu_218_p2;
reg   [0:0] icmp_ln4_50_reg_700;
reg   [0:0] icmp_ln4_50_reg_700_pp0_iter1_reg;
reg   [0:0] icmp_ln4_50_reg_700_pp0_iter2_reg;
wire   [0:0] icmp_ln4_51_fu_224_p2;
reg   [0:0] icmp_ln4_51_reg_706;
wire   [0:0] icmp_ln4_52_fu_230_p2;
reg   [0:0] icmp_ln4_52_reg_712;
reg   [0:0] icmp_ln4_52_reg_712_pp0_iter1_reg;
wire   [0:0] icmp_ln4_53_fu_236_p2;
reg   [0:0] icmp_ln4_53_reg_717;
reg   [0:0] icmp_ln4_53_reg_717_pp0_iter1_reg;
wire   [0:0] icmp_ln4_54_fu_242_p2;
reg   [0:0] icmp_ln4_54_reg_722;
reg   [0:0] icmp_ln4_54_reg_722_pp0_iter1_reg;
wire   [0:0] icmp_ln4_55_fu_248_p2;
reg   [0:0] icmp_ln4_55_reg_727;
reg   [0:0] icmp_ln4_55_reg_727_pp0_iter1_reg;
reg   [0:0] icmp_ln4_55_reg_727_pp0_iter2_reg;
wire   [0:0] icmp_ln4_56_fu_254_p2;
reg   [0:0] icmp_ln4_56_reg_732;
reg   [0:0] icmp_ln4_56_reg_732_pp0_iter1_reg;
reg   [0:0] icmp_ln4_56_reg_732_pp0_iter2_reg;
wire   [0:0] icmp_ln4_57_fu_260_p2;
reg   [0:0] icmp_ln4_57_reg_737;
reg   [0:0] icmp_ln4_57_reg_737_pp0_iter1_reg;
reg   [0:0] icmp_ln4_57_reg_737_pp0_iter2_reg;
wire   [0:0] icmp_ln4_58_fu_276_p2;
reg   [0:0] icmp_ln4_58_reg_742;
reg   [0:0] icmp_ln4_58_reg_742_pp0_iter1_reg;
reg   [0:0] icmp_ln4_58_reg_742_pp0_iter2_reg;
reg   [0:0] icmp_ln4_58_reg_742_pp0_iter3_reg;
wire   [0:0] xor_ln107_fu_282_p2;
reg   [0:0] xor_ln107_reg_747;
wire   [0:0] and_ln105_fu_288_p2;
reg   [0:0] and_ln105_reg_753;
wire   [0:0] and_ln107_fu_297_p2;
reg   [0:0] and_ln107_reg_759;
reg   [0:0] and_ln107_reg_759_pp0_iter2_reg;
wire   [0:0] and_ln105_54_fu_302_p2;
reg   [0:0] and_ln105_54_reg_765;
reg   [0:0] and_ln105_54_reg_765_pp0_iter2_reg;
wire   [0:0] and_ln105_55_fu_316_p2;
reg   [0:0] and_ln105_55_reg_772;
wire   [0:0] and_ln105_58_fu_321_p2;
reg   [0:0] and_ln105_58_reg_777;
wire   [0:0] and_ln107_5_fu_331_p2;
reg   [0:0] and_ln107_5_reg_785;
reg   [0:0] and_ln107_5_reg_785_pp0_iter2_reg;
reg   [0:0] and_ln107_5_reg_785_pp0_iter3_reg;
wire   [0:0] or_ln120_37_fu_337_p2;
reg   [0:0] or_ln120_37_reg_791;
wire   [0:0] and_ln105_57_fu_352_p2;
reg   [0:0] and_ln105_57_reg_797;
wire   [0:0] or_ln120_41_fu_395_p2;
reg   [0:0] or_ln120_41_reg_803;
wire   [0:0] or_ln120_43_fu_401_p2;
reg   [0:0] or_ln120_43_reg_808;
wire   [2:0] select_ln120_47_fu_457_p3;
reg   [2:0] select_ln120_47_reg_816;
wire   [0:0] or_ln120_47_fu_519_p2;
reg   [0:0] or_ln120_47_reg_821;
wire   [3:0] select_ln120_53_fu_565_p3;
reg   [3:0] select_ln120_53_reg_827;
wire    ap_block_pp0_stage0;
wire   [6:0] tmp_8_fu_266_p4;
wire   [0:0] xor_ln107_21_fu_292_p2;
wire   [0:0] xor_ln107_22_fu_306_p2;
wire   [0:0] and_ln107_4_fu_311_p2;
wire   [0:0] xor_ln107_26_fu_326_p2;
wire   [0:0] xor_ln107_23_fu_343_p2;
wire   [0:0] and_ln105_60_fu_360_p2;
wire   [0:0] and_ln105_56_fu_348_p2;
wire   [0:0] and_ln105_59_fu_356_p2;
wire   [0:0] and_ln105_61_fu_365_p2;
wire   [0:0] or_ln120_39_fu_385_p2;
wire   [0:0] and_ln105_62_fu_370_p2;
wire   [0:0] xor_ln120_fu_405_p2;
wire   [0:0] or_ln120_fu_375_p2;
wire   [1:0] zext_ln120_fu_410_p1;
wire   [1:0] select_ln120_fu_414_p3;
wire   [1:0] select_ln120_43_fu_422_p3;
wire   [0:0] or_ln120_38_fu_380_p2;
wire   [2:0] zext_ln120_9_fu_429_p1;
wire   [2:0] select_ln120_44_fu_433_p3;
wire   [0:0] or_ln120_40_fu_389_p2;
wire   [2:0] select_ln120_45_fu_441_p3;
wire   [2:0] select_ln120_46_fu_449_p3;
wire   [0:0] xor_ln107_24_fu_465_p2;
wire   [0:0] and_ln105_63_fu_475_p2;
wire   [0:0] xor_ln107_25_fu_470_p2;
wire   [0:0] and_ln105_66_fu_489_p2;
wire   [0:0] and_ln105_64_fu_480_p2;
wire   [0:0] and_ln105_65_fu_485_p2;
wire   [0:0] or_ln120_45_fu_509_p2;
wire   [0:0] and_ln105_67_fu_494_p2;
wire   [0:0] or_ln120_42_fu_499_p2;
wire   [3:0] zext_ln120_10_fu_523_p1;
wire   [3:0] select_ln120_48_fu_526_p3;
wire   [0:0] or_ln120_44_fu_504_p2;
wire   [3:0] select_ln120_49_fu_534_p3;
wire   [3:0] select_ln120_50_fu_541_p3;
wire   [0:0] or_ln120_46_fu_513_p2;
wire   [3:0] select_ln120_51_fu_549_p3;
wire   [3:0] select_ln120_52_fu_557_p3;
wire   [0:0] and_ln105_68_fu_573_p2;
wire   [0:0] or_ln120_48_fu_577_p2;
wire   [11:0] tmp_fu_593_p31;
wire   [3:0] tmp_fu_593_p32;
wire   [0:0] or_ln120_49_fu_582_p2;
wire   [11:0] tmp_fu_593_p33;
wire   [11:0] select_ln120_55_fu_661_p3;
reg    ap_ce_reg;
reg   [17:0] p_read1_int_reg;
reg   [17:0] p_read2_int_reg;
reg   [17:0] p_read3_int_reg;
reg   [17:0] p_read4_int_reg;
reg   [17:0] p_read5_int_reg;
reg   [17:0] p_read6_int_reg;
reg   [17:0] p_read7_int_reg;
reg   [17:0] p_read8_int_reg;
reg   [11:0] ap_return_int_reg;
wire   [3:0] tmp_fu_593_p1;
wire   [3:0] tmp_fu_593_p3;
wire   [3:0] tmp_fu_593_p5;
wire   [3:0] tmp_fu_593_p7;
wire   [3:0] tmp_fu_593_p9;
wire   [3:0] tmp_fu_593_p11;
wire   [3:0] tmp_fu_593_p13;
wire   [3:0] tmp_fu_593_p15;
wire  signed [3:0] tmp_fu_593_p17;
wire  signed [3:0] tmp_fu_593_p19;
wire  signed [3:0] tmp_fu_593_p21;
wire  signed [3:0] tmp_fu_593_p23;
wire  signed [3:0] tmp_fu_593_p25;
wire  signed [3:0] tmp_fu_593_p27;
wire  signed [3:0] tmp_fu_593_p29;

my_prj_accelerator_sparsemux_31_4_12_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
sparsemux_31_4_12_1_0_U64(
    .din0(12'd3267),
    .din1(12'd3642),
    .din2(12'd616),
    .din3(12'd3504),
    .din4(12'd3591),
    .din5(12'd3659),
    .din6(12'd121),
    .din7(12'd157),
    .din8(12'd3547),
    .din9(12'd50),
    .din10(12'd3644),
    .din11(12'd3472),
    .din12(12'd3134),
    .din13(12'd450),
    .din14(12'd2680),
    .def(tmp_fu_593_p31),
    .sel(tmp_fu_593_p32),
    .dout(tmp_fu_593_p33)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_54_reg_765 <= and_ln105_54_fu_302_p2;
        and_ln105_54_reg_765_pp0_iter2_reg <= and_ln105_54_reg_765;
        and_ln105_55_reg_772 <= and_ln105_55_fu_316_p2;
        and_ln105_57_reg_797 <= and_ln105_57_fu_352_p2;
        and_ln105_58_reg_777 <= and_ln105_58_fu_321_p2;
        and_ln105_reg_753 <= and_ln105_fu_288_p2;
        and_ln107_5_reg_785 <= and_ln107_5_fu_331_p2;
        and_ln107_5_reg_785_pp0_iter2_reg <= and_ln107_5_reg_785;
        and_ln107_5_reg_785_pp0_iter3_reg <= and_ln107_5_reg_785_pp0_iter2_reg;
        and_ln107_reg_759 <= and_ln107_fu_297_p2;
        and_ln107_reg_759_pp0_iter2_reg <= and_ln107_reg_759;
        icmp_ln4_46_reg_676 <= icmp_ln4_46_fu_194_p2;
        icmp_ln4_47_reg_682 <= icmp_ln4_47_fu_200_p2;
        icmp_ln4_48_reg_688 <= icmp_ln4_48_fu_206_p2;
        icmp_ln4_48_reg_688_pp0_iter1_reg <= icmp_ln4_48_reg_688;
        icmp_ln4_49_reg_694 <= icmp_ln4_49_fu_212_p2;
        icmp_ln4_49_reg_694_pp0_iter1_reg <= icmp_ln4_49_reg_694;
        icmp_ln4_49_reg_694_pp0_iter2_reg <= icmp_ln4_49_reg_694_pp0_iter1_reg;
        icmp_ln4_50_reg_700 <= icmp_ln4_50_fu_218_p2;
        icmp_ln4_50_reg_700_pp0_iter1_reg <= icmp_ln4_50_reg_700;
        icmp_ln4_50_reg_700_pp0_iter2_reg <= icmp_ln4_50_reg_700_pp0_iter1_reg;
        icmp_ln4_51_reg_706 <= icmp_ln4_51_fu_224_p2;
        icmp_ln4_52_reg_712 <= icmp_ln4_52_fu_230_p2;
        icmp_ln4_52_reg_712_pp0_iter1_reg <= icmp_ln4_52_reg_712;
        icmp_ln4_53_reg_717 <= icmp_ln4_53_fu_236_p2;
        icmp_ln4_53_reg_717_pp0_iter1_reg <= icmp_ln4_53_reg_717;
        icmp_ln4_54_reg_722 <= icmp_ln4_54_fu_242_p2;
        icmp_ln4_54_reg_722_pp0_iter1_reg <= icmp_ln4_54_reg_722;
        icmp_ln4_55_reg_727 <= icmp_ln4_55_fu_248_p2;
        icmp_ln4_55_reg_727_pp0_iter1_reg <= icmp_ln4_55_reg_727;
        icmp_ln4_55_reg_727_pp0_iter2_reg <= icmp_ln4_55_reg_727_pp0_iter1_reg;
        icmp_ln4_56_reg_732 <= icmp_ln4_56_fu_254_p2;
        icmp_ln4_56_reg_732_pp0_iter1_reg <= icmp_ln4_56_reg_732;
        icmp_ln4_56_reg_732_pp0_iter2_reg <= icmp_ln4_56_reg_732_pp0_iter1_reg;
        icmp_ln4_57_reg_737 <= icmp_ln4_57_fu_260_p2;
        icmp_ln4_57_reg_737_pp0_iter1_reg <= icmp_ln4_57_reg_737;
        icmp_ln4_57_reg_737_pp0_iter2_reg <= icmp_ln4_57_reg_737_pp0_iter1_reg;
        icmp_ln4_58_reg_742 <= icmp_ln4_58_fu_276_p2;
        icmp_ln4_58_reg_742_pp0_iter1_reg <= icmp_ln4_58_reg_742;
        icmp_ln4_58_reg_742_pp0_iter2_reg <= icmp_ln4_58_reg_742_pp0_iter1_reg;
        icmp_ln4_58_reg_742_pp0_iter3_reg <= icmp_ln4_58_reg_742_pp0_iter2_reg;
        icmp_ln4_reg_669 <= icmp_ln4_fu_188_p2;
        icmp_ln4_reg_669_pp0_iter1_reg <= icmp_ln4_reg_669;
        or_ln120_37_reg_791 <= or_ln120_37_fu_337_p2;
        or_ln120_41_reg_803 <= or_ln120_41_fu_395_p2;
        or_ln120_43_reg_808 <= or_ln120_43_fu_401_p2;
        or_ln120_47_reg_821 <= or_ln120_47_fu_519_p2;
        select_ln120_47_reg_816 <= select_ln120_47_fu_457_p3;
        select_ln120_53_reg_827 <= select_ln120_53_fu_565_p3;
        xor_ln107_reg_747 <= xor_ln107_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln120_55_fu_661_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        p_read1_int_reg <= p_read1;
        p_read2_int_reg <= p_read2;
        p_read3_int_reg <= p_read3;
        p_read4_int_reg <= p_read4;
        p_read5_int_reg <= p_read5;
        p_read6_int_reg <= p_read6;
        p_read7_int_reg <= p_read7;
        p_read8_int_reg <= p_read8;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln120_55_fu_661_p3;
    end else begin
        ap_return = 'bx;
    end
end

assign and_ln105_54_fu_302_p2 = (xor_ln107_reg_747 & icmp_ln4_47_reg_682);

assign and_ln105_55_fu_316_p2 = (icmp_ln4_48_reg_688 & and_ln105_fu_288_p2);

assign and_ln105_56_fu_348_p2 = (icmp_ln4_49_reg_694_pp0_iter1_reg & and_ln107_reg_759);

assign and_ln105_57_fu_352_p2 = (icmp_ln4_50_reg_700_pp0_iter1_reg & and_ln105_54_reg_765);

assign and_ln105_58_fu_321_p2 = (icmp_ln4_51_reg_706 & and_ln107_4_fu_311_p2);

assign and_ln105_59_fu_356_p2 = (icmp_ln4_52_reg_712_pp0_iter1_reg & and_ln105_55_reg_772);

assign and_ln105_60_fu_360_p2 = (xor_ln107_23_fu_343_p2 & icmp_ln4_53_reg_717_pp0_iter1_reg);

assign and_ln105_61_fu_365_p2 = (and_ln105_reg_753 & and_ln105_60_fu_360_p2);

assign and_ln105_62_fu_370_p2 = (icmp_ln4_54_reg_722_pp0_iter1_reg & and_ln105_56_fu_348_p2);

assign and_ln105_63_fu_475_p2 = (xor_ln107_24_fu_465_p2 & icmp_ln4_55_reg_727_pp0_iter2_reg);

assign and_ln105_64_fu_480_p2 = (and_ln107_reg_759_pp0_iter2_reg & and_ln105_63_fu_475_p2);

assign and_ln105_65_fu_485_p2 = (icmp_ln4_56_reg_732_pp0_iter2_reg & and_ln105_57_reg_797);

assign and_ln105_66_fu_489_p2 = (xor_ln107_25_fu_470_p2 & icmp_ln4_57_reg_737_pp0_iter2_reg);

assign and_ln105_67_fu_494_p2 = (and_ln105_66_fu_489_p2 & and_ln105_54_reg_765_pp0_iter2_reg);

assign and_ln105_68_fu_573_p2 = (icmp_ln4_58_reg_742_pp0_iter3_reg & and_ln107_5_reg_785_pp0_iter3_reg);

assign and_ln105_fu_288_p2 = (icmp_ln4_reg_669 & icmp_ln4_46_reg_676);

assign and_ln107_4_fu_311_p2 = (xor_ln107_reg_747 & xor_ln107_22_fu_306_p2);

assign and_ln107_5_fu_331_p2 = (xor_ln107_26_fu_326_p2 & and_ln107_4_fu_311_p2);

assign and_ln107_fu_297_p2 = (xor_ln107_21_fu_292_p2 & icmp_ln4_reg_669);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_46_fu_194_p2 = (($signed(p_read5_int_reg) < $signed(18'd12416)) ? 1'b1 : 1'b0);

assign icmp_ln4_47_fu_200_p2 = (($signed(p_read1_int_reg) < $signed(18'd9856)) ? 1'b1 : 1'b0);

assign icmp_ln4_48_fu_206_p2 = (($signed(p_read1_int_reg) < $signed(18'd2688)) ? 1'b1 : 1'b0);

assign icmp_ln4_49_fu_212_p2 = (($signed(p_read1_int_reg) < $signed(18'd6528)) ? 1'b1 : 1'b0);

assign icmp_ln4_50_fu_218_p2 = (($signed(p_read6_int_reg) < $signed(18'd1536)) ? 1'b1 : 1'b0);

assign icmp_ln4_51_fu_224_p2 = (($signed(p_read3_int_reg) < $signed(18'd4704)) ? 1'b1 : 1'b0);

assign icmp_ln4_52_fu_230_p2 = (($signed(p_read2_int_reg) < $signed(18'd7296)) ? 1'b1 : 1'b0);

assign icmp_ln4_53_fu_236_p2 = (($signed(p_read5_int_reg) < $signed(18'd9600)) ? 1'b1 : 1'b0);

assign icmp_ln4_54_fu_242_p2 = (($signed(p_read5_int_reg) < $signed(18'd49152)) ? 1'b1 : 1'b0);

assign icmp_ln4_55_fu_248_p2 = (($signed(p_read7_int_reg) < $signed(18'd452)) ? 1'b1 : 1'b0);

assign icmp_ln4_56_fu_254_p2 = (($signed(p_read8_int_reg) < $signed(18'd364)) ? 1'b1 : 1'b0);

assign icmp_ln4_57_fu_260_p2 = (($signed(p_read4_int_reg) < $signed(18'd69004)) ? 1'b1 : 1'b0);

assign icmp_ln4_58_fu_276_p2 = (($signed(tmp_8_fu_266_p4) < $signed(7'd1)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_188_p2 = (($signed(p_read2_int_reg) < $signed(18'd11648)) ? 1'b1 : 1'b0);

assign or_ln120_37_fu_337_p2 = (and_ln105_58_fu_321_p2 | and_ln105_55_fu_316_p2);

assign or_ln120_38_fu_380_p2 = (or_ln120_37_reg_791 | and_ln105_61_fu_365_p2);

assign or_ln120_39_fu_385_p2 = (and_ln105_reg_753 | and_ln105_58_reg_777);

assign or_ln120_40_fu_389_p2 = (or_ln120_39_fu_385_p2 | and_ln105_62_fu_370_p2);

assign or_ln120_41_fu_395_p2 = (or_ln120_39_fu_385_p2 | and_ln105_56_fu_348_p2);

assign or_ln120_42_fu_499_p2 = (or_ln120_41_reg_803 | and_ln105_64_fu_480_p2);

assign or_ln120_43_fu_401_p2 = (icmp_ln4_reg_669_pp0_iter1_reg | and_ln105_58_reg_777);

assign or_ln120_44_fu_504_p2 = (or_ln120_43_reg_808 | and_ln105_65_fu_485_p2);

assign or_ln120_45_fu_509_p2 = (or_ln120_43_reg_808 | and_ln105_57_reg_797);

assign or_ln120_46_fu_513_p2 = (or_ln120_45_fu_509_p2 | and_ln105_67_fu_494_p2);

assign or_ln120_47_fu_519_p2 = (or_ln120_43_reg_808 | and_ln105_54_reg_765_pp0_iter2_reg);

assign or_ln120_48_fu_577_p2 = (or_ln120_47_reg_821 | and_ln105_68_fu_573_p2);

assign or_ln120_49_fu_582_p2 = (or_ln120_47_reg_821 | and_ln107_5_reg_785_pp0_iter3_reg);

assign or_ln120_fu_375_p2 = (and_ln105_59_fu_356_p2 | and_ln105_58_reg_777);

assign select_ln120_43_fu_422_p3 = ((or_ln120_37_reg_791[0:0] == 1'b1) ? select_ln120_fu_414_p3 : 2'd3);

assign select_ln120_44_fu_433_p3 = ((or_ln120_38_fu_380_p2[0:0] == 1'b1) ? zext_ln120_9_fu_429_p1 : 3'd4);

assign select_ln120_45_fu_441_p3 = ((or_ln120_39_fu_385_p2[0:0] == 1'b1) ? select_ln120_44_fu_433_p3 : 3'd5);

assign select_ln120_46_fu_449_p3 = ((or_ln120_40_fu_389_p2[0:0] == 1'b1) ? select_ln120_45_fu_441_p3 : 3'd6);

assign select_ln120_47_fu_457_p3 = ((or_ln120_41_fu_395_p2[0:0] == 1'b1) ? select_ln120_46_fu_449_p3 : 3'd7);

assign select_ln120_48_fu_526_p3 = ((or_ln120_42_fu_499_p2[0:0] == 1'b1) ? zext_ln120_10_fu_523_p1 : 4'd8);

assign select_ln120_49_fu_534_p3 = ((or_ln120_43_reg_808[0:0] == 1'b1) ? select_ln120_48_fu_526_p3 : 4'd9);

assign select_ln120_50_fu_541_p3 = ((or_ln120_44_fu_504_p2[0:0] == 1'b1) ? select_ln120_49_fu_534_p3 : 4'd10);

assign select_ln120_51_fu_549_p3 = ((or_ln120_45_fu_509_p2[0:0] == 1'b1) ? select_ln120_50_fu_541_p3 : 4'd11);

assign select_ln120_52_fu_557_p3 = ((or_ln120_46_fu_513_p2[0:0] == 1'b1) ? select_ln120_51_fu_549_p3 : 4'd12);

assign select_ln120_53_fu_565_p3 = ((or_ln120_47_fu_519_p2[0:0] == 1'b1) ? select_ln120_52_fu_557_p3 : 4'd13);

assign select_ln120_55_fu_661_p3 = ((or_ln120_49_fu_582_p2[0:0] == 1'b1) ? tmp_fu_593_p33 : 12'd0);

assign select_ln120_fu_414_p3 = ((or_ln120_fu_375_p2[0:0] == 1'b1) ? zext_ln120_fu_410_p1 : 2'd2);

assign tmp_8_fu_266_p4 = {{p_read6_int_reg[17:11]}};

assign tmp_fu_593_p31 = 'bx;

assign tmp_fu_593_p32 = ((or_ln120_48_fu_577_p2[0:0] == 1'b1) ? select_ln120_53_reg_827 : 4'd14);

assign xor_ln107_21_fu_292_p2 = (icmp_ln4_46_reg_676 ^ 1'd1);

assign xor_ln107_22_fu_306_p2 = (icmp_ln4_47_reg_682 ^ 1'd1);

assign xor_ln107_23_fu_343_p2 = (icmp_ln4_48_reg_688_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_24_fu_465_p2 = (icmp_ln4_49_reg_694_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_25_fu_470_p2 = (icmp_ln4_50_reg_700_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_26_fu_326_p2 = (icmp_ln4_51_reg_706 ^ 1'd1);

assign xor_ln107_fu_282_p2 = (icmp_ln4_fu_188_p2 ^ 1'd1);

assign xor_ln120_fu_405_p2 = (1'd1 ^ and_ln105_58_reg_777);

assign zext_ln120_10_fu_523_p1 = select_ln120_47_reg_816;

assign zext_ln120_9_fu_429_p1 = select_ln120_43_fu_422_p3;

assign zext_ln120_fu_410_p1 = xor_ln120_fu_405_p2;

endmodule //my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_5
