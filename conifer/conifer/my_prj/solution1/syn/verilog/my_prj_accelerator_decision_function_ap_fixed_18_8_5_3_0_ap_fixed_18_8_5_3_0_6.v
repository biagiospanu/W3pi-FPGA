// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_6 (
        ap_clk,
        ap_rst,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] p_read1;
input  [17:0] p_read2;
input  [17:0] p_read3;
input  [17:0] p_read4;
input  [17:0] p_read5;
input  [17:0] p_read6;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_172_p2;
reg   [0:0] icmp_ln4_reg_657;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln4_32_fu_178_p2;
reg   [0:0] icmp_ln4_32_reg_662;
wire   [0:0] icmp_ln4_33_fu_184_p2;
reg   [0:0] icmp_ln4_33_reg_671;
reg   [0:0] icmp_ln4_33_reg_671_pp0_iter1_reg;
wire   [0:0] icmp_ln4_34_fu_190_p2;
reg   [0:0] icmp_ln4_34_reg_677;
wire   [0:0] icmp_ln4_35_fu_196_p2;
reg   [0:0] icmp_ln4_35_reg_682;
reg   [0:0] icmp_ln4_35_reg_682_pp0_iter1_reg;
wire   [0:0] icmp_ln4_36_fu_202_p2;
reg   [0:0] icmp_ln4_36_reg_688;
reg   [0:0] icmp_ln4_36_reg_688_pp0_iter1_reg;
wire   [0:0] icmp_ln4_37_fu_208_p2;
reg   [0:0] icmp_ln4_37_reg_694;
reg   [0:0] icmp_ln4_37_reg_694_pp0_iter1_reg;
reg   [0:0] icmp_ln4_37_reg_694_pp0_iter2_reg;
reg   [0:0] icmp_ln4_37_reg_694_pp0_iter3_reg;
wire   [0:0] icmp_ln4_38_fu_214_p2;
reg   [0:0] icmp_ln4_38_reg_700;
wire   [0:0] icmp_ln4_39_fu_220_p2;
reg   [0:0] icmp_ln4_39_reg_705;
wire   [0:0] icmp_ln4_40_fu_226_p2;
reg   [0:0] icmp_ln4_40_reg_710;
wire   [0:0] icmp_ln4_41_fu_232_p2;
reg   [0:0] icmp_ln4_41_reg_715;
reg   [0:0] icmp_ln4_41_reg_715_pp0_iter1_reg;
wire   [0:0] icmp_ln4_42_fu_238_p2;
reg   [0:0] icmp_ln4_42_reg_720;
reg   [0:0] icmp_ln4_42_reg_720_pp0_iter1_reg;
wire   [0:0] icmp_ln4_43_fu_244_p2;
reg   [0:0] icmp_ln4_43_reg_725;
reg   [0:0] icmp_ln4_43_reg_725_pp0_iter1_reg;
wire   [0:0] icmp_ln4_44_fu_250_p2;
reg   [0:0] icmp_ln4_44_reg_730;
reg   [0:0] icmp_ln4_44_reg_730_pp0_iter1_reg;
reg   [0:0] icmp_ln4_44_reg_730_pp0_iter2_reg;
wire   [0:0] icmp_ln4_45_fu_256_p2;
reg   [0:0] icmp_ln4_45_reg_735;
reg   [0:0] icmp_ln4_45_reg_735_pp0_iter1_reg;
reg   [0:0] icmp_ln4_45_reg_735_pp0_iter2_reg;
reg   [0:0] icmp_ln4_45_reg_735_pp0_iter3_reg;
wire   [0:0] and_ln107_fu_268_p2;
reg   [0:0] and_ln107_reg_740;
reg   [0:0] and_ln107_reg_740_pp0_iter1_reg;
wire   [0:0] and_ln105_38_fu_274_p2;
reg   [0:0] and_ln105_38_reg_747;
wire   [0:0] xor_ln107_fu_280_p2;
reg   [0:0] xor_ln107_reg_754;
reg   [0:0] xor_ln107_reg_754_pp0_iter2_reg;
reg   [0:0] xor_ln107_reg_754_pp0_iter3_reg;
wire   [0:0] and_ln105_fu_285_p2;
reg   [0:0] and_ln105_reg_760;
wire   [0:0] and_ln105_40_fu_299_p2;
reg   [0:0] and_ln105_40_reg_766;
wire   [0:0] or_ln120_26_fu_333_p2;
reg   [0:0] or_ln120_26_reg_772;
wire   [0:0] or_ln120_28_fu_338_p2;
reg   [0:0] or_ln120_28_reg_777;
reg   [0:0] or_ln120_28_reg_777_pp0_iter2_reg;
reg   [0:0] or_ln120_28_reg_777_pp0_iter3_reg;
wire   [2:0] select_ln120_32_fu_386_p3;
reg   [2:0] select_ln120_32_reg_786;
wire   [0:0] and_ln107_3_fu_399_p2;
reg   [0:0] and_ln107_3_reg_791;
reg   [0:0] and_ln107_3_reg_791_pp0_iter3_reg;
wire   [0:0] or_ln120_32_fu_458_p2;
reg   [0:0] or_ln120_32_reg_797;
wire   [3:0] select_ln120_38_fu_504_p3;
reg   [3:0] select_ln120_38_reg_803;
wire   [0:0] or_ln120_34_fu_526_p2;
reg   [0:0] or_ln120_34_reg_808;
wire   [3:0] select_ln120_40_fu_538_p3;
reg   [3:0] select_ln120_40_reg_813;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_15_fu_262_p2;
wire   [0:0] xor_ln107_17_fu_290_p2;
wire   [0:0] and_ln105_43_fu_308_p2;
wire   [0:0] and_ln105_39_fu_295_p2;
wire   [0:0] and_ln105_44_fu_313_p2;
wire   [0:0] and_ln105_45_fu_318_p2;
wire   [0:0] and_ln105_42_fu_304_p2;
wire   [0:0] xor_ln120_fu_342_p2;
wire   [1:0] zext_ln120_fu_348_p1;
wire   [0:0] or_ln120_fu_323_p2;
wire   [1:0] select_ln120_fu_352_p3;
wire   [1:0] select_ln120_29_fu_359_p3;
wire   [2:0] zext_ln120_7_fu_367_p1;
wire   [0:0] or_ln120_25_fu_328_p2;
wire   [2:0] select_ln120_30_fu_371_p3;
wire   [2:0] select_ln120_31_fu_378_p3;
wire   [0:0] xor_ln107_16_fu_394_p2;
wire   [0:0] xor_ln107_18_fu_404_p2;
wire   [0:0] and_ln105_46_fu_414_p2;
wire   [0:0] xor_ln107_19_fu_409_p2;
wire   [0:0] and_ln105_49_fu_428_p2;
wire   [0:0] and_ln105_47_fu_419_p2;
wire   [0:0] and_ln105_48_fu_424_p2;
wire   [0:0] or_ln120_30_fu_448_p2;
wire   [0:0] and_ln105_50_fu_433_p2;
wire   [0:0] or_ln120_27_fu_438_p2;
wire   [2:0] select_ln120_33_fu_462_p3;
wire   [3:0] zext_ln120_8_fu_469_p1;
wire   [0:0] or_ln120_29_fu_443_p2;
wire   [3:0] select_ln120_34_fu_473_p3;
wire   [3:0] select_ln120_35_fu_480_p3;
wire   [0:0] or_ln120_31_fu_452_p2;
wire   [3:0] select_ln120_36_fu_488_p3;
wire   [3:0] select_ln120_37_fu_496_p3;
wire   [0:0] and_ln105_41_fu_512_p2;
wire   [0:0] and_ln105_51_fu_516_p2;
wire   [0:0] or_ln120_33_fu_521_p2;
wire   [3:0] select_ln120_39_fu_531_p3;
wire   [0:0] xor_ln107_20_fu_546_p2;
wire   [0:0] and_ln105_52_fu_551_p2;
wire   [0:0] and_ln105_53_fu_556_p2;
wire   [0:0] or_ln120_35_fu_561_p2;
wire   [10:0] tmp_fu_577_p33;
wire   [3:0] tmp_fu_577_p34;
wire   [0:0] or_ln120_36_fu_566_p2;
wire   [10:0] tmp_fu_577_p35;
wire   [10:0] select_ln120_42_fu_649_p3;
reg    ap_ce_reg;
reg   [17:0] p_read1_int_reg;
reg   [17:0] p_read2_int_reg;
reg   [17:0] p_read3_int_reg;
reg   [17:0] p_read4_int_reg;
reg   [17:0] p_read5_int_reg;
reg   [17:0] p_read6_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] tmp_fu_577_p1;
wire   [3:0] tmp_fu_577_p3;
wire   [3:0] tmp_fu_577_p5;
wire   [3:0] tmp_fu_577_p7;
wire   [3:0] tmp_fu_577_p9;
wire   [3:0] tmp_fu_577_p11;
wire   [3:0] tmp_fu_577_p13;
wire   [3:0] tmp_fu_577_p15;
wire  signed [3:0] tmp_fu_577_p17;
wire  signed [3:0] tmp_fu_577_p19;
wire  signed [3:0] tmp_fu_577_p21;
wire  signed [3:0] tmp_fu_577_p23;
wire  signed [3:0] tmp_fu_577_p25;
wire  signed [3:0] tmp_fu_577_p27;
wire  signed [3:0] tmp_fu_577_p29;
wire  signed [3:0] tmp_fu_577_p31;

my_prj_accelerator_sparsemux_33_4_11_1_0_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 11 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_33_4_11_1_0_x_U56(
    .din0(11'd1434),
    .din1(11'd1505),
    .din2(11'd433),
    .din3(11'd1528),
    .din4(11'd1645),
    .din5(11'd113),
    .din6(11'd1484),
    .din7(11'd1904),
    .din8(11'd1524),
    .din9(11'd245),
    .din10(11'd1987),
    .din11(11'd1341),
    .din12(11'd522),
    .din13(11'd1623),
    .din14(11'd1696),
    .din15(11'd310),
    .def(tmp_fu_577_p33),
    .sel(tmp_fu_577_p34),
    .dout(tmp_fu_577_p35)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_38_reg_747 <= and_ln105_38_fu_274_p2;
        and_ln105_40_reg_766 <= and_ln105_40_fu_299_p2;
        and_ln105_reg_760 <= and_ln105_fu_285_p2;
        and_ln107_3_reg_791 <= and_ln107_3_fu_399_p2;
        and_ln107_3_reg_791_pp0_iter3_reg <= and_ln107_3_reg_791;
        and_ln107_reg_740 <= and_ln107_fu_268_p2;
        and_ln107_reg_740_pp0_iter1_reg <= and_ln107_reg_740;
        icmp_ln4_32_reg_662 <= icmp_ln4_32_fu_178_p2;
        icmp_ln4_33_reg_671 <= icmp_ln4_33_fu_184_p2;
        icmp_ln4_33_reg_671_pp0_iter1_reg <= icmp_ln4_33_reg_671;
        icmp_ln4_34_reg_677 <= icmp_ln4_34_fu_190_p2;
        icmp_ln4_35_reg_682 <= icmp_ln4_35_fu_196_p2;
        icmp_ln4_35_reg_682_pp0_iter1_reg <= icmp_ln4_35_reg_682;
        icmp_ln4_36_reg_688 <= icmp_ln4_36_fu_202_p2;
        icmp_ln4_36_reg_688_pp0_iter1_reg <= icmp_ln4_36_reg_688;
        icmp_ln4_37_reg_694 <= icmp_ln4_37_fu_208_p2;
        icmp_ln4_37_reg_694_pp0_iter1_reg <= icmp_ln4_37_reg_694;
        icmp_ln4_37_reg_694_pp0_iter2_reg <= icmp_ln4_37_reg_694_pp0_iter1_reg;
        icmp_ln4_37_reg_694_pp0_iter3_reg <= icmp_ln4_37_reg_694_pp0_iter2_reg;
        icmp_ln4_38_reg_700 <= icmp_ln4_38_fu_214_p2;
        icmp_ln4_39_reg_705 <= icmp_ln4_39_fu_220_p2;
        icmp_ln4_40_reg_710 <= icmp_ln4_40_fu_226_p2;
        icmp_ln4_41_reg_715 <= icmp_ln4_41_fu_232_p2;
        icmp_ln4_41_reg_715_pp0_iter1_reg <= icmp_ln4_41_reg_715;
        icmp_ln4_42_reg_720 <= icmp_ln4_42_fu_238_p2;
        icmp_ln4_42_reg_720_pp0_iter1_reg <= icmp_ln4_42_reg_720;
        icmp_ln4_43_reg_725 <= icmp_ln4_43_fu_244_p2;
        icmp_ln4_43_reg_725_pp0_iter1_reg <= icmp_ln4_43_reg_725;
        icmp_ln4_44_reg_730 <= icmp_ln4_44_fu_250_p2;
        icmp_ln4_44_reg_730_pp0_iter1_reg <= icmp_ln4_44_reg_730;
        icmp_ln4_44_reg_730_pp0_iter2_reg <= icmp_ln4_44_reg_730_pp0_iter1_reg;
        icmp_ln4_45_reg_735 <= icmp_ln4_45_fu_256_p2;
        icmp_ln4_45_reg_735_pp0_iter1_reg <= icmp_ln4_45_reg_735;
        icmp_ln4_45_reg_735_pp0_iter2_reg <= icmp_ln4_45_reg_735_pp0_iter1_reg;
        icmp_ln4_45_reg_735_pp0_iter3_reg <= icmp_ln4_45_reg_735_pp0_iter2_reg;
        icmp_ln4_reg_657 <= icmp_ln4_fu_172_p2;
        or_ln120_26_reg_772 <= or_ln120_26_fu_333_p2;
        or_ln120_28_reg_777 <= or_ln120_28_fu_338_p2;
        or_ln120_28_reg_777_pp0_iter2_reg <= or_ln120_28_reg_777;
        or_ln120_28_reg_777_pp0_iter3_reg <= or_ln120_28_reg_777_pp0_iter2_reg;
        or_ln120_32_reg_797 <= or_ln120_32_fu_458_p2;
        or_ln120_34_reg_808 <= or_ln120_34_fu_526_p2;
        select_ln120_32_reg_786 <= select_ln120_32_fu_386_p3;
        select_ln120_38_reg_803 <= select_ln120_38_fu_504_p3;
        select_ln120_40_reg_813 <= select_ln120_40_fu_538_p3;
        xor_ln107_reg_754 <= xor_ln107_fu_280_p2;
        xor_ln107_reg_754_pp0_iter2_reg <= xor_ln107_reg_754;
        xor_ln107_reg_754_pp0_iter3_reg <= xor_ln107_reg_754_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln120_42_fu_649_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        p_read1_int_reg <= p_read1;
        p_read2_int_reg <= p_read2;
        p_read3_int_reg <= p_read3;
        p_read4_int_reg <= p_read4;
        p_read5_int_reg <= p_read5;
        p_read6_int_reg <= p_read6;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln120_42_fu_649_p3;
    end else begin
        ap_return = 'bx;
    end
end

assign and_ln105_38_fu_274_p2 = (icmp_ln4_34_fu_190_p2 & icmp_ln4_32_fu_178_p2);

assign and_ln105_39_fu_295_p2 = (icmp_ln4_35_reg_682 & and_ln107_reg_740);

assign and_ln105_40_fu_299_p2 = (icmp_ln4_36_reg_688 & and_ln105_fu_285_p2);

assign and_ln105_41_fu_512_p2 = (icmp_ln4_37_reg_694_pp0_iter2_reg & and_ln107_3_reg_791);

assign and_ln105_42_fu_304_p2 = (icmp_ln4_38_reg_700 & and_ln105_38_reg_747);

assign and_ln105_43_fu_308_p2 = (xor_ln107_17_fu_290_p2 & icmp_ln4_39_reg_705);

assign and_ln105_44_fu_313_p2 = (icmp_ln4_32_reg_662 & and_ln105_43_fu_308_p2);

assign and_ln105_45_fu_318_p2 = (icmp_ln4_40_reg_710 & and_ln105_39_fu_295_p2);

assign and_ln105_46_fu_414_p2 = (xor_ln107_18_fu_404_p2 & icmp_ln4_41_reg_715_pp0_iter1_reg);

assign and_ln105_47_fu_419_p2 = (and_ln107_reg_740_pp0_iter1_reg & and_ln105_46_fu_414_p2);

assign and_ln105_48_fu_424_p2 = (icmp_ln4_42_reg_720_pp0_iter1_reg & and_ln105_40_reg_766);

assign and_ln105_49_fu_428_p2 = (xor_ln107_19_fu_409_p2 & icmp_ln4_43_reg_725_pp0_iter1_reg);

assign and_ln105_50_fu_433_p2 = (and_ln105_reg_760 & and_ln105_49_fu_428_p2);

assign and_ln105_51_fu_516_p2 = (icmp_ln4_44_reg_730_pp0_iter2_reg & and_ln105_41_fu_512_p2);

assign and_ln105_52_fu_551_p2 = (xor_ln107_20_fu_546_p2 & icmp_ln4_45_reg_735_pp0_iter3_reg);

assign and_ln105_53_fu_556_p2 = (and_ln107_3_reg_791_pp0_iter3_reg & and_ln105_52_fu_551_p2);

assign and_ln105_fu_285_p2 = (xor_ln107_fu_280_p2 & icmp_ln4_33_reg_671);

assign and_ln107_3_fu_399_p2 = (xor_ln107_reg_754 & xor_ln107_16_fu_394_p2);

assign and_ln107_fu_268_p2 = (xor_ln107_15_fu_262_p2 & icmp_ln4_fu_172_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_32_fu_178_p2 = (($signed(p_read2_int_reg) < $signed(18'd8832)) ? 1'b1 : 1'b0);

assign icmp_ln4_33_fu_184_p2 = (($signed(p_read1_int_reg) < $signed(18'd3968)) ? 1'b1 : 1'b0);

assign icmp_ln4_34_fu_190_p2 = (($signed(p_read5_int_reg) < $signed(18'd50688)) ? 1'b1 : 1'b0);

assign icmp_ln4_35_fu_196_p2 = (($signed(p_read4_int_reg) < $signed(18'd396)) ? 1'b1 : 1'b0);

assign icmp_ln4_36_fu_202_p2 = (($signed(p_read3_int_reg) < $signed(18'd62777)) ? 1'b1 : 1'b0);

assign icmp_ln4_37_fu_208_p2 = (($signed(p_read4_int_reg) < $signed(18'd430)) ? 1'b1 : 1'b0);

assign icmp_ln4_38_fu_214_p2 = (($signed(p_read5_int_reg) < $signed(18'd10624)) ? 1'b1 : 1'b0);

assign icmp_ln4_39_fu_220_p2 = (($signed(p_read6_int_reg) < $signed(18'd354)) ? 1'b1 : 1'b0);

assign icmp_ln4_40_fu_226_p2 = (($signed(p_read1_int_reg) < $signed(18'd4736)) ? 1'b1 : 1'b0);

assign icmp_ln4_41_fu_232_p2 = (($signed(p_read3_int_reg) < $signed(18'd66630)) ? 1'b1 : 1'b0);

assign icmp_ln4_42_fu_238_p2 = (($signed(p_read5_int_reg) < $signed(18'd61440)) ? 1'b1 : 1'b0);

assign icmp_ln4_43_fu_244_p2 = (($signed(p_read6_int_reg) < $signed(18'd768)) ? 1'b1 : 1'b0);

assign icmp_ln4_44_fu_250_p2 = (($signed(p_read6_int_reg) < $signed(18'd708)) ? 1'b1 : 1'b0);

assign icmp_ln4_45_fu_256_p2 = (($signed(p_read1_int_reg) < $signed(18'd10880)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_172_p2 = (($signed(p_read2_int_reg) < $signed(18'd14208)) ? 1'b1 : 1'b0);

assign or_ln120_25_fu_328_p2 = (icmp_ln4_32_reg_662 | and_ln105_45_fu_318_p2);

assign or_ln120_26_fu_333_p2 = (icmp_ln4_32_reg_662 | and_ln105_39_fu_295_p2);

assign or_ln120_27_fu_438_p2 = (or_ln120_26_reg_772 | and_ln105_47_fu_419_p2);

assign or_ln120_28_fu_338_p2 = (icmp_ln4_32_reg_662 | and_ln107_reg_740);

assign or_ln120_29_fu_443_p2 = (or_ln120_28_reg_777 | and_ln105_48_fu_424_p2);

assign or_ln120_30_fu_448_p2 = (or_ln120_28_reg_777 | and_ln105_40_reg_766);

assign or_ln120_31_fu_452_p2 = (or_ln120_30_fu_448_p2 | and_ln105_50_fu_433_p2);

assign or_ln120_32_fu_458_p2 = (or_ln120_28_reg_777 | and_ln105_reg_760);

assign or_ln120_33_fu_521_p2 = (or_ln120_32_reg_797 | and_ln105_51_fu_516_p2);

assign or_ln120_34_fu_526_p2 = (or_ln120_32_reg_797 | and_ln105_41_fu_512_p2);

assign or_ln120_35_fu_561_p2 = (or_ln120_34_reg_808 | and_ln105_53_fu_556_p2);

assign or_ln120_36_fu_566_p2 = (xor_ln107_reg_754_pp0_iter3_reg | or_ln120_28_reg_777_pp0_iter3_reg);

assign or_ln120_fu_323_p2 = (and_ln105_44_fu_313_p2 | and_ln105_38_reg_747);

assign select_ln120_29_fu_359_p3 = ((or_ln120_fu_323_p2[0:0] == 1'b1) ? select_ln120_fu_352_p3 : 2'd3);

assign select_ln120_30_fu_371_p3 = ((icmp_ln4_32_reg_662[0:0] == 1'b1) ? zext_ln120_7_fu_367_p1 : 3'd4);

assign select_ln120_31_fu_378_p3 = ((or_ln120_25_fu_328_p2[0:0] == 1'b1) ? select_ln120_30_fu_371_p3 : 3'd5);

assign select_ln120_32_fu_386_p3 = ((or_ln120_26_fu_333_p2[0:0] == 1'b1) ? select_ln120_31_fu_378_p3 : 3'd6);

assign select_ln120_33_fu_462_p3 = ((or_ln120_27_fu_438_p2[0:0] == 1'b1) ? select_ln120_32_reg_786 : 3'd7);

assign select_ln120_34_fu_473_p3 = ((or_ln120_28_reg_777[0:0] == 1'b1) ? zext_ln120_8_fu_469_p1 : 4'd8);

assign select_ln120_35_fu_480_p3 = ((or_ln120_29_fu_443_p2[0:0] == 1'b1) ? select_ln120_34_fu_473_p3 : 4'd9);

assign select_ln120_36_fu_488_p3 = ((or_ln120_30_fu_448_p2[0:0] == 1'b1) ? select_ln120_35_fu_480_p3 : 4'd10);

assign select_ln120_37_fu_496_p3 = ((or_ln120_31_fu_452_p2[0:0] == 1'b1) ? select_ln120_36_fu_488_p3 : 4'd11);

assign select_ln120_38_fu_504_p3 = ((or_ln120_32_fu_458_p2[0:0] == 1'b1) ? select_ln120_37_fu_496_p3 : 4'd12);

assign select_ln120_39_fu_531_p3 = ((or_ln120_33_fu_521_p2[0:0] == 1'b1) ? select_ln120_38_reg_803 : 4'd13);

assign select_ln120_40_fu_538_p3 = ((or_ln120_34_fu_526_p2[0:0] == 1'b1) ? select_ln120_39_fu_531_p3 : 4'd14);

assign select_ln120_42_fu_649_p3 = ((or_ln120_36_fu_566_p2[0:0] == 1'b1) ? tmp_fu_577_p35 : 11'd0);

assign select_ln120_fu_352_p3 = ((and_ln105_38_reg_747[0:0] == 1'b1) ? zext_ln120_fu_348_p1 : 2'd2);

assign tmp_fu_577_p33 = 'bx;

assign tmp_fu_577_p34 = ((or_ln120_35_fu_561_p2[0:0] == 1'b1) ? select_ln120_40_reg_813 : 4'd15);

assign xor_ln107_15_fu_262_p2 = (icmp_ln4_32_fu_178_p2 ^ 1'd1);

assign xor_ln107_16_fu_394_p2 = (icmp_ln4_33_reg_671_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_17_fu_290_p2 = (icmp_ln4_34_reg_677 ^ 1'd1);

assign xor_ln107_18_fu_404_p2 = (icmp_ln4_35_reg_682_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_19_fu_409_p2 = (icmp_ln4_36_reg_688_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_20_fu_546_p2 = (icmp_ln4_37_reg_694_pp0_iter3_reg ^ 1'd1);

assign xor_ln107_fu_280_p2 = (icmp_ln4_reg_657 ^ 1'd1);

assign xor_ln120_fu_342_p2 = (1'd1 ^ and_ln105_42_fu_304_p2);

assign zext_ln120_7_fu_367_p1 = select_ln120_29_fu_359_p3;

assign zext_ln120_8_fu_469_p1 = select_ln120_33_fu_462_p3;

assign zext_ln120_fu_348_p1 = xor_ln120_fu_342_p2;

endmodule //my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_6
