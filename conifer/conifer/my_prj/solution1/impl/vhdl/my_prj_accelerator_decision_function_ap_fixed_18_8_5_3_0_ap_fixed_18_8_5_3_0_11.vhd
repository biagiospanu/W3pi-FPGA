-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_600 : STD_LOGIC_VECTOR (17 downto 0) := "000000011000000000";
    constant ap_const_lv18_6DA : STD_LOGIC_VECTOR (17 downto 0) := "000000011011011010";
    constant ap_const_lv18_31 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000110001";
    constant ap_const_lv18_7D80 : STD_LOGIC_VECTOR (17 downto 0) := "000111110110000000";
    constant ap_const_lv18_3580 : STD_LOGIC_VECTOR (17 downto 0) := "000011010110000000";
    constant ap_const_lv18_9B8 : STD_LOGIC_VECTOR (17 downto 0) := "000000100110111000";
    constant ap_const_lv18_910 : STD_LOGIC_VECTOR (17 downto 0) := "000000100100010000";
    constant ap_const_lv18_4A80 : STD_LOGIC_VECTOR (17 downto 0) := "000100101010000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv11_5DB : STD_LOGIC_VECTOR (10 downto 0) := "10111011011";
    constant ap_const_lv11_5BF : STD_LOGIC_VECTOR (10 downto 0) := "10110111111";
    constant ap_const_lv11_64F : STD_LOGIC_VECTOR (10 downto 0) := "11001001111";
    constant ap_const_lv11_6BE : STD_LOGIC_VECTOR (10 downto 0) := "11010111110";
    constant ap_const_lv11_64 : STD_LOGIC_VECTOR (10 downto 0) := "00001100100";
    constant ap_const_lv11_165 : STD_LOGIC_VECTOR (10 downto 0) := "00101100101";
    constant ap_const_lv11_7AD : STD_LOGIC_VECTOR (10 downto 0) := "11110101101";
    constant ap_const_lv11_206 : STD_LOGIC_VECTOR (10 downto 0) := "01000000110";
    constant ap_const_lv11_691 : STD_LOGIC_VECTOR (10 downto 0) := "11010010001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal icmp_ln4_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_137_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_137_reg_427 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_138_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_138_reg_433 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_139_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_139_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_139_reg_439_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_140_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_140_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_140_reg_445_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_141_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_141_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_141_reg_451_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_142_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_142_reg_456 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_142_reg_456_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_143_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_143_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_143_reg_461_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_143_reg_461_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_reg_466 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_124_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_124_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_15_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_15_reg_490 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_117_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_117_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_132_fu_329_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_132_reg_503 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal xor_ln107_62_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_63_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_14_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_65_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_125_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_64_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_130_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_126_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_113_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_127_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_115_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_128_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln120_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_290_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_fu_294_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_129_fu_301_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln120_114_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_23_fu_309_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_130_fu_313_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_116_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_131_fu_321_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln105_129_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_133_fu_350_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_118_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_24_fu_356_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_368_p19 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_368_p20 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_119_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_368_p21 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln120_135_fu_412_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read1_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_368_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_368_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_368_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_368_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_368_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_368_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_368_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_368_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_368_p17 : STD_LOGIC_VECTOR (3 downto 0);

    component my_prj_accelerator_sparsemux_19_4_11_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_19_4_11_1_0_U166 : component my_prj_accelerator_sparsemux_19_4_11_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_5DB,
        din1 => ap_const_lv11_5BF,
        din2 => ap_const_lv11_64F,
        din3 => ap_const_lv11_6BE,
        din4 => ap_const_lv11_64,
        din5 => ap_const_lv11_165,
        din6 => ap_const_lv11_7AD,
        din7 => ap_const_lv11_206,
        din8 => ap_const_lv11_691,
        def => tmp_fu_368_p19,
        sel => tmp_fu_368_p20,
        dout => tmp_fu_368_p21);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_124_reg_478 <= and_ln105_124_fu_197_p2;
                and_ln105_reg_466 <= and_ln105_fu_183_p2;
                and_ln107_15_reg_490 <= and_ln107_15_fu_237_p2;
                and_ln107_reg_471 <= and_ln107_fu_192_p2;
                icmp_ln4_137_reg_427 <= icmp_ln4_137_fu_136_p2;
                icmp_ln4_138_reg_433 <= icmp_ln4_138_fu_142_p2;
                icmp_ln4_139_reg_439 <= icmp_ln4_139_fu_148_p2;
                icmp_ln4_139_reg_439_pp0_iter1_reg <= icmp_ln4_139_reg_439;
                icmp_ln4_140_reg_445 <= icmp_ln4_140_fu_154_p2;
                icmp_ln4_140_reg_445_pp0_iter1_reg <= icmp_ln4_140_reg_445;
                icmp_ln4_141_reg_451 <= icmp_ln4_141_fu_160_p2;
                icmp_ln4_141_reg_451_pp0_iter1_reg <= icmp_ln4_141_reg_451;
                icmp_ln4_142_reg_456 <= icmp_ln4_142_fu_166_p2;
                icmp_ln4_142_reg_456_pp0_iter1_reg <= icmp_ln4_142_reg_456;
                icmp_ln4_143_reg_461 <= icmp_ln4_143_fu_172_p2;
                icmp_ln4_143_reg_461_pp0_iter1_reg <= icmp_ln4_143_reg_461;
                icmp_ln4_143_reg_461_pp0_iter2_reg <= icmp_ln4_143_reg_461_pp0_iter1_reg;
                icmp_ln4_reg_420 <= icmp_ln4_fu_130_p2;
                or_ln120_117_reg_496 <= or_ln120_117_fu_280_p2;
                or_ln120_reg_484 <= or_ln120_fu_213_p2;
                select_ln120_132_reg_503 <= select_ln120_132_fu_329_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln120_135_fu_412_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
            end if;
        end if;
    end process;
    and_ln105_124_fu_197_p2 <= (xor_ln107_fu_178_p2 and icmp_ln4_138_reg_433);
    and_ln105_125_fu_219_p2 <= (icmp_ln4_139_reg_439_pp0_iter1_reg and and_ln107_reg_471);
    and_ln105_126_fu_228_p2 <= (icmp_ln4_140_reg_445_pp0_iter1_reg and and_ln105_124_reg_478);
    and_ln105_127_fu_242_p2 <= (icmp_ln4_141_reg_451_pp0_iter1_reg and and_ln105_125_fu_219_p2);
    and_ln105_128_fu_252_p2 <= (and_ln107_reg_471 and and_ln105_130_fu_247_p2);
    and_ln105_129_fu_337_p2 <= (icmp_ln4_143_reg_461_pp0_iter2_reg and and_ln107_15_reg_490);
    and_ln105_130_fu_247_p2 <= (xor_ln107_64_fu_223_p2 and icmp_ln4_142_reg_456_pp0_iter1_reg);
    and_ln105_fu_183_p2 <= (icmp_ln4_reg_420 and icmp_ln4_137_reg_427);
    and_ln107_14_fu_207_p2 <= (xor_ln107_fu_178_p2 and xor_ln107_63_fu_202_p2);
    and_ln107_15_fu_237_p2 <= (xor_ln107_65_fu_232_p2 and and_ln105_124_reg_478);
    and_ln107_fu_192_p2 <= (xor_ln107_62_fu_187_p2 and icmp_ln4_reg_420);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln120_135_fu_412_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln120_135_fu_412_p3;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_137_fu_136_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_6DA)) else "0";
    icmp_ln4_138_fu_142_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_31)) else "0";
    icmp_ln4_139_fu_148_p2 <= "1" when (signed(p_read4_int_reg) < signed(ap_const_lv18_7D80)) else "0";
    icmp_ln4_140_fu_154_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_3580)) else "0";
    icmp_ln4_141_fu_160_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_9B8)) else "0";
    icmp_ln4_142_fu_166_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_910)) else "0";
    icmp_ln4_143_fu_172_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_4A80)) else "0";
    icmp_ln4_fu_130_p2 <= "1" when (signed(p_read5_int_reg) < signed(ap_const_lv18_600)) else "0";
    or_ln120_113_fu_257_p2 <= (or_ln120_reg_484 or and_ln105_126_fu_228_p2);
    or_ln120_114_fu_262_p2 <= (or_ln120_113_fu_257_p2 or and_ln105_127_fu_242_p2);
    or_ln120_115_fu_268_p2 <= (or_ln120_113_fu_257_p2 or and_ln105_125_fu_219_p2);
    or_ln120_116_fu_274_p2 <= (or_ln120_115_fu_268_p2 or and_ln105_128_fu_252_p2);
    or_ln120_117_fu_280_p2 <= (or_ln120_113_fu_257_p2 or and_ln107_reg_471);
    or_ln120_118_fu_341_p2 <= (or_ln120_117_reg_496 or and_ln105_129_fu_337_p2);
    or_ln120_119_fu_346_p2 <= (or_ln120_117_reg_496 or and_ln107_15_reg_490);
    or_ln120_fu_213_p2 <= (and_ln107_14_fu_207_p2 or and_ln105_fu_183_p2);
    select_ln120_129_fu_301_p3 <= 
        select_ln120_fu_294_p3 when (or_ln120_113_fu_257_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_130_fu_313_p3 <= 
        zext_ln120_23_fu_309_p1 when (or_ln120_114_fu_262_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_131_fu_321_p3 <= 
        select_ln120_130_fu_313_p3 when (or_ln120_115_fu_268_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_132_fu_329_p3 <= 
        select_ln120_131_fu_321_p3 when (or_ln120_116_fu_274_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_133_fu_350_p3 <= 
        select_ln120_132_reg_503 when (or_ln120_117_reg_496(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_135_fu_412_p3 <= 
        tmp_fu_368_p21 when (or_ln120_119_fu_346_p2(0) = '1') else 
        ap_const_lv11_0;
    select_ln120_fu_294_p3 <= 
        zext_ln120_fu_290_p1 when (or_ln120_reg_484(0) = '1') else 
        ap_const_lv2_2;
    tmp_fu_368_p19 <= "XXXXXXXXXXX";
    tmp_fu_368_p20 <= 
        zext_ln120_24_fu_356_p1 when (or_ln120_118_fu_341_p2(0) = '1') else 
        ap_const_lv4_8;
    xor_ln107_62_fu_187_p2 <= (icmp_ln4_137_reg_427 xor ap_const_lv1_1);
    xor_ln107_63_fu_202_p2 <= (icmp_ln4_138_reg_433 xor ap_const_lv1_1);
    xor_ln107_64_fu_223_p2 <= (icmp_ln4_139_reg_439_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_65_fu_232_p2 <= (icmp_ln4_140_reg_445_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_fu_178_p2 <= (icmp_ln4_reg_420 xor ap_const_lv1_1);
    xor_ln120_fu_285_p2 <= (ap_const_lv1_1 xor and_ln105_reg_466);
    zext_ln120_23_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_129_fu_301_p3),3));
    zext_ln120_24_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_133_fu_350_p3),4));
    zext_ln120_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln120_fu_285_p2),2));
end behav;
