-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_14 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_14 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_2FB7 : STD_LOGIC_VECTOR (17 downto 0) := "000010111110110111";
    constant ap_const_lv18_B80 : STD_LOGIC_VECTOR (17 downto 0) := "000000101110000000";
    constant ap_const_lv18_600 : STD_LOGIC_VECTOR (17 downto 0) := "000000011000000000";
    constant ap_const_lv18_1280 : STD_LOGIC_VECTOR (17 downto 0) := "000001001010000000";
    constant ap_const_lv18_6DA : STD_LOGIC_VECTOR (17 downto 0) := "000000011011011010";
    constant ap_const_lv18_3FA00 : STD_LOGIC_VECTOR (17 downto 0) := "111111101000000000";
    constant ap_const_lv18_31 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000110001";
    constant ap_const_lv18_C61 : STD_LOGIC_VECTOR (17 downto 0) := "000000110001100001";
    constant ap_const_lv18_1F80 : STD_LOGIC_VECTOR (17 downto 0) := "000001111110000000";
    constant ap_const_lv18_4980 : STD_LOGIC_VECTOR (17 downto 0) := "000100100110000000";
    constant ap_const_lv18_4CC : STD_LOGIC_VECTOR (17 downto 0) := "000000010011001100";
    constant ap_const_lv18_CF2E : STD_LOGIC_VECTOR (17 downto 0) := "001100111100101110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv11_5AB : STD_LOGIC_VECTOR (10 downto 0) := "10110101011";
    constant ap_const_lv11_58F : STD_LOGIC_VECTOR (10 downto 0) := "10110001111";
    constant ap_const_lv11_738 : STD_LOGIC_VECTOR (10 downto 0) := "11100111000";
    constant ap_const_lv11_328 : STD_LOGIC_VECTOR (10 downto 0) := "01100101000";
    constant ap_const_lv11_6A5 : STD_LOGIC_VECTOR (10 downto 0) := "11010100101";
    constant ap_const_lv11_7F1 : STD_LOGIC_VECTOR (10 downto 0) := "11111110001";
    constant ap_const_lv11_655 : STD_LOGIC_VECTOR (10 downto 0) := "11001010101";
    constant ap_const_lv11_C2 : STD_LOGIC_VECTOR (10 downto 0) := "00011000010";
    constant ap_const_lv11_578 : STD_LOGIC_VECTOR (10 downto 0) := "10101111000";
    constant ap_const_lv11_6D7 : STD_LOGIC_VECTOR (10 downto 0) := "11011010111";
    constant ap_const_lv11_29 : STD_LOGIC_VECTOR (10 downto 0) := "00000101001";
    constant ap_const_lv11_5D5 : STD_LOGIC_VECTOR (10 downto 0) := "10111010101";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_61D : STD_LOGIC_VECTOR (10 downto 0) := "11000011101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal icmp_ln4_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_118_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_118_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_119_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_119_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_120_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_120_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_120_reg_629_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_121_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_121_reg_635 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_122_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_122_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_122_reg_641_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_122_reg_641_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_123_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_123_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_124_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_124_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_124_reg_653_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_125_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_125_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_125_reg_658_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_126_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_126_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_126_reg_663_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_126_reg_663_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_127_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_127_reg_668 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_127_reg_668_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_127_reg_668_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_128_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_128_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_128_reg_673_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_128_reg_673_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_129_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_129_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_129_reg_678_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_129_reg_678_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_129_reg_678_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_reg_683 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_130_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_130_reg_689 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_130_reg_689_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_131_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_131_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_132_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_132_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_13_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_13_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_13_reg_707_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_134_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_134_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_134_reg_713_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_134_reg_713_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_133_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_133_reg_727 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_97_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_97_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_99_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_99_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_114_fu_413_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_114_reg_746 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_103_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_103_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_120_fu_510_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_120_reg_757 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal xor_ln107_53_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_54_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_56_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_12_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_58_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_14_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_55_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_136_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_135_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_95_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_137_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln120_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_374_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln120_94_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_fu_378_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_111_fu_385_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln120_19_fu_393_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_96_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_112_fu_397_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_113_fu_405_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln107_57_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_140_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_138_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_139_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_101_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_141_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_98_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_115_fu_468_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln120_20_fu_475_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_100_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_116_fu_479_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_117_fu_486_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_102_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_118_fu_494_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_119_fu_502_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln105_142_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_104_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_538_p29 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_538_p30 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_105_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_538_p31 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln120_122_fu_602_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read1_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read7_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_538_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_538_p27 : STD_LOGIC_VECTOR (3 downto 0);

    component my_prj_accelerator_sparsemux_29_4_11_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        din9 : IN STD_LOGIC_VECTOR (10 downto 0);
        din10 : IN STD_LOGIC_VECTOR (10 downto 0);
        din11 : IN STD_LOGIC_VECTOR (10 downto 0);
        din12 : IN STD_LOGIC_VECTOR (10 downto 0);
        din13 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_29_4_11_1_0_U139 : component my_prj_accelerator_sparsemux_29_4_11_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        CASE9 => "1001",
        din9_WIDTH => 11,
        CASE10 => "1010",
        din10_WIDTH => 11,
        CASE11 => "1011",
        din11_WIDTH => 11,
        CASE12 => "1100",
        din12_WIDTH => 11,
        CASE13 => "1101",
        din13_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_5AB,
        din1 => ap_const_lv11_58F,
        din2 => ap_const_lv11_738,
        din3 => ap_const_lv11_328,
        din4 => ap_const_lv11_6A5,
        din5 => ap_const_lv11_7F1,
        din6 => ap_const_lv11_655,
        din7 => ap_const_lv11_C2,
        din8 => ap_const_lv11_578,
        din9 => ap_const_lv11_6D7,
        din10 => ap_const_lv11_29,
        din11 => ap_const_lv11_5D5,
        din12 => ap_const_lv11_3,
        din13 => ap_const_lv11_61D,
        def => tmp_fu_538_p29,
        sel => tmp_fu_538_p30,
        dout => tmp_fu_538_p31);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_130_reg_689 <= and_ln105_130_fu_263_p2;
                and_ln105_130_reg_689_pp0_iter2_reg <= and_ln105_130_reg_689;
                and_ln105_131_reg_696 <= and_ln105_131_fu_279_p2;
                and_ln105_132_reg_702 <= and_ln105_132_fu_284_p2;
                and_ln105_133_reg_727 <= and_ln105_133_fu_327_p2;
                and_ln105_134_reg_713 <= and_ln105_134_fu_300_p2;
                and_ln105_134_reg_713_pp0_iter2_reg <= and_ln105_134_reg_713;
                and_ln105_134_reg_713_pp0_iter3_reg <= and_ln105_134_reg_713_pp0_iter2_reg;
                and_ln105_reg_683 <= and_ln105_fu_249_p2;
                and_ln107_13_reg_707 <= and_ln107_13_fu_294_p2;
                and_ln107_13_reg_707_pp0_iter2_reg <= and_ln107_13_reg_707;
                icmp_ln4_118_reg_617 <= icmp_ln4_118_fu_172_p2;
                icmp_ln4_119_reg_623 <= icmp_ln4_119_fu_178_p2;
                icmp_ln4_120_reg_629 <= icmp_ln4_120_fu_184_p2;
                icmp_ln4_120_reg_629_pp0_iter1_reg <= icmp_ln4_120_reg_629;
                icmp_ln4_121_reg_635 <= icmp_ln4_121_fu_190_p2;
                icmp_ln4_122_reg_641 <= icmp_ln4_122_fu_196_p2;
                icmp_ln4_122_reg_641_pp0_iter1_reg <= icmp_ln4_122_reg_641;
                icmp_ln4_122_reg_641_pp0_iter2_reg <= icmp_ln4_122_reg_641_pp0_iter1_reg;
                icmp_ln4_123_reg_647 <= icmp_ln4_123_fu_202_p2;
                icmp_ln4_124_reg_653 <= icmp_ln4_124_fu_208_p2;
                icmp_ln4_124_reg_653_pp0_iter1_reg <= icmp_ln4_124_reg_653;
                icmp_ln4_125_reg_658 <= icmp_ln4_125_fu_214_p2;
                icmp_ln4_125_reg_658_pp0_iter1_reg <= icmp_ln4_125_reg_658;
                icmp_ln4_126_reg_663 <= icmp_ln4_126_fu_220_p2;
                icmp_ln4_126_reg_663_pp0_iter1_reg <= icmp_ln4_126_reg_663;
                icmp_ln4_126_reg_663_pp0_iter2_reg <= icmp_ln4_126_reg_663_pp0_iter1_reg;
                icmp_ln4_127_reg_668 <= icmp_ln4_127_fu_226_p2;
                icmp_ln4_127_reg_668_pp0_iter1_reg <= icmp_ln4_127_reg_668;
                icmp_ln4_127_reg_668_pp0_iter2_reg <= icmp_ln4_127_reg_668_pp0_iter1_reg;
                icmp_ln4_128_reg_673 <= icmp_ln4_128_fu_232_p2;
                icmp_ln4_128_reg_673_pp0_iter1_reg <= icmp_ln4_128_reg_673;
                icmp_ln4_128_reg_673_pp0_iter2_reg <= icmp_ln4_128_reg_673_pp0_iter1_reg;
                icmp_ln4_129_reg_678 <= icmp_ln4_129_fu_238_p2;
                icmp_ln4_129_reg_678_pp0_iter1_reg <= icmp_ln4_129_reg_678;
                icmp_ln4_129_reg_678_pp0_iter2_reg <= icmp_ln4_129_reg_678_pp0_iter1_reg;
                icmp_ln4_129_reg_678_pp0_iter3_reg <= icmp_ln4_129_reg_678_pp0_iter2_reg;
                icmp_ln4_reg_610 <= icmp_ln4_fu_166_p2;
                or_ln120_103_reg_751 <= or_ln120_103_fu_464_p2;
                or_ln120_97_reg_733 <= or_ln120_97_fu_360_p2;
                or_ln120_99_reg_738 <= or_ln120_99_fu_364_p2;
                or_ln120_reg_719 <= or_ln120_fu_316_p2;
                select_ln120_114_reg_746 <= select_ln120_114_fu_413_p3;
                select_ln120_120_reg_757 <= select_ln120_120_fu_510_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln120_122_fu_602_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
                p_read7_int_reg <= p_read7;
            end if;
        end if;
    end process;
    and_ln105_130_fu_263_p2 <= (xor_ln107_fu_244_p2 and icmp_ln4_119_reg_623);
    and_ln105_131_fu_279_p2 <= (icmp_ln4_120_reg_629 and and_ln105_fu_249_p2);
    and_ln105_132_fu_284_p2 <= (icmp_ln4_121_reg_635 and and_ln107_fu_258_p2);
    and_ln105_133_fu_327_p2 <= (icmp_ln4_122_reg_641_pp0_iter1_reg and and_ln105_130_reg_689);
    and_ln105_134_fu_300_p2 <= (icmp_ln4_123_reg_647 and and_ln107_12_fu_273_p2);
    and_ln105_135_fu_331_p2 <= (icmp_ln4_124_reg_653_pp0_iter1_reg and and_ln105_131_reg_696);
    and_ln105_136_fu_335_p2 <= (xor_ln107_55_fu_322_p2 and icmp_ln4_125_reg_658_pp0_iter1_reg);
    and_ln105_137_fu_340_p2 <= (and_ln105_reg_683 and and_ln105_136_fu_335_p2);
    and_ln105_138_fu_426_p2 <= (icmp_ln4_126_reg_663_pp0_iter2_reg and and_ln107_13_reg_707_pp0_iter2_reg);
    and_ln105_139_fu_430_p2 <= (icmp_ln4_127_reg_668_pp0_iter2_reg and and_ln105_133_reg_727);
    and_ln105_140_fu_434_p2 <= (xor_ln107_57_fu_421_p2 and icmp_ln4_128_reg_673_pp0_iter2_reg);
    and_ln105_141_fu_439_p2 <= (and_ln105_140_fu_434_p2 and and_ln105_130_reg_689_pp0_iter2_reg);
    and_ln105_142_fu_518_p2 <= (icmp_ln4_129_reg_678_pp0_iter3_reg and and_ln105_134_reg_713_pp0_iter3_reg);
    and_ln105_fu_249_p2 <= (icmp_ln4_reg_610 and icmp_ln4_118_reg_617);
    and_ln107_12_fu_273_p2 <= (xor_ln107_fu_244_p2 and xor_ln107_54_fu_268_p2);
    and_ln107_13_fu_294_p2 <= (xor_ln107_56_fu_289_p2 and and_ln107_fu_258_p2);
    and_ln107_14_fu_310_p2 <= (xor_ln107_58_fu_305_p2 and and_ln107_12_fu_273_p2);
    and_ln107_fu_258_p2 <= (xor_ln107_53_fu_253_p2 and icmp_ln4_reg_610);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln120_122_fu_602_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln120_122_fu_602_p3;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_118_fu_172_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_B80)) else "0";
    icmp_ln4_119_fu_178_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_600)) else "0";
    icmp_ln4_120_fu_184_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_1280)) else "0";
    icmp_ln4_121_fu_190_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_6DA)) else "0";
    icmp_ln4_122_fu_196_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_3FA00)) else "0";
    icmp_ln4_123_fu_202_p2 <= "1" when (signed(p_read7_int_reg) < signed(ap_const_lv18_31)) else "0";
    icmp_ln4_124_fu_208_p2 <= "1" when (signed(p_read5_int_reg) < signed(ap_const_lv18_1280)) else "0";
    icmp_ln4_125_fu_214_p2 <= "1" when (signed(p_read4_int_reg) < signed(ap_const_lv18_C61)) else "0";
    icmp_ln4_126_fu_220_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_1F80)) else "0";
    icmp_ln4_127_fu_226_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_4980)) else "0";
    icmp_ln4_128_fu_232_p2 <= "1" when (signed(p_read7_int_reg) < signed(ap_const_lv18_4CC)) else "0";
    icmp_ln4_129_fu_238_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_CF2E)) else "0";
    icmp_ln4_fu_166_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_2FB7)) else "0";
    or_ln120_100_fu_449_p2 <= (or_ln120_99_reg_738 or and_ln105_139_fu_430_p2);
    or_ln120_101_fu_454_p2 <= (or_ln120_99_reg_738 or and_ln105_133_reg_727);
    or_ln120_102_fu_458_p2 <= (or_ln120_101_fu_454_p2 or and_ln105_141_fu_439_p2);
    or_ln120_103_fu_464_p2 <= (or_ln120_99_reg_738 or and_ln105_130_reg_689_pp0_iter2_reg);
    or_ln120_104_fu_522_p2 <= (or_ln120_103_reg_751 or and_ln105_142_fu_518_p2);
    or_ln120_105_fu_527_p2 <= (or_ln120_103_reg_751 or and_ln105_134_reg_713_pp0_iter3_reg);
    or_ln120_94_fu_345_p2 <= (or_ln120_reg_719 or and_ln105_135_fu_331_p2);
    or_ln120_95_fu_350_p2 <= (or_ln120_reg_719 or and_ln105_131_reg_696);
    or_ln120_96_fu_354_p2 <= (or_ln120_95_fu_350_p2 or and_ln105_137_fu_340_p2);
    or_ln120_97_fu_360_p2 <= (or_ln120_reg_719 or and_ln105_reg_683);
    or_ln120_98_fu_444_p2 <= (or_ln120_97_reg_733 or and_ln105_138_fu_426_p2);
    or_ln120_99_fu_364_p2 <= (or_ln120_97_fu_360_p2 or and_ln107_13_reg_707);
    or_ln120_fu_316_p2 <= (and_ln107_14_fu_310_p2 or and_ln105_132_fu_284_p2);
    select_ln120_111_fu_385_p3 <= 
        select_ln120_fu_378_p3 when (or_ln120_94_fu_345_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_112_fu_397_p3 <= 
        zext_ln120_19_fu_393_p1 when (or_ln120_95_fu_350_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_113_fu_405_p3 <= 
        select_ln120_112_fu_397_p3 when (or_ln120_96_fu_354_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_114_fu_413_p3 <= 
        select_ln120_113_fu_405_p3 when (or_ln120_97_fu_360_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_115_fu_468_p3 <= 
        select_ln120_114_reg_746 when (or_ln120_98_fu_444_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_116_fu_479_p3 <= 
        zext_ln120_20_fu_475_p1 when (or_ln120_99_reg_738(0) = '1') else 
        ap_const_lv4_8;
    select_ln120_117_fu_486_p3 <= 
        select_ln120_116_fu_479_p3 when (or_ln120_100_fu_449_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln120_118_fu_494_p3 <= 
        select_ln120_117_fu_486_p3 when (or_ln120_101_fu_454_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln120_119_fu_502_p3 <= 
        select_ln120_118_fu_494_p3 when (or_ln120_102_fu_458_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln120_120_fu_510_p3 <= 
        select_ln120_119_fu_502_p3 when (or_ln120_103_fu_464_p2(0) = '1') else 
        ap_const_lv4_C;
    select_ln120_122_fu_602_p3 <= 
        tmp_fu_538_p31 when (or_ln120_105_fu_527_p2(0) = '1') else 
        ap_const_lv11_0;
    select_ln120_fu_378_p3 <= 
        zext_ln120_fu_374_p1 when (or_ln120_reg_719(0) = '1') else 
        ap_const_lv2_2;
    tmp_fu_538_p29 <= "XXXXXXXXXXX";
    tmp_fu_538_p30 <= 
        select_ln120_120_reg_757 when (or_ln120_104_fu_522_p2(0) = '1') else 
        ap_const_lv4_D;
    xor_ln107_53_fu_253_p2 <= (icmp_ln4_118_reg_617 xor ap_const_lv1_1);
    xor_ln107_54_fu_268_p2 <= (icmp_ln4_119_reg_623 xor ap_const_lv1_1);
    xor_ln107_55_fu_322_p2 <= (icmp_ln4_120_reg_629_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_56_fu_289_p2 <= (icmp_ln4_121_reg_635 xor ap_const_lv1_1);
    xor_ln107_57_fu_421_p2 <= (icmp_ln4_122_reg_641_pp0_iter2_reg xor ap_const_lv1_1);
    xor_ln107_58_fu_305_p2 <= (icmp_ln4_123_reg_647 xor ap_const_lv1_1);
    xor_ln107_fu_244_p2 <= (icmp_ln4_reg_610 xor ap_const_lv1_1);
    xor_ln120_fu_369_p2 <= (ap_const_lv1_1 xor and_ln105_132_reg_702);
    zext_ln120_19_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_111_fu_385_p3),3));
    zext_ln120_20_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_115_fu_468_p3),4));
    zext_ln120_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln120_fu_369_p2),2));
end behav;
