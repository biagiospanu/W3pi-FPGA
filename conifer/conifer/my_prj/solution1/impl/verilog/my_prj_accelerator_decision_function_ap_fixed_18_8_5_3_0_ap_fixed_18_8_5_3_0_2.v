// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_2 (
        ap_clk,
        ap_rst,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] p_read1;
input  [17:0] p_read2;
input  [17:0] p_read3;
input  [17:0] p_read4;
input  [17:0] p_read5;
input  [17:0] p_read6;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_170_p2;
reg   [0:0] icmp_ln4_reg_638;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln4_reg_638_pp0_iter1_reg;
wire   [0:0] icmp_ln4_26_fu_182_p2;
reg   [0:0] icmp_ln4_26_reg_647;
wire   [0:0] icmp_ln4_27_fu_188_p2;
reg   [0:0] icmp_ln4_27_reg_653;
wire   [0:0] icmp_ln4_28_fu_194_p2;
reg   [0:0] icmp_ln4_28_reg_660;
reg   [0:0] icmp_ln4_28_reg_660_pp0_iter1_reg;
wire   [0:0] icmp_ln4_29_fu_200_p2;
reg   [0:0] icmp_ln4_29_reg_666;
reg   [0:0] icmp_ln4_29_reg_666_pp0_iter1_reg;
wire   [0:0] icmp_ln4_30_fu_206_p2;
reg   [0:0] icmp_ln4_30_reg_672;
reg   [0:0] icmp_ln4_30_reg_672_pp0_iter1_reg;
reg   [0:0] icmp_ln4_30_reg_672_pp0_iter2_reg;
wire   [0:0] icmp_ln4_31_fu_212_p2;
reg   [0:0] icmp_ln4_31_reg_678;
wire   [0:0] icmp_ln4_32_fu_218_p2;
reg   [0:0] icmp_ln4_32_reg_683;
wire   [0:0] icmp_ln4_33_fu_224_p2;
reg   [0:0] icmp_ln4_33_reg_688;
reg   [0:0] icmp_ln4_33_reg_688_pp0_iter1_reg;
wire   [0:0] icmp_ln4_34_fu_230_p2;
reg   [0:0] icmp_ln4_34_reg_693;
reg   [0:0] icmp_ln4_34_reg_693_pp0_iter1_reg;
wire   [0:0] icmp_ln4_67_fu_246_p2;
reg   [0:0] icmp_ln4_67_reg_698;
reg   [0:0] icmp_ln4_67_reg_698_pp0_iter1_reg;
wire   [0:0] icmp_ln4_36_fu_252_p2;
reg   [0:0] icmp_ln4_36_reg_703;
reg   [0:0] icmp_ln4_36_reg_703_pp0_iter1_reg;
reg   [0:0] icmp_ln4_36_reg_703_pp0_iter2_reg;
wire   [0:0] icmp_ln4_37_fu_258_p2;
reg   [0:0] icmp_ln4_37_reg_708;
reg   [0:0] icmp_ln4_37_reg_708_pp0_iter1_reg;
reg   [0:0] icmp_ln4_37_reg_708_pp0_iter2_reg;
wire   [0:0] and_ln105_fu_264_p2;
reg   [0:0] and_ln105_reg_713;
wire   [0:0] and_ln107_fu_276_p2;
reg   [0:0] and_ln107_reg_723;
reg   [0:0] and_ln107_reg_723_pp0_iter1_reg;
wire   [0:0] and_ln105_22_fu_287_p2;
reg   [0:0] and_ln105_22_reg_729;
wire   [0:0] and_ln107_3_fu_297_p2;
reg   [0:0] and_ln107_3_reg_735;
reg   [0:0] and_ln107_3_reg_735_pp0_iter2_reg;
wire   [0:0] and_ln105_25_fu_317_p2;
reg   [0:0] and_ln105_25_reg_741;
wire   [0:0] or_ln120_24_fu_347_p2;
reg   [0:0] or_ln120_24_reg_747;
wire   [2:0] select_ln120_26_fu_393_p3;
reg   [2:0] select_ln120_26_reg_752;
wire   [0:0] and_ln105_26_fu_411_p2;
reg   [0:0] and_ln105_26_reg_757;
wire   [0:0] or_ln120_29_fu_459_p2;
reg   [0:0] or_ln120_29_reg_762;
wire   [0:0] or_ln120_31_fu_463_p2;
reg   [0:0] or_ln120_31_reg_767;
wire   [3:0] select_ln120_32_fu_511_p3;
reg   [3:0] select_ln120_32_reg_773;
wire    ap_block_pp0_stage0;
wire   [6:0] tmp_fu_236_p4;
wire   [0:0] icmp_ln4_25_fu_176_p2;
wire   [0:0] xor_ln107_12_fu_270_p2;
wire   [0:0] xor_ln107_fu_282_p2;
wire   [0:0] xor_ln107_13_fu_292_p2;
wire   [0:0] xor_ln107_14_fu_303_p2;
wire   [0:0] and_ln105_34_fu_322_p2;
wire   [0:0] and_ln105_24_fu_313_p2;
wire   [0:0] and_ln107_4_fu_308_p2;
wire   [0:0] and_ln105_27_fu_326_p2;
wire   [0:0] and_ln105_28_fu_331_p2;
wire   [0:0] xor_ln120_fu_352_p2;
wire   [0:0] or_ln120_33_fu_357_p2;
wire   [0:0] or_ln120_fu_336_p2;
wire   [1:0] zext_ln120_fu_362_p1;
wire   [1:0] select_ln120_fu_366_p3;
wire   [1:0] select_ln120_24_fu_374_p3;
wire   [0:0] or_ln120_23_fu_342_p2;
wire   [2:0] zext_ln120_5_fu_381_p1;
wire   [2:0] select_ln120_25_fu_385_p3;
wire   [0:0] xor_ln107_15_fu_401_p2;
wire   [0:0] and_ln105_35_fu_415_p2;
wire   [0:0] xor_ln107_16_fu_406_p2;
wire   [0:0] and_ln105_36_fu_429_p2;
wire   [0:0] and_ln105_29_fu_420_p2;
wire   [0:0] and_ln105_30_fu_425_p2;
wire   [0:0] or_ln120_27_fu_449_p2;
wire   [0:0] and_ln105_31_fu_434_p2;
wire   [0:0] or_ln120_25_fu_439_p2;
wire   [2:0] select_ln120_27_fu_469_p3;
wire   [2:0] select_ln120_28_fu_476_p3;
wire   [0:0] or_ln120_26_fu_444_p2;
wire   [3:0] zext_ln120_6_fu_483_p1;
wire   [3:0] select_ln120_29_fu_487_p3;
wire   [0:0] or_ln120_28_fu_453_p2;
wire   [3:0] select_ln120_30_fu_495_p3;
wire   [3:0] select_ln120_31_fu_503_p3;
wire   [0:0] xor_ln107_17_fu_519_p2;
wire   [0:0] and_ln105_37_fu_528_p2;
wire   [0:0] and_ln105_32_fu_524_p2;
wire   [0:0] and_ln105_33_fu_533_p2;
wire   [0:0] or_ln120_30_fu_538_p2;
wire   [3:0] select_ln120_33_fu_548_p3;
wire   [0:0] or_ln120_32_fu_543_p2;
wire   [3:0] select_ln120_34_fu_555_p3;
wire   [10:0] agg_result_fu_570_p31;
wire   [3:0] agg_result_fu_570_p32;
wire   [10:0] agg_result_fu_570_p33;
reg    ap_ce_reg;
reg   [17:0] p_read1_int_reg;
reg   [17:0] p_read2_int_reg;
reg   [17:0] p_read3_int_reg;
reg   [17:0] p_read4_int_reg;
reg   [17:0] p_read5_int_reg;
reg   [17:0] p_read6_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] agg_result_fu_570_p1;
wire   [3:0] agg_result_fu_570_p3;
wire   [3:0] agg_result_fu_570_p5;
wire   [3:0] agg_result_fu_570_p7;
wire   [3:0] agg_result_fu_570_p9;
wire   [3:0] agg_result_fu_570_p11;
wire   [3:0] agg_result_fu_570_p13;
wire   [3:0] agg_result_fu_570_p15;
wire  signed [3:0] agg_result_fu_570_p17;
wire  signed [3:0] agg_result_fu_570_p19;
wire  signed [3:0] agg_result_fu_570_p21;
wire  signed [3:0] agg_result_fu_570_p23;
wire  signed [3:0] agg_result_fu_570_p25;
wire  signed [3:0] agg_result_fu_570_p27;
wire  signed [3:0] agg_result_fu_570_p29;

my_prj_accelerator_sparsemux_31_4_11_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_31_4_11_1_0_U92(
    .din0(11'd723),
    .din1(11'd2038),
    .din2(11'd1678),
    .din3(11'd1812),
    .din4(11'd1486),
    .din5(11'd1621),
    .din6(11'd298),
    .din7(11'd1544),
    .din8(11'd1819),
    .din9(11'd160),
    .din10(11'd1364),
    .din11(11'd1578),
    .din12(11'd1390),
    .din13(11'd2000),
    .din14(11'd1467),
    .def(agg_result_fu_570_p31),
    .sel(agg_result_fu_570_p32),
    .dout(agg_result_fu_570_p33)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_22_reg_729 <= and_ln105_22_fu_287_p2;
        and_ln105_25_reg_741 <= and_ln105_25_fu_317_p2;
        and_ln105_26_reg_757 <= and_ln105_26_fu_411_p2;
        and_ln105_reg_713 <= and_ln105_fu_264_p2;
        and_ln107_3_reg_735 <= and_ln107_3_fu_297_p2;
        and_ln107_3_reg_735_pp0_iter2_reg <= and_ln107_3_reg_735;
        and_ln107_reg_723 <= and_ln107_fu_276_p2;
        and_ln107_reg_723_pp0_iter1_reg <= and_ln107_reg_723;
        icmp_ln4_26_reg_647 <= icmp_ln4_26_fu_182_p2;
        icmp_ln4_27_reg_653 <= icmp_ln4_27_fu_188_p2;
        icmp_ln4_28_reg_660 <= icmp_ln4_28_fu_194_p2;
        icmp_ln4_28_reg_660_pp0_iter1_reg <= icmp_ln4_28_reg_660;
        icmp_ln4_29_reg_666 <= icmp_ln4_29_fu_200_p2;
        icmp_ln4_29_reg_666_pp0_iter1_reg <= icmp_ln4_29_reg_666;
        icmp_ln4_30_reg_672 <= icmp_ln4_30_fu_206_p2;
        icmp_ln4_30_reg_672_pp0_iter1_reg <= icmp_ln4_30_reg_672;
        icmp_ln4_30_reg_672_pp0_iter2_reg <= icmp_ln4_30_reg_672_pp0_iter1_reg;
        icmp_ln4_31_reg_678 <= icmp_ln4_31_fu_212_p2;
        icmp_ln4_32_reg_683 <= icmp_ln4_32_fu_218_p2;
        icmp_ln4_33_reg_688 <= icmp_ln4_33_fu_224_p2;
        icmp_ln4_33_reg_688_pp0_iter1_reg <= icmp_ln4_33_reg_688;
        icmp_ln4_34_reg_693 <= icmp_ln4_34_fu_230_p2;
        icmp_ln4_34_reg_693_pp0_iter1_reg <= icmp_ln4_34_reg_693;
        icmp_ln4_36_reg_703 <= icmp_ln4_36_fu_252_p2;
        icmp_ln4_36_reg_703_pp0_iter1_reg <= icmp_ln4_36_reg_703;
        icmp_ln4_36_reg_703_pp0_iter2_reg <= icmp_ln4_36_reg_703_pp0_iter1_reg;
        icmp_ln4_37_reg_708 <= icmp_ln4_37_fu_258_p2;
        icmp_ln4_37_reg_708_pp0_iter1_reg <= icmp_ln4_37_reg_708;
        icmp_ln4_37_reg_708_pp0_iter2_reg <= icmp_ln4_37_reg_708_pp0_iter1_reg;
        icmp_ln4_67_reg_698 <= icmp_ln4_67_fu_246_p2;
        icmp_ln4_67_reg_698_pp0_iter1_reg <= icmp_ln4_67_reg_698;
        icmp_ln4_reg_638 <= icmp_ln4_fu_170_p2;
        icmp_ln4_reg_638_pp0_iter1_reg <= icmp_ln4_reg_638;
        or_ln120_24_reg_747 <= or_ln120_24_fu_347_p2;
        or_ln120_29_reg_762 <= or_ln120_29_fu_459_p2;
        or_ln120_31_reg_767 <= or_ln120_31_fu_463_p2;
        select_ln120_26_reg_752 <= select_ln120_26_fu_393_p3;
        select_ln120_32_reg_773 <= select_ln120_32_fu_511_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_570_p33;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        p_read1_int_reg <= p_read1;
        p_read2_int_reg <= p_read2;
        p_read3_int_reg <= p_read3;
        p_read4_int_reg <= p_read4;
        p_read5_int_reg <= p_read5;
        p_read6_int_reg <= p_read6;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_570_p33;
    end else begin
        ap_return = 'bx;
    end
end

assign agg_result_fu_570_p31 = 'bx;

assign agg_result_fu_570_p32 = ((or_ln120_32_fu_543_p2[0:0] == 1'b1) ? select_ln120_34_fu_555_p3 : 4'd14);

assign and_ln105_22_fu_287_p2 = (xor_ln107_fu_282_p2 & icmp_ln4_26_reg_647);

assign and_ln105_24_fu_313_p2 = (icmp_ln4_28_reg_660 & and_ln107_reg_723);

assign and_ln105_25_fu_317_p2 = (icmp_ln4_29_reg_666 & and_ln105_22_fu_287_p2);

assign and_ln105_26_fu_411_p2 = (icmp_ln4_30_reg_672_pp0_iter1_reg & and_ln107_3_reg_735);

assign and_ln105_27_fu_326_p2 = (icmp_ln4_27_reg_653 & and_ln105_34_fu_322_p2);

assign and_ln105_28_fu_331_p2 = (icmp_ln4_32_reg_683 & and_ln105_24_fu_313_p2);

assign and_ln105_29_fu_420_p2 = (and_ln107_reg_723_pp0_iter1_reg & and_ln105_35_fu_415_p2);

assign and_ln105_30_fu_425_p2 = (icmp_ln4_34_reg_693_pp0_iter1_reg & and_ln105_25_reg_741);

assign and_ln105_31_fu_434_p2 = (and_ln105_36_fu_429_p2 & and_ln105_22_reg_729);

assign and_ln105_32_fu_524_p2 = (icmp_ln4_36_reg_703_pp0_iter2_reg & and_ln105_26_reg_757);

assign and_ln105_33_fu_533_p2 = (and_ln107_3_reg_735_pp0_iter2_reg & and_ln105_37_fu_528_p2);

assign and_ln105_34_fu_322_p2 = (icmp_ln4_31_reg_678 & and_ln105_reg_713);

assign and_ln105_35_fu_415_p2 = (xor_ln107_15_fu_401_p2 & icmp_ln4_33_reg_688_pp0_iter1_reg);

assign and_ln105_36_fu_429_p2 = (xor_ln107_16_fu_406_p2 & icmp_ln4_67_reg_698_pp0_iter1_reg);

assign and_ln105_37_fu_528_p2 = (xor_ln107_17_fu_519_p2 & icmp_ln4_37_reg_708_pp0_iter2_reg);

assign and_ln105_fu_264_p2 = (icmp_ln4_fu_170_p2 & icmp_ln4_25_fu_176_p2);

assign and_ln107_3_fu_297_p2 = (xor_ln107_fu_282_p2 & xor_ln107_13_fu_292_p2);

assign and_ln107_4_fu_308_p2 = (xor_ln107_14_fu_303_p2 & and_ln105_reg_713);

assign and_ln107_fu_276_p2 = (xor_ln107_12_fu_270_p2 & icmp_ln4_fu_170_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_25_fu_176_p2 = (($signed(p_read1_int_reg) < $signed(18'd2432)) ? 1'b1 : 1'b0);

assign icmp_ln4_26_fu_182_p2 = (($signed(p_read5_int_reg) < $signed(18'd648)) ? 1'b1 : 1'b0);

assign icmp_ln4_27_fu_188_p2 = (($signed(p_read3_int_reg) < $signed(18'd19743)) ? 1'b1 : 1'b0);

assign icmp_ln4_28_fu_194_p2 = (($signed(p_read2_int_reg) < $signed(18'd12215)) ? 1'b1 : 1'b0);

assign icmp_ln4_29_fu_200_p2 = (($signed(p_read6_int_reg) < $signed(18'd261686)) ? 1'b1 : 1'b0);

assign icmp_ln4_30_fu_206_p2 = (($signed(p_read3_int_reg) < $signed(18'd76963)) ? 1'b1 : 1'b0);

assign icmp_ln4_31_fu_212_p2 = (($signed(p_read5_int_reg) < $signed(18'd272)) ? 1'b1 : 1'b0);

assign icmp_ln4_32_fu_218_p2 = (($signed(p_read1_int_reg) < $signed(18'd2688)) ? 1'b1 : 1'b0);

assign icmp_ln4_33_fu_224_p2 = (($signed(p_read3_int_reg) < $signed(18'd80437)) ? 1'b1 : 1'b0);

assign icmp_ln4_34_fu_230_p2 = (($signed(p_read6_int_reg) < $signed(18'd261478)) ? 1'b1 : 1'b0);

assign icmp_ln4_36_fu_252_p2 = (($signed(p_read6_int_reg) < $signed(18'd828)) ? 1'b1 : 1'b0);

assign icmp_ln4_37_fu_258_p2 = (($signed(p_read3_int_reg) < $signed(18'd85806)) ? 1'b1 : 1'b0);

assign icmp_ln4_67_fu_246_p2 = (($signed(tmp_fu_236_p4) < $signed(7'd1)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_170_p2 = (($signed(p_read2_int_reg) < $signed(18'd18786)) ? 1'b1 : 1'b0);

assign or_ln120_23_fu_342_p2 = (and_ln105_reg_713 | and_ln105_28_fu_331_p2);

assign or_ln120_24_fu_347_p2 = (and_ln105_reg_713 | and_ln105_24_fu_313_p2);

assign or_ln120_25_fu_439_p2 = (or_ln120_24_reg_747 | and_ln105_29_fu_420_p2);

assign or_ln120_26_fu_444_p2 = (icmp_ln4_reg_638_pp0_iter1_reg | and_ln105_30_fu_425_p2);

assign or_ln120_27_fu_449_p2 = (icmp_ln4_reg_638_pp0_iter1_reg | and_ln105_25_reg_741);

assign or_ln120_28_fu_453_p2 = (or_ln120_27_fu_449_p2 | and_ln105_31_fu_434_p2);

assign or_ln120_29_fu_459_p2 = (icmp_ln4_reg_638_pp0_iter1_reg | and_ln105_22_reg_729);

assign or_ln120_30_fu_538_p2 = (or_ln120_29_reg_762 | and_ln105_32_fu_524_p2);

assign or_ln120_31_fu_463_p2 = (or_ln120_29_fu_459_p2 | and_ln105_26_fu_411_p2);

assign or_ln120_32_fu_543_p2 = (or_ln120_31_reg_767 | and_ln105_33_fu_533_p2);

assign or_ln120_33_fu_357_p2 = (xor_ln120_fu_352_p2 | icmp_ln4_27_reg_653);

assign or_ln120_fu_336_p2 = (and_ln107_4_fu_308_p2 | and_ln105_27_fu_326_p2);

assign select_ln120_24_fu_374_p3 = ((and_ln105_reg_713[0:0] == 1'b1) ? select_ln120_fu_366_p3 : 2'd3);

assign select_ln120_25_fu_385_p3 = ((or_ln120_23_fu_342_p2[0:0] == 1'b1) ? zext_ln120_5_fu_381_p1 : 3'd4);

assign select_ln120_26_fu_393_p3 = ((or_ln120_24_fu_347_p2[0:0] == 1'b1) ? select_ln120_25_fu_385_p3 : 3'd5);

assign select_ln120_27_fu_469_p3 = ((or_ln120_25_fu_439_p2[0:0] == 1'b1) ? select_ln120_26_reg_752 : 3'd6);

assign select_ln120_28_fu_476_p3 = ((icmp_ln4_reg_638_pp0_iter1_reg[0:0] == 1'b1) ? select_ln120_27_fu_469_p3 : 3'd7);

assign select_ln120_29_fu_487_p3 = ((or_ln120_26_fu_444_p2[0:0] == 1'b1) ? zext_ln120_6_fu_483_p1 : 4'd8);

assign select_ln120_30_fu_495_p3 = ((or_ln120_27_fu_449_p2[0:0] == 1'b1) ? select_ln120_29_fu_487_p3 : 4'd9);

assign select_ln120_31_fu_503_p3 = ((or_ln120_28_fu_453_p2[0:0] == 1'b1) ? select_ln120_30_fu_495_p3 : 4'd10);

assign select_ln120_32_fu_511_p3 = ((or_ln120_29_fu_459_p2[0:0] == 1'b1) ? select_ln120_31_fu_503_p3 : 4'd11);

assign select_ln120_33_fu_548_p3 = ((or_ln120_30_fu_538_p2[0:0] == 1'b1) ? select_ln120_32_reg_773 : 4'd12);

assign select_ln120_34_fu_555_p3 = ((or_ln120_31_reg_767[0:0] == 1'b1) ? select_ln120_33_fu_548_p3 : 4'd13);

assign select_ln120_fu_366_p3 = ((or_ln120_fu_336_p2[0:0] == 1'b1) ? zext_ln120_fu_362_p1 : 2'd2);

assign tmp_fu_236_p4 = {{p_read4_int_reg[17:11]}};

assign xor_ln107_12_fu_270_p2 = (icmp_ln4_25_fu_176_p2 ^ 1'd1);

assign xor_ln107_13_fu_292_p2 = (icmp_ln4_26_reg_647 ^ 1'd1);

assign xor_ln107_14_fu_303_p2 = (icmp_ln4_27_reg_653 ^ 1'd1);

assign xor_ln107_15_fu_401_p2 = (icmp_ln4_28_reg_660_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_16_fu_406_p2 = (icmp_ln4_29_reg_666_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_17_fu_519_p2 = (icmp_ln4_30_reg_672_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_fu_282_p2 = (icmp_ln4_reg_638 ^ 1'd1);

assign xor_ln120_fu_352_p2 = (1'd1 ^ and_ln105_reg_713);

assign zext_ln120_5_fu_381_p1 = select_ln120_24_fu_374_p3;

assign zext_ln120_6_fu_483_p1 = select_ln120_28_fu_476_p3;

assign zext_ln120_fu_362_p1 = or_ln120_33_fu_357_p2;

endmodule //my_prj_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_2
