-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_6DA : STD_LOGIC_VECTOR (17 downto 0) := "000000011011011010";
    constant ap_const_lv18_191 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110010001";
    constant ap_const_lv18_3FD88 : STD_LOGIC_VECTOR (17 downto 0) := "111111110110001000";
    constant ap_const_lv18_135D3 : STD_LOGIC_VECTOR (17 downto 0) := "010011010111010011";
    constant ap_const_lv18_E50B : STD_LOGIC_VECTOR (17 downto 0) := "001110010100001011";
    constant ap_const_lv18_133 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100110011";
    constant ap_const_lv18_1480 : STD_LOGIC_VECTOR (17 downto 0) := "000001010010000000";
    constant ap_const_lv18_B500 : STD_LOGIC_VECTOR (17 downto 0) := "001011010100000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv11_5EC : STD_LOGIC_VECTOR (10 downto 0) := "10111101100";
    constant ap_const_lv11_60F : STD_LOGIC_VECTOR (10 downto 0) := "11000001111";
    constant ap_const_lv11_7AA : STD_LOGIC_VECTOR (10 downto 0) := "11110101010";
    constant ap_const_lv11_53 : STD_LOGIC_VECTOR (10 downto 0) := "00001010011";
    constant ap_const_lv11_79D : STD_LOGIC_VECTOR (10 downto 0) := "11110011101";
    constant ap_const_lv11_6FB : STD_LOGIC_VECTOR (10 downto 0) := "11011111011";
    constant ap_const_lv11_7C7 : STD_LOGIC_VECTOR (10 downto 0) := "11111000111";
    constant ap_const_lv11_84 : STD_LOGIC_VECTOR (10 downto 0) := "00010000100";
    constant ap_const_lv11_6F0 : STD_LOGIC_VECTOR (10 downto 0) := "11011110000";

attribute shreg_extract : string;
    signal icmp_ln4_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_reg_389_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_11_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_11_reg_396 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_12_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_12_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_12_reg_402_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_13_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_13_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_13_reg_408_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_13_reg_408_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_14_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_14_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_14_reg_414_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_15_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_15_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_15_reg_419_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_16_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_16_reg_424 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_16_reg_424_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_17_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_17_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_17_reg_429_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_17_reg_429_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_reg_434 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_reg_434_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_reg_441 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_447_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_13_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_13_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_9_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_9_reg_458 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_13_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_13_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_14_fu_306_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_14_reg_469 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal xor_ln107_6_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_7_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_16_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_14_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_15_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_17_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_11_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_18_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_260_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_fu_263_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_10_fu_271_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln120_10_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_3_fu_278_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_11_fu_282_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_12_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_12_fu_290_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_13_fu_298_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln107_8_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_19_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_20_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_14_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_4_fu_334_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_345_p19 : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_345_p20 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_345_p21 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read1_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_345_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_345_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_345_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_345_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_345_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_345_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_345_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_345_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_345_p17 : STD_LOGIC_VECTOR (3 downto 0);

    component conifer_xgboost_moons_accelerator_sparsemux_19_4_11_1_0_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_19_4_11_1_0_x_U193 : component conifer_xgboost_moons_accelerator_sparsemux_19_4_11_1_0_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_5EC,
        din1 => ap_const_lv11_60F,
        din2 => ap_const_lv11_7AA,
        din3 => ap_const_lv11_53,
        din4 => ap_const_lv11_79D,
        din5 => ap_const_lv11_6FB,
        din6 => ap_const_lv11_7C7,
        din7 => ap_const_lv11_84,
        din8 => ap_const_lv11_6F0,
        def => agg_result_fu_345_p19,
        sel => agg_result_fu_345_p20,
        dout => agg_result_fu_345_p21);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_13_reg_453 <= and_ln105_13_fu_196_p2;
                and_ln105_reg_441 <= and_ln105_fu_182_p2;
                and_ln107_reg_447 <= and_ln107_fu_191_p2;
                and_ln107_reg_447_pp0_iter2_reg <= and_ln107_reg_447;
                icmp_ln4_11_reg_396 <= icmp_ln4_11_fu_134_p2;
                icmp_ln4_12_reg_402 <= icmp_ln4_12_fu_140_p2;
                icmp_ln4_12_reg_402_pp0_iter1_reg <= icmp_ln4_12_reg_402;
                icmp_ln4_13_reg_408 <= icmp_ln4_13_fu_146_p2;
                icmp_ln4_13_reg_408_pp0_iter1_reg <= icmp_ln4_13_reg_408;
                icmp_ln4_13_reg_408_pp0_iter2_reg <= icmp_ln4_13_reg_408_pp0_iter1_reg;
                icmp_ln4_14_reg_414 <= icmp_ln4_14_fu_152_p2;
                icmp_ln4_14_reg_414_pp0_iter1_reg <= icmp_ln4_14_reg_414;
                icmp_ln4_15_reg_419 <= icmp_ln4_15_fu_158_p2;
                icmp_ln4_15_reg_419_pp0_iter1_reg <= icmp_ln4_15_reg_419;
                icmp_ln4_16_reg_424 <= icmp_ln4_16_fu_164_p2;
                icmp_ln4_16_reg_424_pp0_iter1_reg <= icmp_ln4_16_reg_424;
                icmp_ln4_17_reg_429 <= icmp_ln4_17_fu_170_p2;
                icmp_ln4_17_reg_429_pp0_iter1_reg <= icmp_ln4_17_reg_429;
                icmp_ln4_17_reg_429_pp0_iter2_reg <= icmp_ln4_17_reg_429_pp0_iter1_reg;
                icmp_ln4_reg_389 <= icmp_ln4_fu_128_p2;
                icmp_ln4_reg_389_pp0_iter1_reg <= icmp_ln4_reg_389;
                or_ln120_13_reg_464 <= or_ln120_13_fu_254_p2;
                or_ln120_9_reg_458 <= or_ln120_9_fu_201_p2;
                select_ln120_14_reg_469 <= select_ln120_14_fu_306_p3;
                xor_ln107_reg_434 <= xor_ln107_fu_176_p2;
                xor_ln107_reg_434_pp0_iter1_reg <= xor_ln107_reg_434;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= agg_result_fu_345_p21;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
            end if;
        end if;
    end process;
    agg_result_fu_345_p19 <= "XXXXXXXXXXX";
    agg_result_fu_345_p20 <= 
        zext_ln120_4_fu_334_p1 when (or_ln120_14_fu_329_p2(0) = '1') else 
        ap_const_lv4_8;
    and_ln105_13_fu_196_p2 <= (icmp_ln4_12_reg_402 and and_ln105_fu_182_p2);
    and_ln105_14_fu_211_p2 <= (icmp_ln4_13_reg_408_pp0_iter1_reg and and_ln107_reg_447);
    and_ln105_15_fu_215_p2 <= (icmp_ln4_14_reg_414_pp0_iter1_reg and and_ln105_13_reg_453);
    and_ln105_16_fu_219_p2 <= (xor_ln107_7_fu_206_p2 and icmp_ln4_15_reg_419_pp0_iter1_reg);
    and_ln105_17_fu_224_p2 <= (and_ln105_reg_441 and and_ln105_16_fu_219_p2);
    and_ln105_18_fu_229_p2 <= (icmp_ln4_16_reg_424_pp0_iter1_reg and and_ln105_14_fu_211_p2);
    and_ln105_19_fu_319_p2 <= (xor_ln107_8_fu_314_p2 and icmp_ln4_17_reg_429_pp0_iter2_reg);
    and_ln105_20_fu_324_p2 <= (and_ln107_reg_447_pp0_iter2_reg and and_ln105_19_fu_319_p2);
    and_ln105_fu_182_p2 <= (xor_ln107_reg_434 and icmp_ln4_11_reg_396);
    and_ln107_fu_191_p2 <= (xor_ln107_reg_434 and xor_ln107_6_fu_186_p2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(agg_result_fu_345_p21, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= agg_result_fu_345_p21;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_11_fu_134_p2 <= "1" when (signed(p_read4_int_reg) < signed(ap_const_lv18_191)) else "0";
    icmp_ln4_12_fu_140_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_3FD88)) else "0";
    icmp_ln4_13_fu_146_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_135D3)) else "0";
    icmp_ln4_14_fu_152_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_E50B)) else "0";
    icmp_ln4_15_fu_158_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_133)) else "0";
    icmp_ln4_16_fu_164_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_1480)) else "0";
    icmp_ln4_17_fu_170_p2 <= "1" when (signed(p_read5_int_reg) < signed(ap_const_lv18_B500)) else "0";
    icmp_ln4_fu_128_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_6DA)) else "0";
    or_ln120_10_fu_239_p2 <= (or_ln120_9_reg_458 or and_ln105_17_fu_224_p2);
    or_ln120_11_fu_244_p2 <= (icmp_ln4_reg_389_pp0_iter1_reg or and_ln105_reg_441);
    or_ln120_12_fu_248_p2 <= (or_ln120_11_fu_244_p2 or and_ln105_18_fu_229_p2);
    or_ln120_13_fu_254_p2 <= (or_ln120_11_fu_244_p2 or and_ln105_14_fu_211_p2);
    or_ln120_14_fu_329_p2 <= (or_ln120_13_reg_464 or and_ln105_20_fu_324_p2);
    or_ln120_9_fu_201_p2 <= (icmp_ln4_reg_389 or and_ln105_13_fu_196_p2);
    or_ln120_fu_234_p2 <= (icmp_ln4_reg_389_pp0_iter1_reg or and_ln105_15_fu_215_p2);
    select_ln120_10_fu_271_p3 <= 
        select_ln120_fu_263_p3 when (or_ln120_9_reg_458(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_11_fu_282_p3 <= 
        zext_ln120_3_fu_278_p1 when (or_ln120_10_fu_239_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_12_fu_290_p3 <= 
        select_ln120_11_fu_282_p3 when (or_ln120_11_fu_244_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_13_fu_298_p3 <= 
        select_ln120_12_fu_290_p3 when (or_ln120_12_fu_248_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_14_fu_306_p3 <= 
        select_ln120_13_fu_298_p3 when (or_ln120_13_fu_254_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_fu_263_p3 <= 
        zext_ln120_fu_260_p1 when (or_ln120_fu_234_p2(0) = '1') else 
        ap_const_lv2_2;
    xor_ln107_6_fu_186_p2 <= (icmp_ln4_11_reg_396 xor ap_const_lv1_1);
    xor_ln107_7_fu_206_p2 <= (icmp_ln4_12_reg_402_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_8_fu_314_p2 <= (icmp_ln4_13_reg_408_pp0_iter2_reg xor ap_const_lv1_1);
    xor_ln107_fu_176_p2 <= (icmp_ln4_fu_128_p2 xor ap_const_lv1_1);
    zext_ln120_3_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_10_fu_271_p3),3));
    zext_ln120_4_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_14_reg_469),4));
    zext_ln120_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln107_reg_434_pp0_iter1_reg),2));
end behav;
