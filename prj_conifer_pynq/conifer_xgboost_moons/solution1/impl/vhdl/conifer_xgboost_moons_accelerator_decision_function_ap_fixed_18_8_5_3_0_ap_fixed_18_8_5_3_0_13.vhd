-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_3FD94 : STD_LOGIC_VECTOR (17 downto 0) := "111111110110010100";
    constant ap_const_lv18_11903 : STD_LOGIC_VECTOR (17 downto 0) := "010001100100000011";
    constant ap_const_lv18_15A2A : STD_LOGIC_VECTOR (17 downto 0) := "010101101000101010";
    constant ap_const_lv18_8C80 : STD_LOGIC_VECTOR (17 downto 0) := "001000110010000000";
    constant ap_const_lv18_CDD : STD_LOGIC_VECTOR (17 downto 0) := "000000110011011101";
    constant ap_const_lv18_3480 : STD_LOGIC_VECTOR (17 downto 0) := "000011010010000000";
    constant ap_const_lv18_15B67 : STD_LOGIC_VECTOR (17 downto 0) := "010101101101100111";
    constant ap_const_lv18_4E80 : STD_LOGIC_VECTOR (17 downto 0) := "000100111010000000";
    constant ap_const_lv18_3FC3C : STD_LOGIC_VECTOR (17 downto 0) := "111111110000111100";
    constant ap_const_lv18_18 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000011000";
    constant ap_const_lv18_3FAE8 : STD_LOGIC_VECTOR (17 downto 0) := "111111101011101000";
    constant ap_const_lv18_1B80 : STD_LOGIC_VECTOR (17 downto 0) := "000001101110000000";
    constant ap_const_lv18_11F76 : STD_LOGIC_VECTOR (17 downto 0) := "010001111101110110";
    constant ap_const_lv18_2980 : STD_LOGIC_VECTOR (17 downto 0) := "000010100110000000";
    constant ap_const_lv18_1ACEF : STD_LOGIC_VECTOR (17 downto 0) := "011010110011101111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_67B : STD_LOGIC_VECTOR (10 downto 0) := "11001111011";
    constant ap_const_lv11_447 : STD_LOGIC_VECTOR (10 downto 0) := "10001000111";
    constant ap_const_lv11_6EE : STD_LOGIC_VECTOR (10 downto 0) := "11011101110";
    constant ap_const_lv11_DB : STD_LOGIC_VECTOR (10 downto 0) := "00011011011";
    constant ap_const_lv11_39 : STD_LOGIC_VECTOR (10 downto 0) := "00000111001";
    constant ap_const_lv11_51D : STD_LOGIC_VECTOR (10 downto 0) := "10100011101";
    constant ap_const_lv11_776 : STD_LOGIC_VECTOR (10 downto 0) := "11101110110";
    constant ap_const_lv11_2CB : STD_LOGIC_VECTOR (10 downto 0) := "01011001011";
    constant ap_const_lv11_685 : STD_LOGIC_VECTOR (10 downto 0) := "11010000101";
    constant ap_const_lv11_1D : STD_LOGIC_VECTOR (10 downto 0) := "00000011101";
    constant ap_const_lv11_18 : STD_LOGIC_VECTOR (10 downto 0) := "00000011000";
    constant ap_const_lv11_1CE : STD_LOGIC_VECTOR (10 downto 0) := "00111001110";
    constant ap_const_lv11_61C : STD_LOGIC_VECTOR (10 downto 0) := "11000011100";
    constant ap_const_lv11_38 : STD_LOGIC_VECTOR (10 downto 0) := "00000111000";
    constant ap_const_lv11_26A : STD_LOGIC_VECTOR (10 downto 0) := "01001101010";
    constant ap_const_lv11_70B : STD_LOGIC_VECTOR (10 downto 0) := "11100001011";

attribute shreg_extract : string;
    signal icmp_ln4_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_659 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_reg_659_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_659_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_130_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_130_reg_670 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_131_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_131_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_132_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_132_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_133_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_133_reg_688 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_133_reg_688_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_134_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_134_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_134_reg_694_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_134_reg_694_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_135_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_135_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_135_reg_700_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_135_reg_700_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_135_reg_700_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_136_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_136_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_136_reg_706_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_137_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_137_reg_711 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_138_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_138_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_138_reg_716_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_139_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_139_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_139_reg_721_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_140_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_140_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_140_reg_726_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_140_reg_726_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_141_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_141_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_141_reg_731_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_141_reg_731_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_142_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_142_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_142_reg_736_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_142_reg_736_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_143_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_143_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_143_reg_741_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_143_reg_741_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_143_reg_741_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_142_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_142_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_142_reg_758_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_15_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_15_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_15_reg_765_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_15_reg_765_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_143_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_143_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_144_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_144_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_145_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_145_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_110_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_110_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_128_fu_453_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_128_reg_799 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_114_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_114_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_134_fu_552_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_134_reg_809 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal xor_ln107_59_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_60_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_61_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_155_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_148_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_62_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_156_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_149_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_107_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_150_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_147_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln120_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_396_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_fu_400_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_123_fu_407_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln120_21_fu_414_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_106_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_124_fu_418_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_125_fu_425_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_108_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_126_fu_433_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_127_fu_441_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln120_22_fu_449_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln107_63_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_157_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_146_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_151_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_152_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_112_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_153_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_109_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_129_fu_514_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_111_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_130_fu_521_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_131_fu_528_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_113_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_132_fu_536_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_133_fu_544_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln107_64_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_158_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_154_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_115_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_fu_587_p33 : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_587_p34 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p35 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read1_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read7_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read8_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_587_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_587_p31 : STD_LOGIC_VECTOR (3 downto 0);

    component conifer_xgboost_moons_accelerator_sparsemux_33_4_11_1_0_x3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        din9 : IN STD_LOGIC_VECTOR (10 downto 0);
        din10 : IN STD_LOGIC_VECTOR (10 downto 0);
        din11 : IN STD_LOGIC_VECTOR (10 downto 0);
        din12 : IN STD_LOGIC_VECTOR (10 downto 0);
        din13 : IN STD_LOGIC_VECTOR (10 downto 0);
        din14 : IN STD_LOGIC_VECTOR (10 downto 0);
        din15 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_33_4_11_1_0_x3_U148 : component conifer_xgboost_moons_accelerator_sparsemux_33_4_11_1_0_x3
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        CASE9 => "1001",
        din9_WIDTH => 11,
        CASE10 => "1010",
        din10_WIDTH => 11,
        CASE11 => "1011",
        din11_WIDTH => 11,
        CASE12 => "1100",
        din12_WIDTH => 11,
        CASE13 => "1101",
        din13_WIDTH => 11,
        CASE14 => "1110",
        din14_WIDTH => 11,
        CASE15 => "1111",
        din15_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_67B,
        din1 => ap_const_lv11_447,
        din2 => ap_const_lv11_6EE,
        din3 => ap_const_lv11_DB,
        din4 => ap_const_lv11_39,
        din5 => ap_const_lv11_51D,
        din6 => ap_const_lv11_776,
        din7 => ap_const_lv11_2CB,
        din8 => ap_const_lv11_685,
        din9 => ap_const_lv11_1D,
        din10 => ap_const_lv11_18,
        din11 => ap_const_lv11_1CE,
        din12 => ap_const_lv11_61C,
        din13 => ap_const_lv11_38,
        din14 => ap_const_lv11_26A,
        din15 => ap_const_lv11_70B,
        def => agg_result_fu_587_p33,
        sel => agg_result_fu_587_p34,
        dout => agg_result_fu_587_p35);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_142_reg_758 <= and_ln105_142_fu_295_p2;
                and_ln105_142_reg_758_pp0_iter2_reg <= and_ln105_142_reg_758;
                and_ln105_143_reg_771 <= and_ln105_143_fu_311_p2;
                and_ln105_144_reg_777 <= and_ln105_144_fu_321_p2;
                and_ln105_145_reg_788 <= and_ln105_145_fu_348_p2;
                and_ln105_reg_746 <= and_ln105_fu_281_p2;
                and_ln107_15_reg_765 <= and_ln107_15_fu_305_p2;
                and_ln107_15_reg_765_pp0_iter2_reg <= and_ln107_15_reg_765;
                and_ln107_15_reg_765_pp0_iter3_reg <= and_ln107_15_reg_765_pp0_iter2_reg;
                and_ln107_reg_753 <= and_ln107_fu_290_p2;
                icmp_ln4_130_reg_670 <= icmp_ln4_130_fu_192_p2;
                icmp_ln4_131_reg_676 <= icmp_ln4_131_fu_198_p2;
                icmp_ln4_132_reg_682 <= icmp_ln4_132_fu_204_p2;
                icmp_ln4_133_reg_688 <= icmp_ln4_133_fu_210_p2;
                icmp_ln4_133_reg_688_pp0_iter1_reg <= icmp_ln4_133_reg_688;
                icmp_ln4_134_reg_694 <= icmp_ln4_134_fu_216_p2;
                icmp_ln4_134_reg_694_pp0_iter1_reg <= icmp_ln4_134_reg_694;
                icmp_ln4_134_reg_694_pp0_iter2_reg <= icmp_ln4_134_reg_694_pp0_iter1_reg;
                icmp_ln4_135_reg_700 <= icmp_ln4_135_fu_222_p2;
                icmp_ln4_135_reg_700_pp0_iter1_reg <= icmp_ln4_135_reg_700;
                icmp_ln4_135_reg_700_pp0_iter2_reg <= icmp_ln4_135_reg_700_pp0_iter1_reg;
                icmp_ln4_135_reg_700_pp0_iter3_reg <= icmp_ln4_135_reg_700_pp0_iter2_reg;
                icmp_ln4_136_reg_706 <= icmp_ln4_136_fu_228_p2;
                icmp_ln4_136_reg_706_pp0_iter1_reg <= icmp_ln4_136_reg_706;
                icmp_ln4_137_reg_711 <= icmp_ln4_137_fu_234_p2;
                icmp_ln4_138_reg_716 <= icmp_ln4_138_fu_240_p2;
                icmp_ln4_138_reg_716_pp0_iter1_reg <= icmp_ln4_138_reg_716;
                icmp_ln4_139_reg_721 <= icmp_ln4_139_fu_246_p2;
                icmp_ln4_139_reg_721_pp0_iter1_reg <= icmp_ln4_139_reg_721;
                icmp_ln4_140_reg_726 <= icmp_ln4_140_fu_252_p2;
                icmp_ln4_140_reg_726_pp0_iter1_reg <= icmp_ln4_140_reg_726;
                icmp_ln4_140_reg_726_pp0_iter2_reg <= icmp_ln4_140_reg_726_pp0_iter1_reg;
                icmp_ln4_141_reg_731 <= icmp_ln4_141_fu_258_p2;
                icmp_ln4_141_reg_731_pp0_iter1_reg <= icmp_ln4_141_reg_731;
                icmp_ln4_141_reg_731_pp0_iter2_reg <= icmp_ln4_141_reg_731_pp0_iter1_reg;
                icmp_ln4_142_reg_736 <= icmp_ln4_142_fu_264_p2;
                icmp_ln4_142_reg_736_pp0_iter1_reg <= icmp_ln4_142_reg_736;
                icmp_ln4_142_reg_736_pp0_iter2_reg <= icmp_ln4_142_reg_736_pp0_iter1_reg;
                icmp_ln4_143_reg_741 <= icmp_ln4_143_fu_270_p2;
                icmp_ln4_143_reg_741_pp0_iter1_reg <= icmp_ln4_143_reg_741;
                icmp_ln4_143_reg_741_pp0_iter2_reg <= icmp_ln4_143_reg_741_pp0_iter1_reg;
                icmp_ln4_143_reg_741_pp0_iter3_reg <= icmp_ln4_143_reg_741_pp0_iter2_reg;
                icmp_ln4_reg_659 <= icmp_ln4_fu_186_p2;
                icmp_ln4_reg_659_pp0_iter1_reg <= icmp_ln4_reg_659;
                icmp_ln4_reg_659_pp0_iter2_reg <= icmp_ln4_reg_659_pp0_iter1_reg;
                or_ln120_110_reg_793 <= or_ln120_110_fu_385_p2;
                or_ln120_114_reg_804 <= or_ln120_114_fu_508_p2;
                or_ln120_reg_783 <= or_ln120_fu_337_p2;
                select_ln120_128_reg_799 <= select_ln120_128_fu_453_p3;
                select_ln120_134_reg_809 <= select_ln120_134_fu_552_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= agg_result_fu_587_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
                p_read7_int_reg <= p_read7;
                p_read8_int_reg <= p_read8;
            end if;
        end if;
    end process;
    agg_result_fu_587_p33 <= "XXXXXXXXXXX";
    agg_result_fu_587_p34 <= 
        select_ln120_134_reg_809 when (or_ln120_115_fu_575_p2(0) = '1') else 
        ap_const_lv4_F;
    and_ln105_142_fu_295_p2 <= (xor_ln107_fu_276_p2 and icmp_ln4_131_reg_676);
    and_ln105_143_fu_311_p2 <= (icmp_ln4_132_reg_682 and and_ln105_fu_281_p2);
    and_ln105_144_fu_321_p2 <= (icmp_ln4_133_reg_688 and and_ln107_fu_290_p2);
    and_ln105_145_fu_348_p2 <= (icmp_ln4_134_reg_694_pp0_iter1_reg and and_ln105_142_reg_758);
    and_ln105_146_fu_465_p2 <= (icmp_ln4_135_reg_700_pp0_iter2_reg and and_ln107_15_reg_765_pp0_iter2_reg);
    and_ln105_147_fu_352_p2 <= (icmp_ln4_136_reg_706_pp0_iter1_reg and and_ln105_143_reg_771);
    and_ln105_148_fu_331_p2 <= (and_ln105_fu_281_p2 and and_ln105_155_fu_326_p2);
    and_ln105_149_fu_356_p2 <= (icmp_ln4_138_reg_716_pp0_iter1_reg and and_ln105_144_reg_777);
    and_ln105_150_fu_365_p2 <= (and_ln107_reg_753 and and_ln105_156_fu_360_p2);
    and_ln105_151_fu_469_p2 <= (icmp_ln4_140_reg_726_pp0_iter2_reg and and_ln105_145_reg_788);
    and_ln105_152_fu_478_p2 <= (and_ln105_157_fu_473_p2 and and_ln105_142_reg_758_pp0_iter2_reg);
    and_ln105_153_fu_483_p2 <= (icmp_ln4_142_reg_736_pp0_iter2_reg and and_ln105_146_fu_465_p2);
    and_ln105_154_fu_570_p2 <= (and_ln107_15_reg_765_pp0_iter3_reg and and_ln105_158_fu_565_p2);
    and_ln105_155_fu_326_p2 <= (xor_ln107_61_fu_316_p2 and icmp_ln4_137_reg_711);
    and_ln105_156_fu_360_p2 <= (xor_ln107_62_fu_343_p2 and icmp_ln4_139_reg_721_pp0_iter1_reg);
    and_ln105_157_fu_473_p2 <= (xor_ln107_63_fu_460_p2 and icmp_ln4_141_reg_731_pp0_iter2_reg);
    and_ln105_158_fu_565_p2 <= (xor_ln107_64_fu_560_p2 and icmp_ln4_143_reg_741_pp0_iter3_reg);
    and_ln105_fu_281_p2 <= (icmp_ln4_reg_659 and icmp_ln4_130_reg_670);
    and_ln107_15_fu_305_p2 <= (xor_ln107_fu_276_p2 and xor_ln107_60_fu_300_p2);
    and_ln107_fu_290_p2 <= (xor_ln107_59_fu_285_p2 and icmp_ln4_reg_659);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(agg_result_fu_587_p35, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= agg_result_fu_587_p35;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_130_fu_192_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_11903)) else "0";
    icmp_ln4_131_fu_198_p2 <= "1" when (signed(p_read4_int_reg) < signed(ap_const_lv18_15A2A)) else "0";
    icmp_ln4_132_fu_204_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_8C80)) else "0";
    icmp_ln4_133_fu_210_p2 <= "1" when (signed(p_read5_int_reg) < signed(ap_const_lv18_CDD)) else "0";
    icmp_ln4_134_fu_216_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_3480)) else "0";
    icmp_ln4_135_fu_222_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_15B67)) else "0";
    icmp_ln4_136_fu_228_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_4E80)) else "0";
    icmp_ln4_137_fu_234_p2 <= "1" when (signed(p_read8_int_reg) < signed(ap_const_lv18_3FC3C)) else "0";
    icmp_ln4_138_fu_240_p2 <= "1" when (signed(p_read7_int_reg) < signed(ap_const_lv18_18)) else "0";
    icmp_ln4_139_fu_246_p2 <= "1" when (signed(p_read8_int_reg) < signed(ap_const_lv18_3FAE8)) else "0";
    icmp_ln4_140_fu_252_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_1B80)) else "0";
    icmp_ln4_141_fu_258_p2 <= "1" when (signed(p_read4_int_reg) < signed(ap_const_lv18_11F76)) else "0";
    icmp_ln4_142_fu_264_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_2980)) else "0";
    icmp_ln4_143_fu_270_p2 <= "1" when (signed(p_read4_int_reg) < signed(ap_const_lv18_1ACEF)) else "0";
    icmp_ln4_fu_186_p2 <= "1" when (signed(p_read8_int_reg) < signed(ap_const_lv18_3FD94)) else "0";
    or_ln120_106_fu_370_p2 <= (and_ln105_reg_746 or and_ln105_149_fu_356_p2);
    or_ln120_107_fu_375_p2 <= (and_ln105_reg_746 or and_ln105_144_reg_777);
    or_ln120_108_fu_379_p2 <= (or_ln120_107_fu_375_p2 or and_ln105_150_fu_365_p2);
    or_ln120_109_fu_488_p2 <= (icmp_ln4_reg_659_pp0_iter2_reg or and_ln105_151_fu_469_p2);
    or_ln120_110_fu_385_p2 <= (icmp_ln4_reg_659_pp0_iter1_reg or and_ln105_145_fu_348_p2);
    or_ln120_111_fu_493_p2 <= (or_ln120_110_reg_793 or and_ln105_152_fu_478_p2);
    or_ln120_112_fu_498_p2 <= (icmp_ln4_reg_659_pp0_iter2_reg or and_ln105_142_reg_758_pp0_iter2_reg);
    or_ln120_113_fu_502_p2 <= (or_ln120_112_fu_498_p2 or and_ln105_153_fu_483_p2);
    or_ln120_114_fu_508_p2 <= (or_ln120_112_fu_498_p2 or and_ln105_146_fu_465_p2);
    or_ln120_115_fu_575_p2 <= (or_ln120_114_reg_804 or and_ln105_154_fu_570_p2);
    or_ln120_fu_337_p2 <= (and_ln105_148_fu_331_p2 or and_ln105_143_fu_311_p2);
    select_ln120_123_fu_407_p3 <= 
        select_ln120_fu_400_p3 when (or_ln120_reg_783(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_124_fu_418_p3 <= 
        zext_ln120_21_fu_414_p1 when (and_ln105_reg_746(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_125_fu_425_p3 <= 
        select_ln120_124_fu_418_p3 when (or_ln120_106_fu_370_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_126_fu_433_p3 <= 
        select_ln120_125_fu_425_p3 when (or_ln120_107_fu_375_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_127_fu_441_p3 <= 
        select_ln120_126_fu_433_p3 when (or_ln120_108_fu_379_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_128_fu_453_p3 <= 
        zext_ln120_22_fu_449_p1 when (icmp_ln4_reg_659_pp0_iter1_reg(0) = '1') else 
        ap_const_lv4_8;
    select_ln120_129_fu_514_p3 <= 
        select_ln120_128_reg_799 when (or_ln120_109_fu_488_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln120_130_fu_521_p3 <= 
        select_ln120_129_fu_514_p3 when (or_ln120_110_reg_793(0) = '1') else 
        ap_const_lv4_A;
    select_ln120_131_fu_528_p3 <= 
        select_ln120_130_fu_521_p3 when (or_ln120_111_fu_493_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln120_132_fu_536_p3 <= 
        select_ln120_131_fu_528_p3 when (or_ln120_112_fu_498_p2(0) = '1') else 
        ap_const_lv4_C;
    select_ln120_133_fu_544_p3 <= 
        select_ln120_132_fu_536_p3 when (or_ln120_113_fu_502_p2(0) = '1') else 
        ap_const_lv4_D;
    select_ln120_134_fu_552_p3 <= 
        select_ln120_133_fu_544_p3 when (or_ln120_114_fu_508_p2(0) = '1') else 
        ap_const_lv4_E;
    select_ln120_fu_400_p3 <= 
        zext_ln120_fu_396_p1 when (and_ln105_143_reg_771(0) = '1') else 
        ap_const_lv2_2;
    xor_ln107_59_fu_285_p2 <= (icmp_ln4_130_reg_670 xor ap_const_lv1_1);
    xor_ln107_60_fu_300_p2 <= (icmp_ln4_131_reg_676 xor ap_const_lv1_1);
    xor_ln107_61_fu_316_p2 <= (icmp_ln4_132_reg_682 xor ap_const_lv1_1);
    xor_ln107_62_fu_343_p2 <= (icmp_ln4_133_reg_688_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_63_fu_460_p2 <= (icmp_ln4_134_reg_694_pp0_iter2_reg xor ap_const_lv1_1);
    xor_ln107_64_fu_560_p2 <= (icmp_ln4_135_reg_700_pp0_iter3_reg xor ap_const_lv1_1);
    xor_ln107_fu_276_p2 <= (icmp_ln4_reg_659 xor ap_const_lv1_1);
    xor_ln120_fu_390_p2 <= (ap_const_lv1_1 xor and_ln105_147_fu_352_p2);
    zext_ln120_21_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_123_fu_407_p3),3));
    zext_ln120_22_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_127_fu_441_p3),4));
    zext_ln120_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln120_fu_390_p2),2));
end behav;
