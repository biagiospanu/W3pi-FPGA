-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_4962 : STD_LOGIC_VECTOR (17 downto 0) := "000100100101100010";
    constant ap_const_lv18_980 : STD_LOGIC_VECTOR (17 downto 0) := "000000100110000000";
    constant ap_const_lv18_288 : STD_LOGIC_VECTOR (17 downto 0) := "000000001010001000";
    constant ap_const_lv18_4D1F : STD_LOGIC_VECTOR (17 downto 0) := "000100110100011111";
    constant ap_const_lv18_2FB7 : STD_LOGIC_VECTOR (17 downto 0) := "000010111110110111";
    constant ap_const_lv18_3FE36 : STD_LOGIC_VECTOR (17 downto 0) := "111111111000110110";
    constant ap_const_lv18_12CA3 : STD_LOGIC_VECTOR (17 downto 0) := "010010110010100011";
    constant ap_const_lv18_110 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100010000";
    constant ap_const_lv18_A80 : STD_LOGIC_VECTOR (17 downto 0) := "000000101010000000";
    constant ap_const_lv18_13A35 : STD_LOGIC_VECTOR (17 downto 0) := "010011101000110101";
    constant ap_const_lv18_3FD66 : STD_LOGIC_VECTOR (17 downto 0) := "111111110101100110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv18_33C : STD_LOGIC_VECTOR (17 downto 0) := "000000001100111100";
    constant ap_const_lv18_14F2E : STD_LOGIC_VECTOR (17 downto 0) := "010100111100101110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv11_2D3 : STD_LOGIC_VECTOR (10 downto 0) := "01011010011";
    constant ap_const_lv11_7F6 : STD_LOGIC_VECTOR (10 downto 0) := "11111110110";
    constant ap_const_lv11_68E : STD_LOGIC_VECTOR (10 downto 0) := "11010001110";
    constant ap_const_lv11_714 : STD_LOGIC_VECTOR (10 downto 0) := "11100010100";
    constant ap_const_lv11_5CE : STD_LOGIC_VECTOR (10 downto 0) := "10111001110";
    constant ap_const_lv11_655 : STD_LOGIC_VECTOR (10 downto 0) := "11001010101";
    constant ap_const_lv11_12A : STD_LOGIC_VECTOR (10 downto 0) := "00100101010";
    constant ap_const_lv11_608 : STD_LOGIC_VECTOR (10 downto 0) := "11000001000";
    constant ap_const_lv11_71B : STD_LOGIC_VECTOR (10 downto 0) := "11100011011";
    constant ap_const_lv11_A0 : STD_LOGIC_VECTOR (10 downto 0) := "00010100000";
    constant ap_const_lv11_554 : STD_LOGIC_VECTOR (10 downto 0) := "10101010100";
    constant ap_const_lv11_62A : STD_LOGIC_VECTOR (10 downto 0) := "11000101010";
    constant ap_const_lv11_56E : STD_LOGIC_VECTOR (10 downto 0) := "10101101110";
    constant ap_const_lv11_7D0 : STD_LOGIC_VECTOR (10 downto 0) := "11111010000";
    constant ap_const_lv11_5BB : STD_LOGIC_VECTOR (10 downto 0) := "10110111011";

attribute shreg_extract : string;
    signal icmp_ln4_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_reg_638_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_26_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_26_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_27_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_27_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_28_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_28_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_28_reg_660_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_29_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_29_reg_666 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_29_reg_666_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_30_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_30_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_30_reg_672_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_30_reg_672_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_31_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_31_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_32_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_32_reg_683 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_33_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_33_reg_688 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_33_reg_688_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_34_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_34_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_34_reg_693_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_67_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_67_reg_698 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_67_reg_698_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_36_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_36_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_36_reg_703_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_36_reg_703_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_37_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_37_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_37_reg_708_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_37_reg_708_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_723_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_22_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_22_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_3_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_3_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_3_reg_735_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_25_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_25_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_24_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_24_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_26_fu_393_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_26_reg_752 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln105_26_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_26_reg_757 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_29_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_29_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_31_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_31_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_32_fu_511_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_32_reg_773 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_236_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln4_25_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_12_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_13_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_14_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_34_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_24_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_4_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_27_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_28_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln120_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_33_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_362_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_fu_366_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_24_fu_374_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln120_23_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_5_fu_381_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_25_fu_385_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln107_15_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_35_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_16_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_36_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_29_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_30_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_27_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_31_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_25_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_27_fu_469_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_28_fu_476_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_26_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_6_fu_483_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_29_fu_487_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_28_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_30_fu_495_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_31_fu_503_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln107_17_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_37_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_32_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_33_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_30_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_33_fu_548_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_32_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_34_fu_555_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p31 : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_570_p32 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p33 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read1_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_570_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_570_p29 : STD_LOGIC_VECTOR (3 downto 0);

    component conifer_xgboost_moons_accelerator_sparsemux_31_4_11_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        din9 : IN STD_LOGIC_VECTOR (10 downto 0);
        din10 : IN STD_LOGIC_VECTOR (10 downto 0);
        din11 : IN STD_LOGIC_VECTOR (10 downto 0);
        din12 : IN STD_LOGIC_VECTOR (10 downto 0);
        din13 : IN STD_LOGIC_VECTOR (10 downto 0);
        din14 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_31_4_11_1_0_U92 : component conifer_xgboost_moons_accelerator_sparsemux_31_4_11_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        CASE9 => "1001",
        din9_WIDTH => 11,
        CASE10 => "1010",
        din10_WIDTH => 11,
        CASE11 => "1011",
        din11_WIDTH => 11,
        CASE12 => "1100",
        din12_WIDTH => 11,
        CASE13 => "1101",
        din13_WIDTH => 11,
        CASE14 => "1110",
        din14_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_2D3,
        din1 => ap_const_lv11_7F6,
        din2 => ap_const_lv11_68E,
        din3 => ap_const_lv11_714,
        din4 => ap_const_lv11_5CE,
        din5 => ap_const_lv11_655,
        din6 => ap_const_lv11_12A,
        din7 => ap_const_lv11_608,
        din8 => ap_const_lv11_71B,
        din9 => ap_const_lv11_A0,
        din10 => ap_const_lv11_554,
        din11 => ap_const_lv11_62A,
        din12 => ap_const_lv11_56E,
        din13 => ap_const_lv11_7D0,
        din14 => ap_const_lv11_5BB,
        def => agg_result_fu_570_p31,
        sel => agg_result_fu_570_p32,
        dout => agg_result_fu_570_p33);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_22_reg_729 <= and_ln105_22_fu_287_p2;
                and_ln105_25_reg_741 <= and_ln105_25_fu_317_p2;
                and_ln105_26_reg_757 <= and_ln105_26_fu_411_p2;
                and_ln105_reg_713 <= and_ln105_fu_264_p2;
                and_ln107_3_reg_735 <= and_ln107_3_fu_297_p2;
                and_ln107_3_reg_735_pp0_iter2_reg <= and_ln107_3_reg_735;
                and_ln107_reg_723 <= and_ln107_fu_276_p2;
                and_ln107_reg_723_pp0_iter1_reg <= and_ln107_reg_723;
                icmp_ln4_26_reg_647 <= icmp_ln4_26_fu_182_p2;
                icmp_ln4_27_reg_653 <= icmp_ln4_27_fu_188_p2;
                icmp_ln4_28_reg_660 <= icmp_ln4_28_fu_194_p2;
                icmp_ln4_28_reg_660_pp0_iter1_reg <= icmp_ln4_28_reg_660;
                icmp_ln4_29_reg_666 <= icmp_ln4_29_fu_200_p2;
                icmp_ln4_29_reg_666_pp0_iter1_reg <= icmp_ln4_29_reg_666;
                icmp_ln4_30_reg_672 <= icmp_ln4_30_fu_206_p2;
                icmp_ln4_30_reg_672_pp0_iter1_reg <= icmp_ln4_30_reg_672;
                icmp_ln4_30_reg_672_pp0_iter2_reg <= icmp_ln4_30_reg_672_pp0_iter1_reg;
                icmp_ln4_31_reg_678 <= icmp_ln4_31_fu_212_p2;
                icmp_ln4_32_reg_683 <= icmp_ln4_32_fu_218_p2;
                icmp_ln4_33_reg_688 <= icmp_ln4_33_fu_224_p2;
                icmp_ln4_33_reg_688_pp0_iter1_reg <= icmp_ln4_33_reg_688;
                icmp_ln4_34_reg_693 <= icmp_ln4_34_fu_230_p2;
                icmp_ln4_34_reg_693_pp0_iter1_reg <= icmp_ln4_34_reg_693;
                icmp_ln4_36_reg_703 <= icmp_ln4_36_fu_252_p2;
                icmp_ln4_36_reg_703_pp0_iter1_reg <= icmp_ln4_36_reg_703;
                icmp_ln4_36_reg_703_pp0_iter2_reg <= icmp_ln4_36_reg_703_pp0_iter1_reg;
                icmp_ln4_37_reg_708 <= icmp_ln4_37_fu_258_p2;
                icmp_ln4_37_reg_708_pp0_iter1_reg <= icmp_ln4_37_reg_708;
                icmp_ln4_37_reg_708_pp0_iter2_reg <= icmp_ln4_37_reg_708_pp0_iter1_reg;
                icmp_ln4_67_reg_698 <= icmp_ln4_67_fu_246_p2;
                icmp_ln4_67_reg_698_pp0_iter1_reg <= icmp_ln4_67_reg_698;
                icmp_ln4_reg_638 <= icmp_ln4_fu_170_p2;
                icmp_ln4_reg_638_pp0_iter1_reg <= icmp_ln4_reg_638;
                or_ln120_24_reg_747 <= or_ln120_24_fu_347_p2;
                or_ln120_29_reg_762 <= or_ln120_29_fu_459_p2;
                or_ln120_31_reg_767 <= or_ln120_31_fu_463_p2;
                select_ln120_26_reg_752 <= select_ln120_26_fu_393_p3;
                select_ln120_32_reg_773 <= select_ln120_32_fu_511_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= agg_result_fu_570_p33;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
            end if;
        end if;
    end process;
    agg_result_fu_570_p31 <= "XXXXXXXXXXX";
    agg_result_fu_570_p32 <= 
        select_ln120_34_fu_555_p3 when (or_ln120_32_fu_543_p2(0) = '1') else 
        ap_const_lv4_E;
    and_ln105_22_fu_287_p2 <= (xor_ln107_fu_282_p2 and icmp_ln4_26_reg_647);
    and_ln105_24_fu_313_p2 <= (icmp_ln4_28_reg_660 and and_ln107_reg_723);
    and_ln105_25_fu_317_p2 <= (icmp_ln4_29_reg_666 and and_ln105_22_fu_287_p2);
    and_ln105_26_fu_411_p2 <= (icmp_ln4_30_reg_672_pp0_iter1_reg and and_ln107_3_reg_735);
    and_ln105_27_fu_326_p2 <= (icmp_ln4_27_reg_653 and and_ln105_34_fu_322_p2);
    and_ln105_28_fu_331_p2 <= (icmp_ln4_32_reg_683 and and_ln105_24_fu_313_p2);
    and_ln105_29_fu_420_p2 <= (and_ln107_reg_723_pp0_iter1_reg and and_ln105_35_fu_415_p2);
    and_ln105_30_fu_425_p2 <= (icmp_ln4_34_reg_693_pp0_iter1_reg and and_ln105_25_reg_741);
    and_ln105_31_fu_434_p2 <= (and_ln105_36_fu_429_p2 and and_ln105_22_reg_729);
    and_ln105_32_fu_524_p2 <= (icmp_ln4_36_reg_703_pp0_iter2_reg and and_ln105_26_reg_757);
    and_ln105_33_fu_533_p2 <= (and_ln107_3_reg_735_pp0_iter2_reg and and_ln105_37_fu_528_p2);
    and_ln105_34_fu_322_p2 <= (icmp_ln4_31_reg_678 and and_ln105_reg_713);
    and_ln105_35_fu_415_p2 <= (xor_ln107_15_fu_401_p2 and icmp_ln4_33_reg_688_pp0_iter1_reg);
    and_ln105_36_fu_429_p2 <= (xor_ln107_16_fu_406_p2 and icmp_ln4_67_reg_698_pp0_iter1_reg);
    and_ln105_37_fu_528_p2 <= (xor_ln107_17_fu_519_p2 and icmp_ln4_37_reg_708_pp0_iter2_reg);
    and_ln105_fu_264_p2 <= (icmp_ln4_fu_170_p2 and icmp_ln4_25_fu_176_p2);
    and_ln107_3_fu_297_p2 <= (xor_ln107_fu_282_p2 and xor_ln107_13_fu_292_p2);
    and_ln107_4_fu_308_p2 <= (xor_ln107_14_fu_303_p2 and and_ln105_reg_713);
    and_ln107_fu_276_p2 <= (xor_ln107_12_fu_270_p2 and icmp_ln4_fu_170_p2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(agg_result_fu_570_p33, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= agg_result_fu_570_p33;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_25_fu_176_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_980)) else "0";
    icmp_ln4_26_fu_182_p2 <= "1" when (signed(p_read5_int_reg) < signed(ap_const_lv18_288)) else "0";
    icmp_ln4_27_fu_188_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_4D1F)) else "0";
    icmp_ln4_28_fu_194_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_2FB7)) else "0";
    icmp_ln4_29_fu_200_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_3FE36)) else "0";
    icmp_ln4_30_fu_206_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_12CA3)) else "0";
    icmp_ln4_31_fu_212_p2 <= "1" when (signed(p_read5_int_reg) < signed(ap_const_lv18_110)) else "0";
    icmp_ln4_32_fu_218_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_A80)) else "0";
    icmp_ln4_33_fu_224_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_13A35)) else "0";
    icmp_ln4_34_fu_230_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_3FD66)) else "0";
    icmp_ln4_36_fu_252_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_33C)) else "0";
    icmp_ln4_37_fu_258_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_14F2E)) else "0";
    icmp_ln4_67_fu_246_p2 <= "1" when (signed(tmp_fu_236_p4) < signed(ap_const_lv7_1)) else "0";
    icmp_ln4_fu_170_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_4962)) else "0";
    or_ln120_23_fu_342_p2 <= (and_ln105_reg_713 or and_ln105_28_fu_331_p2);
    or_ln120_24_fu_347_p2 <= (and_ln105_reg_713 or and_ln105_24_fu_313_p2);
    or_ln120_25_fu_439_p2 <= (or_ln120_24_reg_747 or and_ln105_29_fu_420_p2);
    or_ln120_26_fu_444_p2 <= (icmp_ln4_reg_638_pp0_iter1_reg or and_ln105_30_fu_425_p2);
    or_ln120_27_fu_449_p2 <= (icmp_ln4_reg_638_pp0_iter1_reg or and_ln105_25_reg_741);
    or_ln120_28_fu_453_p2 <= (or_ln120_27_fu_449_p2 or and_ln105_31_fu_434_p2);
    or_ln120_29_fu_459_p2 <= (icmp_ln4_reg_638_pp0_iter1_reg or and_ln105_22_reg_729);
    or_ln120_30_fu_538_p2 <= (or_ln120_29_reg_762 or and_ln105_32_fu_524_p2);
    or_ln120_31_fu_463_p2 <= (or_ln120_29_fu_459_p2 or and_ln105_26_fu_411_p2);
    or_ln120_32_fu_543_p2 <= (or_ln120_31_reg_767 or and_ln105_33_fu_533_p2);
    or_ln120_33_fu_357_p2 <= (xor_ln120_fu_352_p2 or icmp_ln4_27_reg_653);
    or_ln120_fu_336_p2 <= (and_ln107_4_fu_308_p2 or and_ln105_27_fu_326_p2);
    select_ln120_24_fu_374_p3 <= 
        select_ln120_fu_366_p3 when (and_ln105_reg_713(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_25_fu_385_p3 <= 
        zext_ln120_5_fu_381_p1 when (or_ln120_23_fu_342_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_26_fu_393_p3 <= 
        select_ln120_25_fu_385_p3 when (or_ln120_24_fu_347_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_27_fu_469_p3 <= 
        select_ln120_26_reg_752 when (or_ln120_25_fu_439_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_28_fu_476_p3 <= 
        select_ln120_27_fu_469_p3 when (icmp_ln4_reg_638_pp0_iter1_reg(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_29_fu_487_p3 <= 
        zext_ln120_6_fu_483_p1 when (or_ln120_26_fu_444_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln120_30_fu_495_p3 <= 
        select_ln120_29_fu_487_p3 when (or_ln120_27_fu_449_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln120_31_fu_503_p3 <= 
        select_ln120_30_fu_495_p3 when (or_ln120_28_fu_453_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln120_32_fu_511_p3 <= 
        select_ln120_31_fu_503_p3 when (or_ln120_29_fu_459_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln120_33_fu_548_p3 <= 
        select_ln120_32_reg_773 when (or_ln120_30_fu_538_p2(0) = '1') else 
        ap_const_lv4_C;
    select_ln120_34_fu_555_p3 <= 
        select_ln120_33_fu_548_p3 when (or_ln120_31_reg_767(0) = '1') else 
        ap_const_lv4_D;
    select_ln120_fu_366_p3 <= 
        zext_ln120_fu_362_p1 when (or_ln120_fu_336_p2(0) = '1') else 
        ap_const_lv2_2;
    tmp_fu_236_p4 <= p_read4_int_reg(17 downto 11);
    xor_ln107_12_fu_270_p2 <= (icmp_ln4_25_fu_176_p2 xor ap_const_lv1_1);
    xor_ln107_13_fu_292_p2 <= (icmp_ln4_26_reg_647 xor ap_const_lv1_1);
    xor_ln107_14_fu_303_p2 <= (icmp_ln4_27_reg_653 xor ap_const_lv1_1);
    xor_ln107_15_fu_401_p2 <= (icmp_ln4_28_reg_660_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_16_fu_406_p2 <= (icmp_ln4_29_reg_666_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_17_fu_519_p2 <= (icmp_ln4_30_reg_672_pp0_iter2_reg xor ap_const_lv1_1);
    xor_ln107_fu_282_p2 <= (icmp_ln4_reg_638 xor ap_const_lv1_1);
    xor_ln120_fu_352_p2 <= (ap_const_lv1_1 xor and_ln105_reg_713);
    zext_ln120_5_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_24_fu_374_p3),3));
    zext_ln120_6_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_28_fu_476_p3),4));
    zext_ln120_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln120_33_fu_357_p2),2));
end behav;
