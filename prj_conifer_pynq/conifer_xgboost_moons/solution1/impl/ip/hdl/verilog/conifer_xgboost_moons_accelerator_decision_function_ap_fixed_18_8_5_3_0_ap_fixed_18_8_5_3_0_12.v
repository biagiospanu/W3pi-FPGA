// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_12 (
        ap_clk,
        ap_rst,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] p_read1;
input  [17:0] p_read2;
input  [17:0] p_read3;
input  [17:0] p_read4;
input  [17:0] p_read5;
input  [17:0] p_read6;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_164_p2;
reg   [0:0] icmp_ln4_reg_629;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln4_reg_629_pp0_iter1_reg;
reg   [0:0] icmp_ln4_reg_629_pp0_iter2_reg;
wire   [0:0] icmp_ln4_144_fu_170_p2;
reg   [0:0] icmp_ln4_144_reg_639;
wire   [0:0] icmp_ln4_145_fu_176_p2;
reg   [0:0] icmp_ln4_145_reg_645;
wire   [0:0] icmp_ln4_146_fu_182_p2;
reg   [0:0] icmp_ln4_146_reg_651;
reg   [0:0] icmp_ln4_146_reg_651_pp0_iter1_reg;
wire   [0:0] icmp_ln4_147_fu_188_p2;
reg   [0:0] icmp_ln4_147_reg_657;
reg   [0:0] icmp_ln4_147_reg_657_pp0_iter1_reg;
reg   [0:0] icmp_ln4_147_reg_657_pp0_iter2_reg;
wire   [0:0] icmp_ln4_148_fu_194_p2;
reg   [0:0] icmp_ln4_148_reg_663;
reg   [0:0] icmp_ln4_148_reg_663_pp0_iter1_reg;
reg   [0:0] icmp_ln4_148_reg_663_pp0_iter2_reg;
wire   [0:0] icmp_ln4_149_fu_200_p2;
reg   [0:0] icmp_ln4_149_reg_670;
reg   [0:0] icmp_ln4_149_reg_670_pp0_iter1_reg;
reg   [0:0] icmp_ln4_149_reg_670_pp0_iter2_reg;
reg   [0:0] icmp_ln4_149_reg_670_pp0_iter3_reg;
wire   [0:0] icmp_ln4_150_fu_206_p2;
reg   [0:0] icmp_ln4_150_reg_676;
reg   [0:0] icmp_ln4_150_reg_676_pp0_iter1_reg;
wire   [0:0] icmp_ln4_151_fu_212_p2;
reg   [0:0] icmp_ln4_151_reg_681;
reg   [0:0] icmp_ln4_151_reg_681_pp0_iter1_reg;
wire   [0:0] icmp_ln4_152_fu_218_p2;
reg   [0:0] icmp_ln4_152_reg_686;
reg   [0:0] icmp_ln4_152_reg_686_pp0_iter1_reg;
wire   [0:0] icmp_ln4_153_fu_224_p2;
reg   [0:0] icmp_ln4_153_reg_691;
reg   [0:0] icmp_ln4_153_reg_691_pp0_iter1_reg;
reg   [0:0] icmp_ln4_153_reg_691_pp0_iter2_reg;
wire   [0:0] icmp_ln4_154_fu_230_p2;
reg   [0:0] icmp_ln4_154_reg_696;
reg   [0:0] icmp_ln4_154_reg_696_pp0_iter1_reg;
reg   [0:0] icmp_ln4_154_reg_696_pp0_iter2_reg;
wire   [0:0] icmp_ln4_155_fu_236_p2;
reg   [0:0] icmp_ln4_155_reg_701;
reg   [0:0] icmp_ln4_155_reg_701_pp0_iter1_reg;
reg   [0:0] icmp_ln4_155_reg_701_pp0_iter2_reg;
wire   [0:0] icmp_ln4_156_fu_242_p2;
reg   [0:0] icmp_ln4_156_reg_706;
reg   [0:0] icmp_ln4_156_reg_706_pp0_iter1_reg;
reg   [0:0] icmp_ln4_156_reg_706_pp0_iter2_reg;
reg   [0:0] icmp_ln4_156_reg_706_pp0_iter3_reg;
wire   [0:0] xor_ln107_fu_248_p2;
reg   [0:0] xor_ln107_reg_711;
wire   [0:0] and_ln105_fu_253_p2;
reg   [0:0] and_ln105_reg_716;
wire   [0:0] and_ln107_fu_262_p2;
reg   [0:0] and_ln107_reg_722;
reg   [0:0] and_ln107_reg_722_pp0_iter2_reg;
wire   [0:0] and_ln105_130_fu_267_p2;
reg   [0:0] and_ln105_130_reg_728;
reg   [0:0] and_ln105_130_reg_728_pp0_iter2_reg;
wire   [0:0] xor_ln107_66_fu_272_p2;
reg   [0:0] xor_ln107_66_reg_734;
wire   [0:0] and_ln105_131_fu_277_p2;
reg   [0:0] and_ln105_131_reg_740;
wire   [0:0] and_ln107_17_fu_287_p2;
reg   [0:0] and_ln107_17_reg_746;
wire   [0:0] and_ln107_16_fu_293_p2;
reg   [0:0] and_ln107_16_reg_754;
reg   [0:0] and_ln107_16_reg_754_pp0_iter3_reg;
wire   [0:0] or_ln120_120_fu_350_p2;
reg   [0:0] or_ln120_120_reg_760;
wire   [0:0] or_ln120_122_fu_356_p2;
reg   [0:0] or_ln120_122_reg_765;
wire   [2:0] select_ln120_140_fu_417_p3;
reg   [2:0] select_ln120_140_reg_771;
wire   [0:0] or_ln120_126_fu_478_p2;
reg   [0:0] or_ln120_126_reg_776;
wire   [3:0] select_ln120_146_fu_526_p3;
reg   [3:0] select_ln120_146_reg_781;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_65_fu_257_p2;
wire   [0:0] xor_ln107_69_fu_282_p2;
wire   [0:0] xor_ln107_67_fu_297_p2;
wire   [0:0] and_ln105_135_fu_310_p2;
wire   [0:0] and_ln105_132_fu_302_p2;
wire   [0:0] and_ln105_134_fu_306_p2;
wire   [0:0] or_ln120_116_fu_330_p2;
wire   [0:0] and_ln105_136_fu_315_p2;
wire   [0:0] or_ln120_118_fu_340_p2;
wire   [0:0] and_ln105_137_fu_320_p2;
wire   [0:0] or_ln120_128_fu_360_p2;
wire   [0:0] or_ln120_129_fu_364_p2;
wire   [0:0] or_ln120_fu_325_p2;
wire   [1:0] zext_ln120_fu_369_p1;
wire   [1:0] select_ln120_fu_373_p3;
wire   [1:0] select_ln120_136_fu_381_p3;
wire   [0:0] or_ln120_117_fu_334_p2;
wire   [2:0] zext_ln120_23_fu_389_p1;
wire   [2:0] select_ln120_137_fu_393_p3;
wire   [0:0] or_ln120_119_fu_344_p2;
wire   [2:0] select_ln120_138_fu_401_p3;
wire   [2:0] select_ln120_139_fu_409_p3;
wire   [0:0] xor_ln107_68_fu_425_p2;
wire   [0:0] and_ln105_142_fu_434_p2;
wire   [0:0] and_ln105_143_fu_444_p2;
wire   [0:0] and_ln105_133_fu_430_p2;
wire   [0:0] and_ln105_138_fu_439_p2;
wire   [0:0] and_ln105_139_fu_448_p2;
wire   [0:0] or_ln120_124_fu_468_p2;
wire   [0:0] and_ln105_140_fu_453_p2;
wire   [0:0] or_ln120_121_fu_458_p2;
wire   [3:0] zext_ln120_24_fu_484_p1;
wire   [3:0] select_ln120_141_fu_487_p3;
wire   [0:0] or_ln120_123_fu_463_p2;
wire   [3:0] select_ln120_142_fu_495_p3;
wire   [3:0] select_ln120_143_fu_502_p3;
wire   [0:0] or_ln120_125_fu_472_p2;
wire   [3:0] select_ln120_144_fu_510_p3;
wire   [3:0] select_ln120_145_fu_518_p3;
wire   [0:0] xor_ln107_70_fu_534_p2;
wire   [0:0] and_ln105_144_fu_539_p2;
wire   [0:0] and_ln105_141_fu_544_p2;
wire   [0:0] or_ln120_127_fu_549_p2;
wire   [10:0] agg_result_fu_561_p31;
wire   [3:0] agg_result_fu_561_p32;
wire   [10:0] agg_result_fu_561_p33;
reg    ap_ce_reg;
reg   [17:0] p_read1_int_reg;
reg   [17:0] p_read2_int_reg;
reg   [17:0] p_read3_int_reg;
reg   [17:0] p_read4_int_reg;
reg   [17:0] p_read5_int_reg;
reg   [17:0] p_read6_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] agg_result_fu_561_p1;
wire   [3:0] agg_result_fu_561_p3;
wire   [3:0] agg_result_fu_561_p5;
wire   [3:0] agg_result_fu_561_p7;
wire   [3:0] agg_result_fu_561_p9;
wire   [3:0] agg_result_fu_561_p11;
wire   [3:0] agg_result_fu_561_p13;
wire   [3:0] agg_result_fu_561_p15;
wire  signed [3:0] agg_result_fu_561_p17;
wire  signed [3:0] agg_result_fu_561_p19;
wire  signed [3:0] agg_result_fu_561_p21;
wire  signed [3:0] agg_result_fu_561_p23;
wire  signed [3:0] agg_result_fu_561_p25;
wire  signed [3:0] agg_result_fu_561_p27;
wire  signed [3:0] agg_result_fu_561_p29;

conifer_xgboost_moons_accelerator_sparsemux_31_4_11_1_0_x0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_31_4_11_1_0_x0_U158(
    .din0(11'd1287),
    .din1(11'd1982),
    .din2(11'd1559),
    .din3(11'd14),
    .din4(11'd1818),
    .din5(11'd76),
    .din6(11'd1592),
    .din7(11'd1497),
    .din8(11'd2006),
    .din9(11'd1487),
    .din10(11'd166),
    .din11(11'd617),
    .din12(11'd1815),
    .din13(11'd2017),
    .din14(11'd1454),
    .def(agg_result_fu_561_p31),
    .sel(agg_result_fu_561_p32),
    .dout(agg_result_fu_561_p33)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_130_reg_728 <= and_ln105_130_fu_267_p2;
        and_ln105_130_reg_728_pp0_iter2_reg <= and_ln105_130_reg_728;
        and_ln105_131_reg_740 <= and_ln105_131_fu_277_p2;
        and_ln105_reg_716 <= and_ln105_fu_253_p2;
        and_ln107_16_reg_754 <= and_ln107_16_fu_293_p2;
        and_ln107_16_reg_754_pp0_iter3_reg <= and_ln107_16_reg_754;
        and_ln107_17_reg_746 <= and_ln107_17_fu_287_p2;
        and_ln107_reg_722 <= and_ln107_fu_262_p2;
        and_ln107_reg_722_pp0_iter2_reg <= and_ln107_reg_722;
        icmp_ln4_144_reg_639 <= icmp_ln4_144_fu_170_p2;
        icmp_ln4_145_reg_645 <= icmp_ln4_145_fu_176_p2;
        icmp_ln4_146_reg_651 <= icmp_ln4_146_fu_182_p2;
        icmp_ln4_146_reg_651_pp0_iter1_reg <= icmp_ln4_146_reg_651;
        icmp_ln4_147_reg_657 <= icmp_ln4_147_fu_188_p2;
        icmp_ln4_147_reg_657_pp0_iter1_reg <= icmp_ln4_147_reg_657;
        icmp_ln4_147_reg_657_pp0_iter2_reg <= icmp_ln4_147_reg_657_pp0_iter1_reg;
        icmp_ln4_148_reg_663 <= icmp_ln4_148_fu_194_p2;
        icmp_ln4_148_reg_663_pp0_iter1_reg <= icmp_ln4_148_reg_663;
        icmp_ln4_148_reg_663_pp0_iter2_reg <= icmp_ln4_148_reg_663_pp0_iter1_reg;
        icmp_ln4_149_reg_670 <= icmp_ln4_149_fu_200_p2;
        icmp_ln4_149_reg_670_pp0_iter1_reg <= icmp_ln4_149_reg_670;
        icmp_ln4_149_reg_670_pp0_iter2_reg <= icmp_ln4_149_reg_670_pp0_iter1_reg;
        icmp_ln4_149_reg_670_pp0_iter3_reg <= icmp_ln4_149_reg_670_pp0_iter2_reg;
        icmp_ln4_150_reg_676 <= icmp_ln4_150_fu_206_p2;
        icmp_ln4_150_reg_676_pp0_iter1_reg <= icmp_ln4_150_reg_676;
        icmp_ln4_151_reg_681 <= icmp_ln4_151_fu_212_p2;
        icmp_ln4_151_reg_681_pp0_iter1_reg <= icmp_ln4_151_reg_681;
        icmp_ln4_152_reg_686 <= icmp_ln4_152_fu_218_p2;
        icmp_ln4_152_reg_686_pp0_iter1_reg <= icmp_ln4_152_reg_686;
        icmp_ln4_153_reg_691 <= icmp_ln4_153_fu_224_p2;
        icmp_ln4_153_reg_691_pp0_iter1_reg <= icmp_ln4_153_reg_691;
        icmp_ln4_153_reg_691_pp0_iter2_reg <= icmp_ln4_153_reg_691_pp0_iter1_reg;
        icmp_ln4_154_reg_696 <= icmp_ln4_154_fu_230_p2;
        icmp_ln4_154_reg_696_pp0_iter1_reg <= icmp_ln4_154_reg_696;
        icmp_ln4_154_reg_696_pp0_iter2_reg <= icmp_ln4_154_reg_696_pp0_iter1_reg;
        icmp_ln4_155_reg_701 <= icmp_ln4_155_fu_236_p2;
        icmp_ln4_155_reg_701_pp0_iter1_reg <= icmp_ln4_155_reg_701;
        icmp_ln4_155_reg_701_pp0_iter2_reg <= icmp_ln4_155_reg_701_pp0_iter1_reg;
        icmp_ln4_156_reg_706 <= icmp_ln4_156_fu_242_p2;
        icmp_ln4_156_reg_706_pp0_iter1_reg <= icmp_ln4_156_reg_706;
        icmp_ln4_156_reg_706_pp0_iter2_reg <= icmp_ln4_156_reg_706_pp0_iter1_reg;
        icmp_ln4_156_reg_706_pp0_iter3_reg <= icmp_ln4_156_reg_706_pp0_iter2_reg;
        icmp_ln4_reg_629 <= icmp_ln4_fu_164_p2;
        icmp_ln4_reg_629_pp0_iter1_reg <= icmp_ln4_reg_629;
        icmp_ln4_reg_629_pp0_iter2_reg <= icmp_ln4_reg_629_pp0_iter1_reg;
        or_ln120_120_reg_760 <= or_ln120_120_fu_350_p2;
        or_ln120_122_reg_765 <= or_ln120_122_fu_356_p2;
        or_ln120_126_reg_776 <= or_ln120_126_fu_478_p2;
        select_ln120_140_reg_771 <= select_ln120_140_fu_417_p3;
        select_ln120_146_reg_781 <= select_ln120_146_fu_526_p3;
        xor_ln107_66_reg_734 <= xor_ln107_66_fu_272_p2;
        xor_ln107_reg_711 <= xor_ln107_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_561_p33;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        p_read1_int_reg <= p_read1;
        p_read2_int_reg <= p_read2;
        p_read3_int_reg <= p_read3;
        p_read4_int_reg <= p_read4;
        p_read5_int_reg <= p_read5;
        p_read6_int_reg <= p_read6;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_561_p33;
    end else begin
        ap_return = 'bx;
    end
end

assign agg_result_fu_561_p31 = 'bx;

assign agg_result_fu_561_p32 = ((or_ln120_127_fu_549_p2[0:0] == 1'b1) ? select_ln120_146_reg_781 : 4'd14);

assign and_ln105_130_fu_267_p2 = (xor_ln107_fu_248_p2 & icmp_ln4_145_reg_645);

assign and_ln105_131_fu_277_p2 = (icmp_ln4_146_reg_651 & and_ln105_fu_253_p2);

assign and_ln105_132_fu_302_p2 = (icmp_ln4_147_reg_657_pp0_iter1_reg & and_ln107_reg_722);

assign and_ln105_133_fu_430_p2 = (icmp_ln4_149_reg_670_pp0_iter2_reg & and_ln107_16_reg_754);

assign and_ln105_134_fu_306_p2 = (icmp_ln4_150_reg_676_pp0_iter1_reg & and_ln105_131_reg_740);

assign and_ln105_135_fu_310_p2 = (xor_ln107_67_fu_297_p2 & icmp_ln4_151_reg_681_pp0_iter1_reg);

assign and_ln105_136_fu_315_p2 = (and_ln105_reg_716 & and_ln105_135_fu_310_p2);

assign and_ln105_137_fu_320_p2 = (icmp_ln4_152_reg_686_pp0_iter1_reg & and_ln105_132_fu_302_p2);

assign and_ln105_138_fu_439_p2 = (and_ln107_reg_722_pp0_iter2_reg & and_ln105_142_fu_434_p2);

assign and_ln105_139_fu_448_p2 = (icmp_ln4_148_reg_663_pp0_iter2_reg & and_ln105_143_fu_444_p2);

assign and_ln105_140_fu_453_p2 = (icmp_ln4_155_reg_701_pp0_iter2_reg & and_ln105_133_fu_430_p2);

assign and_ln105_141_fu_544_p2 = (and_ln107_16_reg_754_pp0_iter3_reg & and_ln105_144_fu_539_p2);

assign and_ln105_142_fu_434_p2 = (xor_ln107_68_fu_425_p2 & icmp_ln4_153_reg_691_pp0_iter2_reg);

assign and_ln105_143_fu_444_p2 = (icmp_ln4_154_reg_696_pp0_iter2_reg & and_ln105_130_reg_728_pp0_iter2_reg);

assign and_ln105_144_fu_539_p2 = (xor_ln107_70_fu_534_p2 & icmp_ln4_156_reg_706_pp0_iter3_reg);

assign and_ln105_fu_253_p2 = (icmp_ln4_reg_629 & icmp_ln4_144_reg_639);

assign and_ln107_16_fu_293_p2 = (xor_ln107_reg_711 & xor_ln107_66_reg_734);

assign and_ln107_17_fu_287_p2 = (xor_ln107_69_fu_282_p2 & and_ln105_130_fu_267_p2);

assign and_ln107_fu_262_p2 = (xor_ln107_65_fu_257_p2 & icmp_ln4_reg_629);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_144_fu_170_p2 = (($signed(p_read6_int_reg) < $signed(18'd261948)) ? 1'b1 : 1'b0);

assign icmp_ln4_145_fu_176_p2 = (($signed(p_read1_int_reg) < $signed(18'd73236)) ? 1'b1 : 1'b0);

assign icmp_ln4_146_fu_182_p2 = (($signed(p_read2_int_reg) < $signed(18'd52621)) ? 1'b1 : 1'b0);

assign icmp_ln4_147_fu_188_p2 = (($signed(p_read6_int_reg) < $signed(18'd870)) ? 1'b1 : 1'b0);

assign icmp_ln4_148_fu_194_p2 = (($signed(p_read5_int_reg) < $signed(18'd38016)) ? 1'b1 : 1'b0);

assign icmp_ln4_149_fu_200_p2 = (($signed(p_read2_int_reg) < $signed(18'd88783)) ? 1'b1 : 1'b0);

assign icmp_ln4_150_fu_206_p2 = (($signed(p_read5_int_reg) < $signed(18'd15488)) ? 1'b1 : 1'b0);

assign icmp_ln4_151_fu_212_p2 = (($signed(p_read3_int_reg) < $signed(18'd395)) ? 1'b1 : 1'b0);

assign icmp_ln4_152_fu_218_p2 = (($signed(p_read4_int_reg) < $signed(18'd4677)) ? 1'b1 : 1'b0);

assign icmp_ln4_153_fu_224_p2 = (($signed(p_read2_int_reg) < $signed(18'd81020)) ? 1'b1 : 1'b0);

assign icmp_ln4_154_fu_230_p2 = (($signed(p_read5_int_reg) < $signed(18'd30336)) ? 1'b1 : 1'b0);

assign icmp_ln4_155_fu_236_p2 = (($signed(p_read5_int_reg) < $signed(18'd49920)) ? 1'b1 : 1'b0);

assign icmp_ln4_156_fu_242_p2 = (($signed(p_read6_int_reg) < $signed(18'd262084)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_164_p2 = (($signed(p_read3_int_reg) < $signed(18'd4006)) ? 1'b1 : 1'b0);

assign or_ln120_116_fu_330_p2 = (and_ln107_17_reg_746 | and_ln105_131_reg_740);

assign or_ln120_117_fu_334_p2 = (or_ln120_116_fu_330_p2 | and_ln105_136_fu_315_p2);

assign or_ln120_118_fu_340_p2 = (and_ln107_17_reg_746 | and_ln105_reg_716);

assign or_ln120_119_fu_344_p2 = (or_ln120_118_fu_340_p2 | and_ln105_137_fu_320_p2);

assign or_ln120_120_fu_350_p2 = (or_ln120_118_fu_340_p2 | and_ln105_132_fu_302_p2);

assign or_ln120_121_fu_458_p2 = (or_ln120_120_reg_760 | and_ln105_138_fu_439_p2);

assign or_ln120_122_fu_356_p2 = (icmp_ln4_reg_629_pp0_iter1_reg | and_ln107_17_reg_746);

assign or_ln120_123_fu_463_p2 = (or_ln120_122_reg_765 | and_ln105_139_fu_448_p2);

assign or_ln120_124_fu_468_p2 = (icmp_ln4_reg_629_pp0_iter2_reg | and_ln105_130_reg_728_pp0_iter2_reg);

assign or_ln120_125_fu_472_p2 = (or_ln120_124_fu_468_p2 | and_ln105_140_fu_453_p2);

assign or_ln120_126_fu_478_p2 = (or_ln120_124_fu_468_p2 | and_ln105_133_fu_430_p2);

assign or_ln120_127_fu_549_p2 = (or_ln120_126_reg_776 | and_ln105_141_fu_544_p2);

assign or_ln120_128_fu_360_p2 = (xor_ln107_66_reg_734 | icmp_ln4_reg_629_pp0_iter1_reg);

assign or_ln120_129_fu_364_p2 = (or_ln120_128_fu_360_p2 | icmp_ln4_148_reg_663_pp0_iter1_reg);

assign or_ln120_fu_325_p2 = (and_ln107_17_reg_746 | and_ln105_134_fu_306_p2);

assign select_ln120_136_fu_381_p3 = ((or_ln120_116_fu_330_p2[0:0] == 1'b1) ? select_ln120_fu_373_p3 : 2'd3);

assign select_ln120_137_fu_393_p3 = ((or_ln120_117_fu_334_p2[0:0] == 1'b1) ? zext_ln120_23_fu_389_p1 : 3'd4);

assign select_ln120_138_fu_401_p3 = ((or_ln120_118_fu_340_p2[0:0] == 1'b1) ? select_ln120_137_fu_393_p3 : 3'd5);

assign select_ln120_139_fu_409_p3 = ((or_ln120_119_fu_344_p2[0:0] == 1'b1) ? select_ln120_138_fu_401_p3 : 3'd6);

assign select_ln120_140_fu_417_p3 = ((or_ln120_120_fu_350_p2[0:0] == 1'b1) ? select_ln120_139_fu_409_p3 : 3'd7);

assign select_ln120_141_fu_487_p3 = ((or_ln120_121_fu_458_p2[0:0] == 1'b1) ? zext_ln120_24_fu_484_p1 : 4'd8);

assign select_ln120_142_fu_495_p3 = ((or_ln120_122_reg_765[0:0] == 1'b1) ? select_ln120_141_fu_487_p3 : 4'd9);

assign select_ln120_143_fu_502_p3 = ((or_ln120_123_fu_463_p2[0:0] == 1'b1) ? select_ln120_142_fu_495_p3 : 4'd10);

assign select_ln120_144_fu_510_p3 = ((or_ln120_124_fu_468_p2[0:0] == 1'b1) ? select_ln120_143_fu_502_p3 : 4'd11);

assign select_ln120_145_fu_518_p3 = ((or_ln120_125_fu_472_p2[0:0] == 1'b1) ? select_ln120_144_fu_510_p3 : 4'd12);

assign select_ln120_146_fu_526_p3 = ((or_ln120_126_fu_478_p2[0:0] == 1'b1) ? select_ln120_145_fu_518_p3 : 4'd13);

assign select_ln120_fu_373_p3 = ((or_ln120_fu_325_p2[0:0] == 1'b1) ? zext_ln120_fu_369_p1 : 2'd2);

assign xor_ln107_65_fu_257_p2 = (icmp_ln4_144_reg_639 ^ 1'd1);

assign xor_ln107_66_fu_272_p2 = (icmp_ln4_145_reg_645 ^ 1'd1);

assign xor_ln107_67_fu_297_p2 = (icmp_ln4_146_reg_651_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_68_fu_425_p2 = (icmp_ln4_147_reg_657_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_69_fu_282_p2 = (icmp_ln4_148_reg_663 ^ 1'd1);

assign xor_ln107_70_fu_534_p2 = (icmp_ln4_149_reg_670_pp0_iter3_reg ^ 1'd1);

assign xor_ln107_fu_248_p2 = (icmp_ln4_reg_629 ^ 1'd1);

assign zext_ln120_23_fu_389_p1 = select_ln120_136_fu_381_p3;

assign zext_ln120_24_fu_484_p1 = select_ln120_140_reg_771;

assign zext_ln120_fu_369_p1 = or_ln120_129_fu_364_p2;

endmodule //conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_12
