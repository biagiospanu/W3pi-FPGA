-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_3FA00 : STD_LOGIC_VECTOR (17 downto 0) := "111111101000000000";
    constant ap_const_lv18_4980 : STD_LOGIC_VECTOR (17 downto 0) := "000100100110000000";
    constant ap_const_lv18_2280 : STD_LOGIC_VECTOR (17 downto 0) := "000010001010000000";
    constant ap_const_lv18_5880 : STD_LOGIC_VECTOR (17 downto 0) := "000101100010000000";
    constant ap_const_lv18_7F0E : STD_LOGIC_VECTOR (17 downto 0) := "000111111100001110";
    constant ap_const_lv18_3F80 : STD_LOGIC_VECTOR (17 downto 0) := "000011111110000000";
    constant ap_const_lv18_3FE9A : STD_LOGIC_VECTOR (17 downto 0) := "111111111010011010";
    constant ap_const_lv18_1A80 : STD_LOGIC_VECTOR (17 downto 0) := "000001101010000000";
    constant ap_const_lv18_2B80 : STD_LOGIC_VECTOR (17 downto 0) := "000010101110000000";
    constant ap_const_lv18_3280 : STD_LOGIC_VECTOR (17 downto 0) := "000011001010000000";
    constant ap_const_lv18_F31 : STD_LOGIC_VECTOR (17 downto 0) := "000000111100110001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv11_5AA : STD_LOGIC_VECTOR (10 downto 0) := "10110101010";
    constant ap_const_lv11_255 : STD_LOGIC_VECTOR (10 downto 0) := "01001010101";
    constant ap_const_lv11_4B : STD_LOGIC_VECTOR (10 downto 0) := "00001001011";
    constant ap_const_lv11_592 : STD_LOGIC_VECTOR (10 downto 0) := "10110010010";
    constant ap_const_lv11_701 : STD_LOGIC_VECTOR (10 downto 0) := "11100000001";
    constant ap_const_lv11_166 : STD_LOGIC_VECTOR (10 downto 0) := "00101100110";
    constant ap_const_lv11_63A : STD_LOGIC_VECTOR (10 downto 0) := "11000111010";
    constant ap_const_lv11_7E5 : STD_LOGIC_VECTOR (10 downto 0) := "11111100101";
    constant ap_const_lv11_7B9 : STD_LOGIC_VECTOR (10 downto 0) := "11110111001";
    constant ap_const_lv11_45C : STD_LOGIC_VECTOR (10 downto 0) := "10001011100";
    constant ap_const_lv11_103 : STD_LOGIC_VECTOR (10 downto 0) := "00100000011";
    constant ap_const_lv11_667 : STD_LOGIC_VECTOR (10 downto 0) := "11001100111";

attribute shreg_extract : string;
    signal icmp_ln4_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4_reg_521_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_1_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_1_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_2_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_2_reg_537 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_3_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_3_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_4_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_4_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_4_reg_549_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_5_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_5_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_5_reg_555_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_5_reg_555_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_6_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_6_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_7_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_7_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_7_reg_566_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_8_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_8_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_8_reg_571_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_9_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_9_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_9_reg_576_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_10_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_10_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_10_reg_581_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_10_reg_581_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_reg_586 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_1_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_1_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_1_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_1_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_1_reg_598_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_3_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_3_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_3_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_3_reg_609 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_1_fu_315_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_1_reg_615 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln120_7_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_7_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_8_fu_430_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_8_reg_625 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal xor_ln107_1_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_2_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_3_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_5_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_2_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_6_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln120_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_303_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln120_1_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_fu_307_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln107_4_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_8_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_4_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_7_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_9_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_5_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_10_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_1_fu_377_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_2_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_2_fu_380_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_3_fu_387_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln120_4_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_4_fu_395_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_5_fu_402_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln120_2_fu_410_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln120_6_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_6_fu_414_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_7_fu_422_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln107_5_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_11_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_12_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_8_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_fu_465_p25 : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_465_p26 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p27 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read1_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read7_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal agg_result_fu_465_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_465_p23 : STD_LOGIC_VECTOR (3 downto 0);

    component conifer_xgboost_moons_accelerator_sparsemux_25_4_11_1_0_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (10 downto 0);
        din5 : IN STD_LOGIC_VECTOR (10 downto 0);
        din6 : IN STD_LOGIC_VECTOR (10 downto 0);
        din7 : IN STD_LOGIC_VECTOR (10 downto 0);
        din8 : IN STD_LOGIC_VECTOR (10 downto 0);
        din9 : IN STD_LOGIC_VECTOR (10 downto 0);
        din10 : IN STD_LOGIC_VECTOR (10 downto 0);
        din11 : IN STD_LOGIC_VECTOR (10 downto 0);
        def : IN STD_LOGIC_VECTOR (10 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    sparsemux_25_4_11_1_0_x_U184 : component conifer_xgboost_moons_accelerator_sparsemux_25_4_11_1_0_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 11,
        CASE1 => "0001",
        din1_WIDTH => 11,
        CASE2 => "0010",
        din2_WIDTH => 11,
        CASE3 => "0011",
        din3_WIDTH => 11,
        CASE4 => "0100",
        din4_WIDTH => 11,
        CASE5 => "0101",
        din5_WIDTH => 11,
        CASE6 => "0110",
        din6_WIDTH => 11,
        CASE7 => "0111",
        din7_WIDTH => 11,
        CASE8 => "1000",
        din8_WIDTH => 11,
        CASE9 => "1001",
        din9_WIDTH => 11,
        CASE10 => "1010",
        din10_WIDTH => 11,
        CASE11 => "1011",
        din11_WIDTH => 11,
        def_WIDTH => 11,
        sel_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_5AA,
        din1 => ap_const_lv11_255,
        din2 => ap_const_lv11_4B,
        din3 => ap_const_lv11_592,
        din4 => ap_const_lv11_701,
        din5 => ap_const_lv11_166,
        din6 => ap_const_lv11_63A,
        din7 => ap_const_lv11_7E5,
        din8 => ap_const_lv11_7B9,
        din9 => ap_const_lv11_45C,
        din10 => ap_const_lv11_103,
        din11 => ap_const_lv11_667,
        def => agg_result_fu_465_p25,
        sel => agg_result_fu_465_p26,
        dout => agg_result_fu_465_p27);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                and_ln105_1_reg_592 <= and_ln105_1_fu_240_p2;
                and_ln105_3_reg_604 <= and_ln105_3_fu_264_p2;
                and_ln107_1_reg_598 <= and_ln107_1_fu_249_p2;
                and_ln107_1_reg_598_pp0_iter2_reg <= and_ln107_1_reg_598;
                icmp_ln4_10_reg_581 <= icmp_ln4_10_fu_214_p2;
                icmp_ln4_10_reg_581_pp0_iter1_reg <= icmp_ln4_10_reg_581;
                icmp_ln4_10_reg_581_pp0_iter2_reg <= icmp_ln4_10_reg_581_pp0_iter1_reg;
                icmp_ln4_1_reg_531 <= icmp_ln4_1_fu_160_p2;
                icmp_ln4_2_reg_537 <= icmp_ln4_2_fu_166_p2;
                icmp_ln4_3_reg_543 <= icmp_ln4_3_fu_172_p2;
                icmp_ln4_4_reg_549 <= icmp_ln4_4_fu_178_p2;
                icmp_ln4_4_reg_549_pp0_iter1_reg <= icmp_ln4_4_reg_549;
                icmp_ln4_5_reg_555 <= icmp_ln4_5_fu_184_p2;
                icmp_ln4_5_reg_555_pp0_iter1_reg <= icmp_ln4_5_reg_555;
                icmp_ln4_5_reg_555_pp0_iter2_reg <= icmp_ln4_5_reg_555_pp0_iter1_reg;
                icmp_ln4_6_reg_561 <= icmp_ln4_6_fu_190_p2;
                icmp_ln4_7_reg_566 <= icmp_ln4_7_fu_196_p2;
                icmp_ln4_7_reg_566_pp0_iter1_reg <= icmp_ln4_7_reg_566;
                icmp_ln4_8_reg_571 <= icmp_ln4_8_fu_202_p2;
                icmp_ln4_8_reg_571_pp0_iter1_reg <= icmp_ln4_8_reg_571;
                icmp_ln4_9_reg_576 <= icmp_ln4_9_fu_208_p2;
                icmp_ln4_9_reg_576_pp0_iter1_reg <= icmp_ln4_9_reg_576;
                icmp_ln4_reg_521 <= icmp_ln4_fu_154_p2;
                icmp_ln4_reg_521_pp0_iter1_reg <= icmp_ln4_reg_521;
                or_ln120_3_reg_609 <= or_ln120_3_fu_292_p2;
                or_ln120_7_reg_620 <= or_ln120_7_fu_371_p2;
                select_ln120_1_reg_615 <= select_ln120_1_fu_315_p3;
                select_ln120_8_reg_625 <= select_ln120_8_fu_430_p3;
                xor_ln107_reg_586 <= xor_ln107_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= agg_result_fu_465_p27;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
                p_read7_int_reg <= p_read7;
            end if;
        end if;
    end process;
    agg_result_fu_465_p25 <= "XXXXXXXXXXX";
    agg_result_fu_465_p26 <= 
        select_ln120_8_reg_625 when (or_ln120_8_fu_453_p2(0) = '1') else 
        ap_const_lv4_B;
    and_ln105_10_fu_346_p2 <= (icmp_ln4_9_reg_576_pp0_iter1_reg and and_ln105_4_fu_328_p2);
    and_ln105_11_fu_443_p2 <= (xor_ln107_5_fu_438_p2 and icmp_ln4_10_reg_581_pp0_iter2_reg);
    and_ln105_12_fu_448_p2 <= (and_ln107_1_reg_598_pp0_iter2_reg and and_ln105_11_fu_443_p2);
    and_ln105_1_fu_240_p2 <= (xor_ln107_reg_586 and icmp_ln4_2_reg_537);
    and_ln105_2_fu_254_p2 <= (icmp_ln4_3_reg_543 and and_ln107_fu_235_p2);
    and_ln105_3_fu_264_p2 <= (icmp_ln4_4_reg_549 and and_ln105_1_fu_240_p2);
    and_ln105_4_fu_328_p2 <= (icmp_ln4_5_reg_555_pp0_iter1_reg and and_ln107_1_reg_598);
    and_ln105_5_fu_269_p2 <= (xor_ln107_3_fu_259_p2 and icmp_ln4_6_reg_561);
    and_ln105_6_fu_274_p2 <= (and_ln107_fu_235_p2 and and_ln105_5_fu_269_p2);
    and_ln105_7_fu_332_p2 <= (icmp_ln4_7_reg_566_pp0_iter1_reg and and_ln105_3_reg_604);
    and_ln105_8_fu_336_p2 <= (xor_ln107_4_fu_323_p2 and icmp_ln4_8_reg_571_pp0_iter1_reg);
    and_ln105_9_fu_341_p2 <= (and_ln105_8_fu_336_p2 and and_ln105_1_reg_592);
    and_ln105_fu_226_p2 <= (icmp_ln4_reg_521 and icmp_ln4_1_reg_531);
    and_ln107_1_fu_249_p2 <= (xor_ln107_reg_586 and xor_ln107_2_fu_244_p2);
    and_ln107_fu_235_p2 <= (xor_ln107_1_fu_230_p2 and icmp_ln4_reg_521);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(agg_result_fu_465_p27, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= agg_result_fu_465_p27;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln4_10_fu_214_p2 <= "1" when (signed(p_read4_int_reg) < signed(ap_const_lv18_F31)) else "0";
    icmp_ln4_1_fu_160_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_4980)) else "0";
    icmp_ln4_2_fu_166_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_2280)) else "0";
    icmp_ln4_3_fu_172_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_5880)) else "0";
    icmp_ln4_4_fu_178_p2 <= "1" when (signed(p_read3_int_reg) < signed(ap_const_lv18_7F0E)) else "0";
    icmp_ln4_5_fu_184_p2 <= "1" when (signed(p_read2_int_reg) < signed(ap_const_lv18_3F80)) else "0";
    icmp_ln4_6_fu_190_p2 <= "1" when (signed(p_read7_int_reg) < signed(ap_const_lv18_3FE9A)) else "0";
    icmp_ln4_7_fu_196_p2 <= "1" when (signed(p_read5_int_reg) < signed(ap_const_lv18_1A80)) else "0";
    icmp_ln4_8_fu_202_p2 <= "1" when (signed(p_read5_int_reg) < signed(ap_const_lv18_2B80)) else "0";
    icmp_ln4_9_fu_208_p2 <= "1" when (signed(p_read1_int_reg) < signed(ap_const_lv18_3280)) else "0";
    icmp_ln4_fu_154_p2 <= "1" when (signed(p_read6_int_reg) < signed(ap_const_lv18_3FA00)) else "0";
    or_ln120_1_fu_286_p2 <= (or_ln120_fu_280_p2 or and_ln105_6_fu_274_p2);
    or_ln120_2_fu_351_p2 <= (icmp_ln4_reg_521_pp0_iter1_reg or and_ln105_7_fu_332_p2);
    or_ln120_3_fu_292_p2 <= (icmp_ln4_reg_521 or and_ln105_3_fu_264_p2);
    or_ln120_4_fu_356_p2 <= (or_ln120_3_reg_609 or and_ln105_9_fu_341_p2);
    or_ln120_5_fu_361_p2 <= (icmp_ln4_reg_521_pp0_iter1_reg or and_ln105_1_reg_592);
    or_ln120_6_fu_365_p2 <= (or_ln120_5_fu_361_p2 or and_ln105_10_fu_346_p2);
    or_ln120_7_fu_371_p2 <= (or_ln120_5_fu_361_p2 or and_ln105_4_fu_328_p2);
    or_ln120_8_fu_453_p2 <= (or_ln120_7_reg_620 or and_ln105_12_fu_448_p2);
    or_ln120_fu_280_p2 <= (and_ln105_fu_226_p2 or and_ln105_2_fu_254_p2);
    select_ln120_1_fu_315_p3 <= 
        select_ln120_fu_307_p3 when (or_ln120_1_fu_286_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln120_2_fu_380_p3 <= 
        zext_ln120_1_fu_377_p1 when (icmp_ln4_reg_521_pp0_iter1_reg(0) = '1') else 
        ap_const_lv3_4;
    select_ln120_3_fu_387_p3 <= 
        select_ln120_2_fu_380_p3 when (or_ln120_2_fu_351_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln120_4_fu_395_p3 <= 
        select_ln120_3_fu_387_p3 when (or_ln120_3_reg_609(0) = '1') else 
        ap_const_lv3_6;
    select_ln120_5_fu_402_p3 <= 
        select_ln120_4_fu_395_p3 when (or_ln120_4_fu_356_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln120_6_fu_414_p3 <= 
        zext_ln120_2_fu_410_p1 when (or_ln120_5_fu_361_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln120_7_fu_422_p3 <= 
        select_ln120_6_fu_414_p3 when (or_ln120_6_fu_365_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln120_8_fu_430_p3 <= 
        select_ln120_7_fu_422_p3 when (or_ln120_7_fu_371_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln120_fu_307_p3 <= 
        zext_ln120_fu_303_p1 when (or_ln120_fu_280_p2(0) = '1') else 
        ap_const_lv2_2;
    xor_ln107_1_fu_230_p2 <= (icmp_ln4_1_reg_531 xor ap_const_lv1_1);
    xor_ln107_2_fu_244_p2 <= (icmp_ln4_2_reg_537 xor ap_const_lv1_1);
    xor_ln107_3_fu_259_p2 <= (icmp_ln4_3_reg_543 xor ap_const_lv1_1);
    xor_ln107_4_fu_323_p2 <= (icmp_ln4_4_reg_549_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln107_5_fu_438_p2 <= (icmp_ln4_5_reg_555_pp0_iter2_reg xor ap_const_lv1_1);
    xor_ln107_fu_220_p2 <= (icmp_ln4_fu_154_p2 xor ap_const_lv1_1);
    xor_ln120_fu_297_p2 <= (ap_const_lv1_1 xor and_ln105_fu_226_p2);
    zext_ln120_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_1_reg_615),3));
    zext_ln120_2_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_5_fu_402_p3),4));
    zext_ln120_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln120_fu_297_p2),2));
end behav;
