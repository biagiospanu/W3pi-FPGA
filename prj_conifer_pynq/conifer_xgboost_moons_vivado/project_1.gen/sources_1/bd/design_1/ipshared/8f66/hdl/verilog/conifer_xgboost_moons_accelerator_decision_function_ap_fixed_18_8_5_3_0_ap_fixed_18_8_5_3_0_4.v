// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_4 (
        ap_clk,
        ap_rst,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] p_read1;
input  [17:0] p_read2;
input  [17:0] p_read3;
input  [17:0] p_read4;
input  [17:0] p_read5;
input  [17:0] p_read6;
input  [17:0] p_read7;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [0:0] icmp_ln4_fu_178_p2;
reg   [0:0] icmp_ln4_reg_651;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln4_reg_651_pp0_iter1_reg;
reg   [0:0] icmp_ln4_reg_651_pp0_iter2_reg;
wire   [0:0] icmp_ln4_52_fu_184_p2;
reg   [0:0] icmp_ln4_52_reg_662;
wire   [0:0] icmp_ln4_53_fu_190_p2;
reg   [0:0] icmp_ln4_53_reg_668;
wire   [0:0] icmp_ln4_54_fu_196_p2;
reg   [0:0] icmp_ln4_54_reg_674;
wire   [0:0] icmp_ln4_55_fu_202_p2;
reg   [0:0] icmp_ln4_55_reg_680;
reg   [0:0] icmp_ln4_55_reg_680_pp0_iter1_reg;
wire   [0:0] icmp_ln4_56_fu_208_p2;
reg   [0:0] icmp_ln4_56_reg_686;
reg   [0:0] icmp_ln4_56_reg_686_pp0_iter1_reg;
reg   [0:0] icmp_ln4_56_reg_686_pp0_iter2_reg;
wire   [0:0] icmp_ln4_57_fu_214_p2;
reg   [0:0] icmp_ln4_57_reg_692;
reg   [0:0] icmp_ln4_57_reg_692_pp0_iter1_reg;
reg   [0:0] icmp_ln4_57_reg_692_pp0_iter2_reg;
reg   [0:0] icmp_ln4_57_reg_692_pp0_iter3_reg;
wire   [0:0] icmp_ln4_58_fu_220_p2;
reg   [0:0] icmp_ln4_58_reg_698;
reg   [0:0] icmp_ln4_58_reg_698_pp0_iter1_reg;
wire   [0:0] icmp_ln4_59_fu_226_p2;
reg   [0:0] icmp_ln4_59_reg_703;
wire   [0:0] icmp_ln4_60_fu_232_p2;
reg   [0:0] icmp_ln4_60_reg_708;
reg   [0:0] icmp_ln4_60_reg_708_pp0_iter1_reg;
wire   [0:0] icmp_ln4_61_fu_238_p2;
reg   [0:0] icmp_ln4_61_reg_713;
reg   [0:0] icmp_ln4_61_reg_713_pp0_iter1_reg;
wire   [0:0] icmp_ln4_62_fu_244_p2;
reg   [0:0] icmp_ln4_62_reg_718;
reg   [0:0] icmp_ln4_62_reg_718_pp0_iter1_reg;
reg   [0:0] icmp_ln4_62_reg_718_pp0_iter2_reg;
wire   [0:0] icmp_ln4_63_fu_250_p2;
reg   [0:0] icmp_ln4_63_reg_723;
reg   [0:0] icmp_ln4_63_reg_723_pp0_iter1_reg;
reg   [0:0] icmp_ln4_63_reg_723_pp0_iter2_reg;
wire   [0:0] icmp_ln4_64_fu_256_p2;
reg   [0:0] icmp_ln4_64_reg_728;
reg   [0:0] icmp_ln4_64_reg_728_pp0_iter1_reg;
reg   [0:0] icmp_ln4_64_reg_728_pp0_iter2_reg;
wire   [0:0] icmp_ln4_65_fu_262_p2;
reg   [0:0] icmp_ln4_65_reg_733;
reg   [0:0] icmp_ln4_65_reg_733_pp0_iter1_reg;
reg   [0:0] icmp_ln4_65_reg_733_pp0_iter2_reg;
reg   [0:0] icmp_ln4_65_reg_733_pp0_iter3_reg;
wire   [0:0] and_ln105_fu_273_p2;
reg   [0:0] and_ln105_reg_738;
wire   [0:0] and_ln107_fu_282_p2;
reg   [0:0] and_ln107_reg_745;
wire   [0:0] and_ln105_47_fu_287_p2;
reg   [0:0] and_ln105_47_reg_750;
reg   [0:0] and_ln105_47_reg_750_pp0_iter2_reg;
wire   [0:0] and_ln107_6_fu_297_p2;
reg   [0:0] and_ln107_6_reg_757;
reg   [0:0] and_ln107_6_reg_757_pp0_iter2_reg;
reg   [0:0] and_ln107_6_reg_757_pp0_iter3_reg;
wire   [0:0] and_ln105_48_fu_303_p2;
reg   [0:0] and_ln105_48_reg_763;
wire   [0:0] and_ln105_49_fu_313_p2;
reg   [0:0] and_ln105_49_reg_769;
wire   [0:0] or_ln120_fu_329_p2;
reg   [0:0] or_ln120_reg_775;
wire   [0:0] and_ln105_50_fu_340_p2;
reg   [0:0] and_ln105_50_reg_780;
wire   [0:0] or_ln120_47_fu_377_p2;
reg   [0:0] or_ln120_47_reg_785;
wire   [3:0] select_ln120_54_fu_445_p3;
reg   [3:0] select_ln120_54_reg_791;
wire   [0:0] or_ln120_51_fu_500_p2;
reg   [0:0] or_ln120_51_reg_796;
wire   [3:0] select_ln120_60_fu_544_p3;
reg   [3:0] select_ln120_60_reg_801;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln107_24_fu_277_p2;
wire   [0:0] xor_ln107_fu_268_p2;
wire   [0:0] xor_ln107_25_fu_292_p2;
wire   [0:0] xor_ln107_26_fu_308_p2;
wire   [0:0] and_ln105_60_fu_318_p2;
wire   [0:0] and_ln105_53_fu_323_p2;
wire   [0:0] xor_ln107_27_fu_335_p2;
wire   [0:0] and_ln105_61_fu_352_p2;
wire   [0:0] and_ln105_54_fu_348_p2;
wire   [0:0] or_ln120_44_fu_367_p2;
wire   [0:0] and_ln105_55_fu_357_p2;
wire   [0:0] and_ln105_52_fu_344_p2;
wire   [0:0] xor_ln120_fu_382_p2;
wire   [1:0] zext_ln120_fu_388_p1;
wire   [1:0] select_ln120_fu_392_p3;
wire   [1:0] select_ln120_49_fu_399_p3;
wire   [2:0] zext_ln120_9_fu_406_p1;
wire   [0:0] or_ln120_43_fu_362_p2;
wire   [2:0] select_ln120_50_fu_410_p3;
wire   [2:0] select_ln120_51_fu_417_p3;
wire   [0:0] or_ln120_45_fu_371_p2;
wire   [2:0] select_ln120_52_fu_425_p3;
wire   [2:0] select_ln120_53_fu_433_p3;
wire   [3:0] zext_ln120_10_fu_441_p1;
wire   [0:0] xor_ln107_28_fu_452_p2;
wire   [0:0] and_ln105_62_fu_465_p2;
wire   [0:0] and_ln105_51_fu_457_p2;
wire   [0:0] and_ln105_56_fu_461_p2;
wire   [0:0] and_ln105_57_fu_470_p2;
wire   [0:0] or_ln120_49_fu_490_p2;
wire   [0:0] and_ln105_58_fu_475_p2;
wire   [0:0] or_ln120_46_fu_480_p2;
wire   [3:0] select_ln120_55_fu_506_p3;
wire   [0:0] or_ln120_48_fu_485_p2;
wire   [3:0] select_ln120_56_fu_513_p3;
wire   [3:0] select_ln120_57_fu_520_p3;
wire   [0:0] or_ln120_50_fu_494_p2;
wire   [3:0] select_ln120_58_fu_528_p3;
wire   [3:0] select_ln120_59_fu_536_p3;
wire   [0:0] xor_ln107_29_fu_552_p2;
wire   [0:0] and_ln105_63_fu_557_p2;
wire   [0:0] and_ln105_59_fu_562_p2;
wire   [0:0] or_ln120_52_fu_567_p2;
wire   [10:0] agg_result_fu_579_p33;
wire   [3:0] agg_result_fu_579_p34;
wire   [10:0] agg_result_fu_579_p35;
reg    ap_ce_reg;
reg   [17:0] p_read1_int_reg;
reg   [17:0] p_read2_int_reg;
reg   [17:0] p_read3_int_reg;
reg   [17:0] p_read4_int_reg;
reg   [17:0] p_read5_int_reg;
reg   [17:0] p_read6_int_reg;
reg   [17:0] p_read7_int_reg;
reg   [10:0] ap_return_int_reg;
wire   [3:0] agg_result_fu_579_p1;
wire   [3:0] agg_result_fu_579_p3;
wire   [3:0] agg_result_fu_579_p5;
wire   [3:0] agg_result_fu_579_p7;
wire   [3:0] agg_result_fu_579_p9;
wire   [3:0] agg_result_fu_579_p11;
wire   [3:0] agg_result_fu_579_p13;
wire   [3:0] agg_result_fu_579_p15;
wire  signed [3:0] agg_result_fu_579_p17;
wire  signed [3:0] agg_result_fu_579_p19;
wire  signed [3:0] agg_result_fu_579_p21;
wire  signed [3:0] agg_result_fu_579_p23;
wire  signed [3:0] agg_result_fu_579_p25;
wire  signed [3:0] agg_result_fu_579_p27;
wire  signed [3:0] agg_result_fu_579_p29;
wire  signed [3:0] agg_result_fu_579_p31;

conifer_xgboost_moons_accelerator_sparsemux_33_4_11_1_0_x0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 11 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
sparsemux_33_4_11_1_0_x0_U74(
    .din0(11'd1485),
    .din1(11'd1647),
    .din2(11'd1608),
    .din3(11'd790),
    .din4(11'd1486),
    .din5(11'd2028),
    .din6(11'd1499),
    .din7(11'd1944),
    .din8(11'd1416),
    .din9(11'd182),
    .din10(11'd319),
    .din11(11'd1620),
    .din12(11'd1988),
    .din13(11'd1175),
    .din14(11'd232),
    .din15(11'd1725),
    .def(agg_result_fu_579_p33),
    .sel(agg_result_fu_579_p34),
    .dout(agg_result_fu_579_p35)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln105_47_reg_750 <= and_ln105_47_fu_287_p2;
        and_ln105_47_reg_750_pp0_iter2_reg <= and_ln105_47_reg_750;
        and_ln105_48_reg_763 <= and_ln105_48_fu_303_p2;
        and_ln105_49_reg_769 <= and_ln105_49_fu_313_p2;
        and_ln105_50_reg_780 <= and_ln105_50_fu_340_p2;
        and_ln105_reg_738 <= and_ln105_fu_273_p2;
        and_ln107_6_reg_757 <= and_ln107_6_fu_297_p2;
        and_ln107_6_reg_757_pp0_iter2_reg <= and_ln107_6_reg_757;
        and_ln107_6_reg_757_pp0_iter3_reg <= and_ln107_6_reg_757_pp0_iter2_reg;
        and_ln107_reg_745 <= and_ln107_fu_282_p2;
        icmp_ln4_52_reg_662 <= icmp_ln4_52_fu_184_p2;
        icmp_ln4_53_reg_668 <= icmp_ln4_53_fu_190_p2;
        icmp_ln4_54_reg_674 <= icmp_ln4_54_fu_196_p2;
        icmp_ln4_55_reg_680 <= icmp_ln4_55_fu_202_p2;
        icmp_ln4_55_reg_680_pp0_iter1_reg <= icmp_ln4_55_reg_680;
        icmp_ln4_56_reg_686 <= icmp_ln4_56_fu_208_p2;
        icmp_ln4_56_reg_686_pp0_iter1_reg <= icmp_ln4_56_reg_686;
        icmp_ln4_56_reg_686_pp0_iter2_reg <= icmp_ln4_56_reg_686_pp0_iter1_reg;
        icmp_ln4_57_reg_692 <= icmp_ln4_57_fu_214_p2;
        icmp_ln4_57_reg_692_pp0_iter1_reg <= icmp_ln4_57_reg_692;
        icmp_ln4_57_reg_692_pp0_iter2_reg <= icmp_ln4_57_reg_692_pp0_iter1_reg;
        icmp_ln4_57_reg_692_pp0_iter3_reg <= icmp_ln4_57_reg_692_pp0_iter2_reg;
        icmp_ln4_58_reg_698 <= icmp_ln4_58_fu_220_p2;
        icmp_ln4_58_reg_698_pp0_iter1_reg <= icmp_ln4_58_reg_698;
        icmp_ln4_59_reg_703 <= icmp_ln4_59_fu_226_p2;
        icmp_ln4_60_reg_708 <= icmp_ln4_60_fu_232_p2;
        icmp_ln4_60_reg_708_pp0_iter1_reg <= icmp_ln4_60_reg_708;
        icmp_ln4_61_reg_713 <= icmp_ln4_61_fu_238_p2;
        icmp_ln4_61_reg_713_pp0_iter1_reg <= icmp_ln4_61_reg_713;
        icmp_ln4_62_reg_718 <= icmp_ln4_62_fu_244_p2;
        icmp_ln4_62_reg_718_pp0_iter1_reg <= icmp_ln4_62_reg_718;
        icmp_ln4_62_reg_718_pp0_iter2_reg <= icmp_ln4_62_reg_718_pp0_iter1_reg;
        icmp_ln4_63_reg_723 <= icmp_ln4_63_fu_250_p2;
        icmp_ln4_63_reg_723_pp0_iter1_reg <= icmp_ln4_63_reg_723;
        icmp_ln4_63_reg_723_pp0_iter2_reg <= icmp_ln4_63_reg_723_pp0_iter1_reg;
        icmp_ln4_64_reg_728 <= icmp_ln4_64_fu_256_p2;
        icmp_ln4_64_reg_728_pp0_iter1_reg <= icmp_ln4_64_reg_728;
        icmp_ln4_64_reg_728_pp0_iter2_reg <= icmp_ln4_64_reg_728_pp0_iter1_reg;
        icmp_ln4_65_reg_733 <= icmp_ln4_65_fu_262_p2;
        icmp_ln4_65_reg_733_pp0_iter1_reg <= icmp_ln4_65_reg_733;
        icmp_ln4_65_reg_733_pp0_iter2_reg <= icmp_ln4_65_reg_733_pp0_iter1_reg;
        icmp_ln4_65_reg_733_pp0_iter3_reg <= icmp_ln4_65_reg_733_pp0_iter2_reg;
        icmp_ln4_reg_651 <= icmp_ln4_fu_178_p2;
        icmp_ln4_reg_651_pp0_iter1_reg <= icmp_ln4_reg_651;
        icmp_ln4_reg_651_pp0_iter2_reg <= icmp_ln4_reg_651_pp0_iter1_reg;
        or_ln120_47_reg_785 <= or_ln120_47_fu_377_p2;
        or_ln120_51_reg_796 <= or_ln120_51_fu_500_p2;
        or_ln120_reg_775 <= or_ln120_fu_329_p2;
        select_ln120_54_reg_791 <= select_ln120_54_fu_445_p3;
        select_ln120_60_reg_801 <= select_ln120_60_fu_544_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_579_p35;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        p_read1_int_reg <= p_read1;
        p_read2_int_reg <= p_read2;
        p_read3_int_reg <= p_read3;
        p_read4_int_reg <= p_read4;
        p_read5_int_reg <= p_read5;
        p_read6_int_reg <= p_read6;
        p_read7_int_reg <= p_read7;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_579_p35;
    end else begin
        ap_return = 'bx;
    end
end

assign agg_result_fu_579_p33 = 'bx;

assign agg_result_fu_579_p34 = ((or_ln120_52_fu_567_p2[0:0] == 1'b1) ? select_ln120_60_reg_801 : 4'd15);

assign and_ln105_47_fu_287_p2 = (xor_ln107_fu_268_p2 & icmp_ln4_53_reg_668);

assign and_ln105_48_fu_303_p2 = (icmp_ln4_54_reg_674 & and_ln105_fu_273_p2);

assign and_ln105_49_fu_313_p2 = (icmp_ln4_55_reg_680 & and_ln107_fu_282_p2);

assign and_ln105_50_fu_340_p2 = (icmp_ln4_56_reg_686_pp0_iter1_reg & and_ln105_47_reg_750);

assign and_ln105_51_fu_457_p2 = (icmp_ln4_57_reg_692_pp0_iter2_reg & and_ln107_6_reg_757_pp0_iter2_reg);

assign and_ln105_52_fu_344_p2 = (icmp_ln4_58_reg_698_pp0_iter1_reg & and_ln105_48_reg_763);

assign and_ln105_53_fu_323_p2 = (and_ln105_fu_273_p2 & and_ln105_60_fu_318_p2);

assign and_ln105_54_fu_348_p2 = (icmp_ln4_60_reg_708_pp0_iter1_reg & and_ln105_49_reg_769);

assign and_ln105_55_fu_357_p2 = (and_ln107_reg_745 & and_ln105_61_fu_352_p2);

assign and_ln105_56_fu_461_p2 = (icmp_ln4_62_reg_718_pp0_iter2_reg & and_ln105_50_reg_780);

assign and_ln105_57_fu_470_p2 = (and_ln105_62_fu_465_p2 & and_ln105_47_reg_750_pp0_iter2_reg);

assign and_ln105_58_fu_475_p2 = (icmp_ln4_64_reg_728_pp0_iter2_reg & and_ln105_51_fu_457_p2);

assign and_ln105_59_fu_562_p2 = (and_ln107_6_reg_757_pp0_iter3_reg & and_ln105_63_fu_557_p2);

assign and_ln105_60_fu_318_p2 = (xor_ln107_26_fu_308_p2 & icmp_ln4_59_reg_703);

assign and_ln105_61_fu_352_p2 = (xor_ln107_27_fu_335_p2 & icmp_ln4_61_reg_713_pp0_iter1_reg);

assign and_ln105_62_fu_465_p2 = (xor_ln107_28_fu_452_p2 & icmp_ln4_63_reg_723_pp0_iter2_reg);

assign and_ln105_63_fu_557_p2 = (xor_ln107_29_fu_552_p2 & icmp_ln4_65_reg_733_pp0_iter3_reg);

assign and_ln105_fu_273_p2 = (icmp_ln4_reg_651 & icmp_ln4_52_reg_662);

assign and_ln107_6_fu_297_p2 = (xor_ln107_fu_268_p2 & xor_ln107_25_fu_292_p2);

assign and_ln107_fu_282_p2 = (xor_ln107_24_fu_277_p2 & icmp_ln4_reg_651);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln4_52_fu_184_p2 = (($signed(p_read2_int_reg) < $signed(18'd7296)) ? 1'b1 : 1'b0);

assign icmp_ln4_53_fu_190_p2 = (($signed(p_read7_int_reg) < $signed(18'd261524)) ? 1'b1 : 1'b0);

assign icmp_ln4_54_fu_196_p2 = (($signed(p_read1_int_reg) < $signed(18'd6272)) ? 1'b1 : 1'b0);

assign icmp_ln4_55_fu_202_p2 = (($signed(p_read4_int_reg) < $signed(18'd2554)) ? 1'b1 : 1'b0);

assign icmp_ln4_56_fu_208_p2 = (($signed(p_read5_int_reg) < $signed(18'd56832)) ? 1'b1 : 1'b0);

assign icmp_ln4_57_fu_214_p2 = (($signed(p_read6_int_reg) < $signed(18'd260608)) ? 1'b1 : 1'b0);

assign icmp_ln4_58_fu_220_p2 = (($signed(p_read5_int_reg) < $signed(18'd14208)) ? 1'b1 : 1'b0);

assign icmp_ln4_59_fu_226_p2 = (($signed(p_read5_int_reg) < $signed(18'd11648)) ? 1'b1 : 1'b0);

assign icmp_ln4_60_fu_232_p2 = (($signed(p_read2_int_reg) < $signed(18'd29312)) ? 1'b1 : 1'b0);

assign icmp_ln4_61_fu_238_p2 = (($signed(p_read7_int_reg) < $signed(18'd261740)) ? 1'b1 : 1'b0);

assign icmp_ln4_62_fu_244_p2 = (($signed(p_read1_int_reg) < $signed(18'd12416)) ? 1'b1 : 1'b0);

assign icmp_ln4_63_fu_250_p2 = (($signed(p_read3_int_reg) < $signed(18'd93003)) ? 1'b1 : 1'b0);

assign icmp_ln4_64_fu_256_p2 = (($signed(p_read1_int_reg) < $signed(18'd2176)) ? 1'b1 : 1'b0);

assign icmp_ln4_65_fu_262_p2 = (($signed(p_read3_int_reg) < $signed(18'd91010)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_178_p2 = (($signed(p_read3_int_reg) < $signed(18'd57882)) ? 1'b1 : 1'b0);

assign or_ln120_43_fu_362_p2 = (and_ln105_reg_738 | and_ln105_54_fu_348_p2);

assign or_ln120_44_fu_367_p2 = (and_ln105_reg_738 | and_ln105_49_reg_769);

assign or_ln120_45_fu_371_p2 = (or_ln120_44_fu_367_p2 | and_ln105_55_fu_357_p2);

assign or_ln120_46_fu_480_p2 = (icmp_ln4_reg_651_pp0_iter2_reg | and_ln105_56_fu_461_p2);

assign or_ln120_47_fu_377_p2 = (icmp_ln4_reg_651_pp0_iter1_reg | and_ln105_50_fu_340_p2);

assign or_ln120_48_fu_485_p2 = (or_ln120_47_reg_785 | and_ln105_57_fu_470_p2);

assign or_ln120_49_fu_490_p2 = (icmp_ln4_reg_651_pp0_iter2_reg | and_ln105_47_reg_750_pp0_iter2_reg);

assign or_ln120_50_fu_494_p2 = (or_ln120_49_fu_490_p2 | and_ln105_58_fu_475_p2);

assign or_ln120_51_fu_500_p2 = (or_ln120_49_fu_490_p2 | and_ln105_51_fu_457_p2);

assign or_ln120_52_fu_567_p2 = (or_ln120_51_reg_796 | and_ln105_59_fu_562_p2);

assign or_ln120_fu_329_p2 = (and_ln105_53_fu_323_p2 | and_ln105_48_fu_303_p2);

assign select_ln120_49_fu_399_p3 = ((or_ln120_reg_775[0:0] == 1'b1) ? select_ln120_fu_392_p3 : 2'd3);

assign select_ln120_50_fu_410_p3 = ((and_ln105_reg_738[0:0] == 1'b1) ? zext_ln120_9_fu_406_p1 : 3'd4);

assign select_ln120_51_fu_417_p3 = ((or_ln120_43_fu_362_p2[0:0] == 1'b1) ? select_ln120_50_fu_410_p3 : 3'd5);

assign select_ln120_52_fu_425_p3 = ((or_ln120_44_fu_367_p2[0:0] == 1'b1) ? select_ln120_51_fu_417_p3 : 3'd6);

assign select_ln120_53_fu_433_p3 = ((or_ln120_45_fu_371_p2[0:0] == 1'b1) ? select_ln120_52_fu_425_p3 : 3'd7);

assign select_ln120_54_fu_445_p3 = ((icmp_ln4_reg_651_pp0_iter1_reg[0:0] == 1'b1) ? zext_ln120_10_fu_441_p1 : 4'd8);

assign select_ln120_55_fu_506_p3 = ((or_ln120_46_fu_480_p2[0:0] == 1'b1) ? select_ln120_54_reg_791 : 4'd9);

assign select_ln120_56_fu_513_p3 = ((or_ln120_47_reg_785[0:0] == 1'b1) ? select_ln120_55_fu_506_p3 : 4'd10);

assign select_ln120_57_fu_520_p3 = ((or_ln120_48_fu_485_p2[0:0] == 1'b1) ? select_ln120_56_fu_513_p3 : 4'd11);

assign select_ln120_58_fu_528_p3 = ((or_ln120_49_fu_490_p2[0:0] == 1'b1) ? select_ln120_57_fu_520_p3 : 4'd12);

assign select_ln120_59_fu_536_p3 = ((or_ln120_50_fu_494_p2[0:0] == 1'b1) ? select_ln120_58_fu_528_p3 : 4'd13);

assign select_ln120_60_fu_544_p3 = ((or_ln120_51_fu_500_p2[0:0] == 1'b1) ? select_ln120_59_fu_536_p3 : 4'd14);

assign select_ln120_fu_392_p3 = ((and_ln105_48_reg_763[0:0] == 1'b1) ? zext_ln120_fu_388_p1 : 2'd2);

assign xor_ln107_24_fu_277_p2 = (icmp_ln4_52_reg_662 ^ 1'd1);

assign xor_ln107_25_fu_292_p2 = (icmp_ln4_53_reg_668 ^ 1'd1);

assign xor_ln107_26_fu_308_p2 = (icmp_ln4_54_reg_674 ^ 1'd1);

assign xor_ln107_27_fu_335_p2 = (icmp_ln4_55_reg_680_pp0_iter1_reg ^ 1'd1);

assign xor_ln107_28_fu_452_p2 = (icmp_ln4_56_reg_686_pp0_iter2_reg ^ 1'd1);

assign xor_ln107_29_fu_552_p2 = (icmp_ln4_57_reg_692_pp0_iter3_reg ^ 1'd1);

assign xor_ln107_fu_268_p2 = (icmp_ln4_reg_651 ^ 1'd1);

assign xor_ln120_fu_382_p2 = (1'd1 ^ and_ln105_52_fu_344_p2);

assign zext_ln120_10_fu_441_p1 = select_ln120_53_fu_433_p3;

assign zext_ln120_9_fu_406_p1 = select_ln120_49_fu_399_p3;

assign zext_ln120_fu_388_p1 = xor_ln120_fu_382_p2;

endmodule //conifer_xgboost_moons_accelerator_decision_function_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_4
